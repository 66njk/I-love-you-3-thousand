<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>一个 Jerry 的日记</title>
      <link href="2021/03/10/A-Diary-Of-Jerry/"/>
      <url>2021/03/10/A-Diary-Of-Jerry/</url>
      
        <content type="html"><![CDATA[<h1 id="【一个-Jerry-的日记】"><a href="#【一个-Jerry-的日记】" class="headerlink" title="【一个 Jerry 的日记】"></a>【一个 Jerry 的日记】</h1>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
          <category> 生活 </category>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 工作 </tag>
            
            <tag> 思考 </tag>
            
            <tag> 生命 </tag>
            
            <tag> 梦想 </tag>
            
            <tag> 现实 </tag>
            
            <tag> 爱情 </tag>
            
            <tag> 温度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JERRY Linux-小抄》</title>
      <link href="2021/03/09/JERRY-Linux-Cheat-Sheet/"/>
      <url>2021/03/09/JERRY-Linux-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<h1 id="《JERRY-Linux-小抄》"><a href="#《JERRY-Linux-小抄》" class="headerlink" title="《JERRY Linux-小抄》"></a>《JERRY Linux-小抄》</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><blockquote><p>说明：以下内容基于 VMware 16 Player &amp; Ubuntu 20.04.2.0 LTS 环境</p></blockquote><h1 id="一、认识-Linux"><a href="#一、认识-Linux" class="headerlink" title="一、认识 Linux"></a>一、认识 Linux</h1><h2 id="1-1-1-Linux-的由来"><a href="#1-1-1-Linux-的由来" class="headerlink" title="1.1.1 Linux 的由来"></a>1.1.1 Linux 的由来</h2><h2 id="1-1-2-Linux-的内核"><a href="#1-1-2-Linux-的内核" class="headerlink" title="1.1.2 Linux 的内核"></a>1.1.2 Linux 的内核</h2><h2 id="1-1-3-Linux-的特点"><a href="#1-1-3-Linux-的特点" class="headerlink" title="1.1.3 Linux 的特点"></a>1.1.3 Linux 的特点</h2><h2 id="1-1-4-Linux-的用途"><a href="#1-1-4-Linux-的用途" class="headerlink" title="1.1.4 Linux 的用途"></a>1.1.4 Linux 的用途</h2><h2 id="1-2-1-Ubuntu-简介"><a href="#1-2-1-Ubuntu-简介" class="headerlink" title="1.2.1 Ubuntu 简介"></a>1.2.1 Ubuntu 简介</h2><h2 id="1-3-1-Linux-系统结构"><a href="#1-3-1-Linux-系统结构" class="headerlink" title="1.3.1 Linux 系统结构"></a>1.3.1 Linux 系统结构</h2><h2 id="1-4-1-Linux-文件结构"><a href="#1-4-1-Linux-文件结构" class="headerlink" title="1.4.1 Linux 文件结构"></a>1.4.1 Linux 文件结构</h2><h2 id="1-5-1-说明"><a href="#1-5-1-说明" class="headerlink" title="1.5.1 说明"></a>1.5.1 说明</h2>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vi/vim </tag>
            
            <tag> Shell </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JERRY 算法小抄》</title>
      <link href="2021/03/07/JERRY-Algorithm-Cheat-Sheet/"/>
      <url>2021/03/07/JERRY-Algorithm-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<h1 id="《JERRY-算法小抄》"><a href="#《JERRY-算法小抄》" class="headerlink" title="《JERRY 算法小抄》"></a>《JERRY 算法小抄》</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="【输出任意整数的绝对值】"><a href="#【输出任意整数的绝对值】" class="headerlink" title="【输出任意整数的绝对值】"></a>【输出任意整数的绝对值】</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter num: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (num &gt;= <span class="number">0</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num * <span class="number">-1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="【输出任意正整数的位数】"><a href="#【输出任意正整数的位数】" class="headerlink" title="【输出任意正整数的位数】"></a>【输出任意正整数的位数】</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter num: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; num &gt;= <span class="number">1</span>; n++) {</span><br><span class="line">        num = num / <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num is %d digits.\n"</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="【输出任意正整数的每一位值】"><a href="#【输出任意正整数的每一位值】" class="headerlink" title="【输出任意正整数的每一位值】"></a>【输出任意正整数的每一位值】</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本1：逆序输出各位数字（从低位到高位）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> num, temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter num: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">    <span class="comment">// 将 num 赋值给临时变量 temp</span></span><br><span class="line">    temp = num;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; temp &gt;= <span class="number">1</span>; n++) {</span><br><span class="line">        temp = temp / <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出正整数的位数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num is %d digits.\n"</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逆序输出各位数字（从低位到高位）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The reverse order output is: "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i = n; i &gt; <span class="number">0</span>; i--) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, num % <span class="number">10</span>);</span><br><span class="line">        num = num / <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本2：正序输出各位数字（从高位到低位）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> num, temp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter num: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">    <span class="comment">// 将 num 赋值给临时变量 temp</span></span><br><span class="line">    temp = num;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (n = <span class="number">0</span>; temp &gt;= <span class="number">1</span>; n++) {</span><br><span class="line">        temp = temp / <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 输出正整数的位数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"num is %d digits.\n"</span>, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---------------------------------</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 定义一个 n 个空间的一维动态数组</span></span><br><span class="line">    <span class="keyword">int</span> arrLen = n;<span class="comment">// 数组长度</span></span><br><span class="line">    <span class="keyword">int</span> *<span class="built_in">array</span>;<span class="comment">// 数组指针</span></span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">// 数组下标</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态分配内存空间，如果失败就退出程序</span></span><br><span class="line">    <span class="built_in">array</span> = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(arrLen * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">array</span>) {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: Failed to create array!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 向内存中写入数据</span></span><br><span class="line">    <span class="keyword">for</span> (i = arrLen - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--){</span><br><span class="line">    <span class="built_in">array</span>[i] = num % <span class="number">10</span>;</span><br><span class="line">        num = num / <span class="number">10</span>;</span><br><span class="line">    }</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正序输出各位数字（从高位到低位）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The Positive order output is: "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环输出数组元素</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arrLen; i++){</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d  "</span>, <span class="built_in">array</span>[i]);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 及时释放内存空间防止内存泄漏</span></span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">array</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本3 正序输出各位数字（从高位到低位）</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDigits</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printResult</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> num;<span class="comment">// 待处理值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please enter a num:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">// num 的位数</span></span><br><span class="line"></span><br><span class="line">n = getDigits(num);<span class="comment">// 获取 num 的位数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"num is %d digits.\n"</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正序输出各位数字（从高位到低位）</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The Positive order output is: "</span>);</span><br><span class="line"></span><br><span class="line">printResult(num, n);<span class="comment">// 输出最终结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}<span class="comment">// main</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getDigits</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; num &gt;= <span class="number">10</span>; ++i) {</span><br><span class="line">num /= <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">}<span class="comment">// getDigits</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printResult</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span> ; n &gt;= <span class="number">1</span>; n--) {</span><br><span class="line">a = <span class="built_in">pow</span>(<span class="number">10</span>, n - <span class="number">1</span>);<span class="comment">// pow 求次方数, pow(a, x): a 的 x 次方值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, (num / a) % <span class="number">10</span>);</span><br><span class="line">}<span class="comment">// for </span></span><br><span class="line"></span><br><span class="line">}<span class="comment">// printResult</span></span><br></pre></td></tr></tbody></table></figure><h1 id="【输出任意实数的整数及小数部分】"><a href="#【输出任意实数的整数及小数部分】" class="headerlink" title="【输出任意实数的整数及小数部分】"></a>【输出任意实数的整数及小数部分】</h1><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">double</span> num;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Please enter num: "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;num);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> num_integer = (<span class="keyword">int</span>)num;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> num_decimal = num - (<span class="keyword">double</span>)num_integer;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Integer is %d, Decimal is %lf\n"</span>, num_integer, num_decimal);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 基本常用算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Head First Java》—— 读书笔记</title>
      <link href="2021/02/24/Head-First-Java-Reading-Notes/"/>
      <url>2021/02/24/Head-First-Java-Reading-Notes/</url>
      
        <content type="html"><![CDATA[<h1 id="《Head-First-Java》——-读书笔记"><a href="#《Head-First-Java》——-读书笔记" class="headerlink" title="《Head First Java》—— 读书笔记"></a>《Head First Java》—— 读书笔记</h1><blockquote><p>原创内容，学习不易，转载请注明出处，感谢！<br>感谢 《Head First Java》!</p></blockquote><h1 id="前言：学习需求"><a href="#前言：学习需求" class="headerlink" title="前言：学习需求"></a>前言：学习需求</h1><h2 id="一、所需工具"><a href="#一、所需工具" class="headerlink" title="一、所需工具"></a>一、所需工具</h2><ul><li>一个文本编辑器（目前不推荐使用 <code>IDE</code> “集成开发环境”，推荐 <code>Sublime Test</code> 或 <code>VSCode</code>）</li><li>一个终端命令行（使用命令列有利于真正地理解内部运作）</li><li>一个浏览器（推荐 <code>Chrome</code> 不要问为什么）</li><li>一个音乐播放器（不关书的事，是老子推荐的！）</li><li>JDK API 文档（非常重要！！！）</li></ul><h2 id="二、Java-的安装与配置"><a href="#二、Java-的安装与配置" class="headerlink" title="二、Java 的安装与配置"></a>二、Java 的安装与配置</h2><ol><li>需要 <code>1.5</code> 版本以上的 <code>Java SDK</code> 即：<code>JDK</code> （推荐 <code>1.8</code> 版本不要问为什么），请从 <a href="https://www.oracle.com/cn/index.html">Oracle 官网</a> 获取。（Java 原本属于 Sun 公司，后来被 Oracle 收购）</li><li>找到 <code>jdk/bin</code> 目录，并将其 <code>绝对路径</code> 添加到 <code>PATH</code> 系统环境变量中。原因是：该目录下存放有 <code>javac.exe</code> <code>java.exe</code> 及其他重要工具，放到 PATH 中后，在终端输入 <code>javac</code> <code>java</code> 等指令时，系统便会知道要去哪里找到并运行对应的工具。</li></ol><h2 id="三、说明"><a href="#三、说明" class="headerlink" title="三、说明"></a>三、说明</h2><ul><li>书中的首要目标是让读者学习 Java 的基本概念，然后才是开发 Java 过程的组织与管理动作的细节，这些细节在真实环境中非常重要，所以我们会很深入地讨论，但是组织管理细节被安排在后面的章节中。</li><li>本书的主要内容较为基础，距离实际的开发还有很大的距离，博主在归纳本书的内容时会省略一些基本的概念及原理的介绍，有关 Java 基本语法的内容请参考我另外的文章，此篇的主要目的在于归纳《Head First Java》中所出现的一些非基础语法概念，同时在阅读《Head First Java》后推荐您阅读《Java 核心技术 卷1》及《Java 编程思想》这两本 Java 圣经，有空的话请再阅读下《Head First 设计模式》不要问为什么……</li></ul><h1 id="第一章：进入-Java-的世界——基本概念"><a href="#第一章：进入-Java-的世界——基本概念" class="headerlink" title="第一章：进入 Java 的世界——基本概念"></a>第一章：进入 Java 的世界——基本概念</h1><h2 id="一、Java-的工作方式"><a href="#一、Java-的工作方式" class="headerlink" title="一、Java 的工作方式"></a>一、Java 的工作方式</h2><h3 id="1-1-基本步骤"><a href="#1-1-基本步骤" class="headerlink" title="1.1 基本步骤"></a>1.1 基本步骤</h3><ol><li><p>编写 <code>.java</code> 源代码。</p></li><li><p>执行 <code>javac</code> 命令 运行 <code>javac.exe</code> Java 编译器 对 <code>.java</code> 源文件进行编译 并生成同名 <code>.class</code> 字节码文件。 </p></li><li><p>执行 <code>java</code> 命令 运行 <code>java.exe</code> Java 解释器 启动 <code>JVM</code> Java 虚拟机 来运行 <code>.class</code> 文件，JVM 会将字节码文件转换成当前平台能够理解的形式来运行，这也是 Java 语言跨平台特性的基础。</p></li></ol><h3 id="1-2-案例"><a href="#1-2-案例" class="headerlink" title="1.2 案例"></a>1.2 案例</h3><ol><li>编写 <code>Hello.java</code> 源代码</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="2"><li>终端当前路径下执行 <code>javac</code> 命令</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ javac Hello.java</span><br><span class="line"><span class="comment">#（若执行成功，则会在当前目录下生成一个 Hello.class 文件）</span></span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>终端当前路径下执行 <code>java</code> 命令</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java Hello</span><br><span class="line"><span class="comment">#（若执行成功，则会在终端窗口打印 Hello World!）</span></span><br></pre></td></tr></tbody></table></figure><h2 id="二、Java-简史"><a href="#二、Java-简史" class="headerlink" title="二、Java 简史"></a>二、Java 简史</h2><p>（1）Java 1.02</p><ul><li>250 个类</li><li>龟速</li><li>bug 较多</li><li>applet 是重点</li></ul><p>（2）Java 1.1</p><ul><li>500 个类</li><li>狗速</li><li>开始受到欢迎</li><li>适合于开发图形界面</li></ul><p>（3）Java 2（版本 1.2 ~ 1.4）</p><ul><li>2300 个类</li><li>马速</li><li>企业级开发</li><li>移动应用开发</li><li>三种版本 ME（微型、移动）、SE（桌面、标准）、EE（企业、Web）</li></ul><p>（4）Java 5.0（版本 1.5 及以上）</p><ul><li>3500个类</li><li>飞速</li><li>重大更新</li><li>易用</li><li>安全</li></ul><p>（5）Java 5.0 以上</p><ul><li>性能不断强大</li><li>类库不断丰富</li><li>安全不断提高</li><li>生态不断完善</li></ul><h2 id="三、Java-的程序结构"><a href="#三、Java-的程序结构" class="headerlink" title="三、Java 的程序结构"></a>三、Java 的程序结构</h2><h3 id="3-1-基本结构"><a href="#3-1-基本结构" class="headerlink" title="3.1 基本结构"></a>3.1 基本结构</h3><ul><li>类存放于源文件里面</li><li>方法存放于类中</li><li>语句存放于方法中</li></ul><h3 id="3-2-什么是源文件？"><a href="#3-2-什么是源文件？" class="headerlink" title="3.2 什么是源文件？"></a>3.2 什么是源文件？</h3><ul><li>扩展名为 <code>.java</code></li><li>带有类的定义</li><li>一个源文件必须至少有一个类（即：主类）</li><li>主类的名称必须与源文件名相同</li></ul><h3 id="3-3-什么是类？"><a href="#3-3-什么是类？" class="headerlink" title="3.3 什么是类？"></a>3.3 什么是类？</h3><ul><li>带有一个或多个方法</li><li>方法必须在类的内部声明</li></ul><h3 id="3-4-什么是方法？"><a href="#3-4-什么是方法？" class="headerlink" title="3.4 什么是方法？"></a>3.4 什么是方法？</h3><ul><li>在方法的花括号中编写方法应该执行的指令</li><li>方法代码是由一组语句所组成的（函数或方法）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 读书笔记 </tag>
            
            <tag> 《Head First Java》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《复兴时代：计算机技术+》我眼中的图形化编程艺术</title>
      <link href="2021/02/06/JERRY-The-art-of-graphical-programming-in-my-eyes/"/>
      <url>2021/02/06/JERRY-The-art-of-graphical-programming-in-my-eyes/</url>
      
        <content type="html"><![CDATA[<h1 id="【我眼中的图形化编程艺术】"><a href="#【我眼中的图形化编程艺术】" class="headerlink" title="【我眼中的图形化编程艺术】"></a>【我眼中的图形化编程艺术】</h1><blockquote><p>该文是我大一学期时投稿在《复兴时代：计算机技术+》中的一篇文章，其所有内容包括图片均为原创，转载请注明出处！</p></blockquote><p>说真的，时间过得真快！突然想起半年多前，当时的我对计算机技术充满了无限的好奇，而如今我已经学习计算机专业知识半年多了。这个过程中有哭也有笑，某时甚至会感动！不过假如让我谈一谈这段学习过程中最难忘的瞬间，那我想一定是：成功打印 <code>Hello World!</code> 的那一刻！和第一次打开 <code>Scratch</code> 的那一瞬间！说到这，我相信不少读者就有疑问了”啊，<code>Scratch</code> 是什么？“哈哈！没听说过 <code>Scratch</code> 很正常，不然我也就没写这篇文章的必要了，下面请听我娓娓道来……</p><p><code>Scratch</code> 全称：“简易图形化编程语言”，是由麻省理工学院的“终身幼儿园”团队开发的图形化编程工具，目前主要的服务群体是青少年，同时也是少儿编程行业的主流编程语言，直到今天已更新到 <code>3.0</code> 版本。废话不多说，先来看张图吧！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223943480.jpg"> </p><p>上图所展示的就是 <code>Scratch</code> 的初始界面，怎么样？是不是突然有点意外，这和开发人员常用的程序开发软件区别太大了吧！哈哈！别急，好戏还在后头，让你看看 <code>Scratch</code> 可以干什么。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223943268.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223941928.jpg"> </p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223942811.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223945320.jpg"> </p><p>看到这，我想你的第一念头应该是“ <code>Scratch</code> 是一个用于制作小游戏的开发软件。”哈哈！其实我刚开始接触 <code>Scratch</code> 时也这么认为，不过先别着急下结论啊，你再往下看！</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223946791.jpg"> </p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223941693.jpg"> </p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223946519.jpg"> </p><p>哈哈！怎么样？有被惊讶到吧？无论是二维码识别，还是利用 <code>AI</code> 感知年龄（其实本人才19并没有22岁，可能是长的着急了哈哈！）、情绪、脸型，或是利用 <code>AR</code> 虚拟交互设计一款依靠手势便可以控制飞船移动的小游戏，通通可以在 <code>Scratch</code> 上实现。看到这，你肯定在想“这 <code>Scratch</code> 也太神奇了吧！它是怎么做到的？它到底是什么？”哈哈！好奇就对了，我也就有继续说下去的动力了！接下来让我们真正开始了解 <code>Scratch</code> 吧！</p><p>其实无论是小游戏也好，还是 <code>AI</code> 人工智能、<code>AR</code> 虚拟交互也好，假如利用我们主流的高级编程语言纯靠个人的能力来实现其实是比较困难的，毕竟且先不考虑算法设计、代码如何编写、结构如何搭建，就说用户交互界面的设计恐怕也要难倒大部分学习编程的同学，而 <code>Scratch</code> 就完美的解决了这些问题。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223946221.jpg"> </p><p>如图所示：<code>Scratch</code> 从左到右主要由：代码区、造型区、声音区、脚本区、舞台区、角色区、背景区构成。</p><p>代码区提供了控制一切东西的代码模块，其使用方式类似于“搭积木”，但是其基本程序结构和高级编程语言是一致的，比如：顺序、循环、分支……，而且，基本的编程思维也与高级语言同出一辙，像：模块化思想、代码的封装、面向过程、面向对象思想在这里都有体现。</p><p>造型区及声音区的主要功能是为创作者提供角色、背景及声音的创作平台，当然 <code>Scratch</code> 本身也是提供许多默认的角色、背景、声音可供选择。</p><p>脚本区通俗理解就是代码“堆叠”的场所，为程序创作提供代码编写的区域。</p><p>舞台区则是实时展示程序结果的窗口，在这里创作者可以实时预览每条代码、每个模块、每个对象的执行效果。</p><p>而角色区及背景区则是对舞台内所有角色和背景的管理和控制。</p><p><code>Scratch</code> 的基本部分介绍完了，此时也许部分读者会有疑惑了，这看上去不过是将高级编程语言的语句代码变为图形代码啊，的确可以简化小游戏的制作，可怎么就能轻松实现 <code>AI</code> 人工智能，<code>AR</code> 虚拟交互技术了呢？</p><p>其实，<code>AI</code> 与 <code>AR</code> 只不过是 <code>Scratch</code> 的一部分，除了这些，<code>Scratch</code> 还可以：玩爬虫、控制外部硬件（如：机器人编程）、数学计算、物理计算、大数据处理、数据库管理……甚至我还见过一个大神利用 <code>Scratch</code> 弄了一个简单的操作系统！可以说几乎你能想到的应用场景它都可以胜任并且还较为简单！但至于“它是如何做到的？”有关这类问题的回答，我想我还是延续老方法先来看几张图吧。</p><p>  <img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2021020622394561.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223944941.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223945275.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2021020622394599.jpg"></p><p>上面几幅图中一大堆东西是啥？其实，这便是 <code>Scratch</code> 中最具特点的东西！在 <code>Scratch</code> 的代码区中，除了自带的代码外，还提供了许许多多具有特殊功能的模块可供下载使用，这就类似于程序开发中面向对象的概念，它提供了具体的操作工具，至于这些工具是如何设计出来的并不需要创作者去思考，这大大节约了创作的难度，同时有利于创作者把重心放在具体的某些创意上，而不是纠结到底如何设计出一个好的算法。</p><p>而且最重要的是，<code>Scratch</code> 搭建了一个生态，这是一个巨大的全球化网络创作分享平台，在那里有全世界的创作者分享他们的作品，也包括哪些功能特殊的模块，这直接导致 <code>Scratch</code> 的创作交流学习资源空前巨大。创造者可以通过平台交流、学习和合作实现一些原本不可思议的作品，就比如上面提到的操作系统。再者：<code>Scratch 3.0</code> 更是实现了 <code>PC</code> 端与移动端的完美兼容，这空前的打开了 <code>Scratch</code> 的应用场景，作品可以同时适配你的手机和电脑。</p><p>听到这，是不是很开心？平日里学了半天程序开发最终也没弄个像样的东西出来，毕竟用高级编程语言来开发的确需要一定的专业水平，但是假如你利用<code>Scratch</code> 的话也许你早就解决了！哈哈！开心归开心，但是还有一个问题不容我们忽视！讲了这么多，你是否发现，好像 <code>Scratch</code> 把难搞的东西都简化了，对于创作者来说的确是件好事情，但是对于学习程序开发的同学来说似乎并不是一件好事。为什么这么说？因为，正是由于 <code>Scratch</code> 的简单，所以真正专业的程序开发知识在 <code>Scratch</code> 上学不到，而且就算是只用 <code>Scratch</code> 来进行创作，很多时候代码模块远远不能满足自己的需求，须要自己设计开发出一个模块来供自己使用，这时说到底还是要依靠高级语言，比如 <code>Scratch</code> 中的代码模块其实背后大部分是用 <code>Python</code> 语言编写实现的，也就是说，<code>Scratch</code> 中无论 <code>AI</code> 还是 <code>AR</code> 还是其他奇特的功能其背后就是倚仗 <code>Python</code> 这个“老大哥”！那么问题来了，<code>Scratch</code> 真的就只是一个“美丽的花瓶”吗？真的就不适合用来学习程序开发吗？真的就不能成为主流编程语言吗？其实，我也被这些问题困惑很久，对于 <code>Scratch</code> 是否可以用来学习程序开发，我个人认为是可以的，因为 <code>Scratch</code> 的代码在底层是大部分利用 <code>Python</code> 实现的，那“如何结合 <code>Scratch</code> 与 <code>Python</code> 的关系？”便是最主要的问题。答案其实很简单，那就是一起显示出来呗！这样在利用 <code>Scratch</code> 的同时也学习了 <code>Python</code>，关键的是在一些比较难实现的模块例如 <code>AI</code>、<code>AR</code>，借助 <code>Scratch</code> 可以更好的理解 <code>Python</code> 是如何实现的，这不是一举两得吗？而就在前段时间，当我利用海龟编辑器（一个基于 <code>Scratch</code>的开发软件）再一次成功打印 <code>Hello World!</code> 时，当初的那种激动与热泪盈眶，又回来了！我看见了一段有灵魂也有肉体的代码……</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210206223943643.jpg"> </p><p>最后回答那个问题“ <code>Scratch</code> 是不是终究成为不了主流的编程语言？”说实话，至少目前看，可能性极小！但我知道一点，无论 <code>Scratch</code> 是否能接受住时间的考验，无论图形化编程方向最终成功的是否是 <code>Scratch</code>。图形化编程一定是一种特别的艺术！图形化编程思想也必将成为一种趋势！自从世界上第一台通用计算机“ <code>ENIAC</code> ”于1946年在美国宾夕法尼亚大学诞生以来，直到今天互联网发展日新月异，但在时代的浪潮之中，唯有“创造”一词从来都是最耀眼的！而受制于计算机技术的专业性，无论是：社交平台、移动支付、网络购物、无人驾驶、共享经济……这类事物的创造都需要倚仗很高的专业知识背景，它们很美！可它们却只能在金字塔顶尖才能诞生！这不禁让我感到惋惜！设想一下，假如未来某一天程序开发可以像今天的短视频创作那样形成一个全民创作的浪潮！到那时，世界该是什么样的？我想，这或许就是图形化编程的使命吧！但无论如何，我只希望那一天早点到来！</p><p> 2020年4月28日</p>]]></content>
      
      
      <categories>
          
          <category> 图形化编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形化编程 </tag>
            
            <tag> 可视化编程 </tag>
            
            <tag> 少儿编程 </tag>
            
            <tag> Scratch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础注意事项归纳——Java小抄(10)</title>
      <link href="2021/01/08/Java-Supplement-10/"/>
      <url>2021/01/08/Java-Supplement-10/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java基础注意事项归纳——Java小抄-10-】"><a href="#【Java基础注意事项归纳——Java小抄-10-】" class="headerlink" title="【Java基础注意事项归纳——Java小抄(10)】"></a>【Java基础注意事项归纳——Java小抄(10)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>Java 中继承了 C 系语言的格式化输出函数，<code>printf</code> 使用方式与 C 系语言一样，但不建议在 Java 中使用这种输出方式！</p><h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>javac 编译器可以指定用何种方式编译 java 程序，指定方式为：<code>javac -encoding UTF-8 Test.java</code></p><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>牢记 A 的 ASCII 为：65，a 的 ASCII 为：97</p><h1 id="4"><a href="#4" class="headerlink" title="4"></a>4</h1><p>两数求余数，注意符号（符号与前者相同）例如：<code>-5 % -2    //-1</code></p><h1 id="5"><a href="#5" class="headerlink" title="5"></a>5</h1><p>Java 中可在数字之间使用下划线，以提高可读性</p><p>例如：</p><p><code>int x1 = 1_969;</code></p><p><code>double d1 = 1_969.09_19;</code></p><p>注意：下划线只能在两个数字之间</p><ul><li>不能在开头与结尾</li><li>不能在前缀或者后缀的内部或前后：<code>0x_7B1</code>、<code>1969_L</code>，八进制除外</li><li>不能在小数点前后</li></ul><h1 id="6"><a href="#6" class="headerlink" title="6"></a>6</h1><p>Java 中是可以连续赋值的</p><p><code>num1 = num2 = num3 = 24;</code></p><p>注意：此时的赋值顺序是：从右到左</p><h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><p>对赋值号的深入理解：</p><p><code>a = 10;</code></p><ul><li>1、将 10 赋值给 a 变量</li><li>2、 <code>a = 10;</code> 是一个表达式，该式会产生一个结果 = 左值（即：a = 10; 的结果就是 10)</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(a = <span class="number">10</span>);<span class="comment">//10</span></span><br><span class="line">System.out.println(<span class="number">10</span> + (a = <span class="number">30</span>));<span class="comment">//40</span></span><br><span class="line">System.out.println(a = b = <span class="number">10</span>);<span class="comment">//10</span></span><br><span class="line">System.out.println((a = <span class="number">10</span>) + (b = <span class="number">20</span>));<span class="comment">//30</span></span><br></pre></td></tr></tbody></table></figure><h1 id="8"><a href="#8" class="headerlink" title="8"></a>8</h1><p>在 Java 中：</p><p><code>整数 / 0</code> ：报错</p><p><code>浮点数 / 0</code> ：无穷大（Infinity）</p><h1 id="9"><a href="#9" class="headerlink" title="9"></a>9</h1><p>浮点型数据比较规则：</p><ul><li>0.0 与 -0.0 是相等的</li><li>浮点型与整数型只要值相等时，则也是相等的</li><li>正无穷与正无穷相等</li><li>NaN 与任何数都不相等，包括 NaN（NaN 不是一个数字，例如：一个正整数除以 0 的结果为：正无穷大；浮点数 / 0 、负数的平方根 结果为：NaN）</li></ul><h1 id="10"><a href="#10" class="headerlink" title="10"></a>10</h1><p><code>&amp;&amp;</code> 和 <code>||</code> 是短路运算符，即：一个表达式得结果，后一个表达式就不用运算了</p><p><code>&amp;</code> 和 <code>|</code> 是非短路运算符，即：一个表达式得结果，后一个表达式也要运算</p><h1 id="11"><a href="#11" class="headerlink" title="11"></a>11</h1><p>三元运算符：</p><p><code>boolean表达式? 表达式1: 表达式2;</code></p><p>若 boolean 为真，结果为表达式1，否则为表达式2</p><p>注意：</p><ul><li>必须为表达式！例如：System.out.println(); 这些就不可以！</li><li>三元运算符都可以转化为 if-else，但反之则不一定</li></ul><h1 id="12"><a href="#12" class="headerlink" title="12"></a>12</h1><p>特别注意：</p><p>if-else 语句中是：<code>else if () {}</code>，千万不要误以为是：<code>if else () {}</code></p><h1 id="13"><a href="#13" class="headerlink" title="13"></a>13</h1><h2 id="label-的使用"><a href="#label-的使用" class="headerlink" title="label 的使用"></a><code>label</code> 的使用</h2><p><code>label</code> 是一个标签，可以使用 <code>break</code> 或 <code>continue</code> 使程序跳转到这个标签处执行（执行：<code>break</code> 或 <code>continue</code>），从而改变程序的执行流程</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jerry.eclipse.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">a: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) {</span><br><span class="line"><span class="keyword">if</span> (i + j == <span class="number">6</span>) {</span><br><span class="line">System.out.print(<span class="string">"j="</span>);</span><br><span class="line">System.out.print(j);</span><br><span class="line"><span class="keyword">break</span> a;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.print(<span class="string">"i="</span>);</span><br><span class="line">System.out.println(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j=6</span><br></pre></td></tr></tbody></table></figure><h2 id="label-的另类用法："><a href="#label-的另类用法：" class="headerlink" title="label 的另类用法："></a><code>label</code> 的另类用法：</h2><p>（用在循环外）</p><p>案例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jerry.eclipse.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">b: {</span><br><span class="line">System.out.println(<span class="string">"b"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">0</span>) {</span><br><span class="line">System.out.println(<span class="string">"break"</span>);</span><br><span class="line"><span class="keyword">break</span> b;</span><br><span class="line">}</span><br><span class="line">System.out.println(<span class="string">"b2"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b</span><br><span class="line">break</span><br></pre></td></tr></tbody></table></figure><p>注意：</p><ul><li>b label 标签内的变量是局部变量，只在 b {} 中有效</li><li>且 break b; 只能出现在 b{} 中，否则会报错</li></ul><h2 id="continue-与-label-的使用只能在循环中！"><a href="#continue-与-label-的使用只能在循环中！" class="headerlink" title="continue 与 label 的使用只能在循环中！"></a><code>continue</code> 与 <code>label</code> 的使用只能在循环中！</h2><p>案例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jerry.eclipse.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">a: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) {</span><br><span class="line"><span class="keyword">if</span> (i + j == <span class="number">6</span>) {</span><br><span class="line">System.out.print(<span class="string">"j="</span>);</span><br><span class="line">System.out.println(j);</span><br><span class="line"><span class="keyword">continue</span> a;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">System.out.print(<span class="string">"i="</span>);</span><br><span class="line">System.out.println(i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">j=6</span><br><span class="line">j=5</span><br><span class="line">j=4</span><br><span class="line">j=3</span><br><span class="line">j=2</span><br><span class="line">j=1</span><br><span class="line">j=0</span><br><span class="line">i=7</span><br><span class="line">i=8</span><br><span class="line">i=9</span><br></pre></td></tr></tbody></table></figure><p>注意：在实际开发中，不推荐使用标记跳转！因为其破坏了程序的结构！</p><h1 id="14"><a href="#14" class="headerlink" title="14"></a>14</h1><p>Java 数组</p><h2 id="一、定义："><a href="#一、定义：" class="headerlink" title="一、定义："></a>一、定义：</h2><ul><li>数组是一个变量，存储相同数据类型的一组数据</li><li>声明一个变量就是在内存空间划出一块合适的空间</li><li>声明一个数组就是在内存空间划出一串连续的空间</li></ul><h2 id="二、特点："><a href="#二、特点：" class="headerlink" title="二、特点："></a>二、特点：</h2><ul><li>存放相同数据类型</li><li>内存中连续分配相同大小的空间</li><li>大小一但确定将不可扩容或缩容</li><li>检索元素速度快，而添加和删除元素慢</li><li>使用下标访问元素，下标从0开始</li></ul><h2 id="三、数组的使用"><a href="#三、数组的使用" class="headerlink" title="三、数组的使用"></a>三、数组的使用</h2><p>四步走：</p><ul><li>1、声明数组：<code>int[] a;</code>（常用）,<code>int a[];</code><ul><li>注意：声明数组时不规定数组长度，规定会报错！</li></ul></li><li>2、分配空间：<code>a = new int[5];</code><ul><li>注意：此步骤与上一步可以合并：<code>int [] a = new int[5];</code></li></ul></li><li>3、赋值：<code>a[0] = 24;</code></li><li>4、处理数据：<code>a[0] = a[0] * 10;</code></li></ul><p>关于赋值：</p><ul><li><p>普通赋值：<code>a[0] = 5;</code>，<code>a[1] = 9;</code></p></li><li><p>边声明边赋值：</p><ul><li><p><code>int[] a = {66, 54, 24};</code></p></li><li><p>``int[] a = new int[]{66, 54, 24};`</p><p>注意：此方式<code>[]</code>内不能指定长度！</p></li><li><p><code>int[] a;</code></p><p><code>a = new int[]{66, 54, 24};</code></p><p>注意：不可以直接 <code>a = {66, 54, 24};</code></p></li></ul></li><li><p>动态地从键盘录入赋值：</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jerry.eclipse.java;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) {</span><br><span class="line">            a[i] = scanner.nextInt();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="四、数组的默认值"><a href="#四、数组的默认值" class="headerlink" title="四、数组的默认值"></a>四、数组的默认值</h2><p>在数组中：</p><ul><li>基本数据类型默认值为：<code>0</code>、<code>0.0</code>、<code>a</code>、<code>false</code> 等</li><li>引用数据类型默认值为：<code>null</code></li></ul><p>注意：数组之所以会有默认值，是因为系统会自动为堆里的任何东西自动先赋一个处值！</p><h2 id="五、使用循环遍历数组"><a href="#五、使用循环遍历数组" class="headerlink" title="五、使用循环遍历数组"></a>五、使用循环遍历数组</h2><p>使用数组的属性 <code>length</code> 控制循环的次数</p><p>方法：</p><p>1、使用 for 循环</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; scores.length; i++) {</span><br><span class="line">    System.out.println(scores[i]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2、使用 foreach 循环</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> score: scores) {</span><br><span class="line">    System.out.println(score);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// score 为一个临时变量，保存每一个 scores 遍历时的值</span></span><br><span class="line"><span class="comment">// 对于单纯的遍历数组而言推荐使用 foreach 循环</span></span><br></pre></td></tr></tbody></table></figure><h2 id="六、二维数组"><a href="#六、二维数组" class="headerlink" title="六、二维数组"></a>六、二维数组</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] nums1 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> nums2[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span>[][] nums3 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][];</span><br><span class="line"><span class="keyword">int</span>[][] nums4 = {{<span class="number">1</span>, <span class="number">2</span>}, {<span class="number">3</span>, <span class="number">4</span>}, {<span class="number">5</span>, <span class="number">6</span>}};</span><br><span class="line"><span class="keyword">int</span>[][] nums5 = <span class="keyword">new</span> <span class="keyword">int</span>[][]{{<span class="number">1</span>, <span class="number">2</span>}, {<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>}};</span><br><span class="line"><span class="keyword">int</span> nums6[][];</span><br><span class="line"><span class="keyword">int</span>[] nums7[];</span><br></pre></td></tr></tbody></table></figure><p>注意：在 Java 中二维数组可以不写列数，但是一定要指明行数！但是在 C 系语言中则相反，这是因为两种语言的数组结构在底层的存储方式不同导致的！</p><h1 id="15"><a href="#15" class="headerlink" title="15"></a>15</h1><p>Java 中数组内存管理的说明</p><p>数组既可以存储基本数据类型，也可以存储引用数据类型</p><h2 id="一、数组的定义格式："><a href="#一、数组的定义格式：" class="headerlink" title="一、数组的定义格式："></a>一、数组的定义格式：</h2><ul><li>格式1：<code>数据类型[] 数组名;</code> （推荐）</li><li>格式2：<code>数据类型 数组名[];</code></li><li>注意：定义做完后，数组中是没有元素值的</li></ul><h2 id="二、数组的初始化："><a href="#二、数组的初始化：" class="headerlink" title="二、数组的初始化："></a>二、数组的初始化：</h2><ul><li>数组初始化概述：</li></ul><p>Java 中的数组必须先初始化，然后才能使用！</p><p>例如：<code>int[] a = new int[];        //报错</code></p><p>所谓初始化：就是为数组中的数组元素分配内存空间，并为每个数组元素赋值</p><ul><li>数组的初始化方式：</li></ul><p>1、动态初始化：初始化时只指定数组长度，由系统为数组分配初始值</p><ul><li>格式：</li></ul><p><code>数据类型[] 数组名 = new 数据类型[数组长度];</code></p><p>数组长度其实就是数组中元素的个数</p><ul><li>举例：</li></ul><p><code>int[] arr = new int[3];</code></p><p>解释：定义了一个 int 类型的数组，这个数组中可以存放3个 int 类型的值</p><p>2、静态初始化：初始化时指定每个数组元素的初始值，由系统决定数组长度</p><ul><li>格式：</li></ul><p><code>数据类型[] 数组名 = new 数据类型[]{元素1, 元素2, ...};</code></p><ul><li>举例：</li></ul><p><code>int[] arr = new int[]{1, 2, 3};</code></p><p>解释：定义了一个 int  类型的数组，这个数组中可以存放3个 int 类型的值，值分别是：1, 2, 3</p><p>简化写法：<code>int[] arr = {1, 2, 3};</code></p><h2 id="三、数组操作常见的两个问题"><a href="#三、数组操作常见的两个问题" class="headerlink" title="三、数组操作常见的两个问题"></a>三、数组操作常见的两个问题</h2><ul><li><p>数组索引越界</p><ul><li><code>ArrayIndexOutOfBoundsException</code></li><li>访问到了数组中的不存在的索引时发生</li></ul></li><li><p>空指针异常</p><ul><li><code>NallPointerException</code></li><li>数组引用没有指向实体，却在操作实体中的元素时</li></ul></li></ul><h2 id="四、一位数组的内存分配"><a href="#四、一位数组的内存分配" class="headerlink" title="四、一位数组的内存分配"></a>四、一位数组的内存分配</h2><p>由于数组属于引用类型，所以其主体是放在堆中（存放 new 出来的东西）而在栈中（局部变量）对其引用</p><p><code>int arr[] = new int[3];</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210127160639755.png"></p><h2 id="五、二维数组"><a href="#五、二维数组" class="headerlink" title="五、二维数组"></a>五、二维数组</h2><p>其实二维数组就是一个元素为一位数组的数组</p><p>（因为：数组既可以存储基本数据类型，也可以存储引用数据类型）</p><h2 id="六、二维数组的定义格式"><a href="#六、二维数组的定义格式" class="headerlink" title="六、二维数组的定义格式"></a>六、二维数组的定义格式</h2><ul><li><p>格式1</p><ul><li><p><code>数据类型[][] 变量名 = new 数据类型[m][n];</code></p></li><li><p>m 表示这个二维数组有多少个一维数组</p></li><li><p>n 表示每一个一维数组的元素个数</p></li><li><p>举例：</p><p><code>int[][] arr = new int[3][2];</code></p><p>定义了一个二维数组 arr</p><p>这个二维数组有 3 个一维数组，名称是 <code>arr[0]</code>，<code>arr[1]</code>，<code>arr[2]</code>；</p><p>每个一维数组有2个元素，可以通过 <code>arr[m][n]</code> 来获取，表示获取第 m+1 个一维数组的第 n+1 个元素</p></li></ul></li><li><p>格式2</p><ul><li><p><code>数据类型[][] 变量名 = new 数据类型[m][n];</code></p></li><li><p>m 表示这个二维数组有多少个一维数组</p></li><li><p>这一次没有直接给出一维数组的元素个数，可以动态的给出</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">arr[<span class="number">2</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>格式3</p><ul><li><p><code>数据类型[][] 变量名 = new 数据类型[][]{{元素...}, {元素...}, {元素...}};</code></p></li><li><p>简化版格式：<code>数据类型[][] 变量名 = {{元素...}, {元素...}, {元素...}};</code></p></li><li><p>举例：</p><p><code>int[][] arr = {{1, 2, 3}, {4, 6}, {6}};</code></p></li></ul></li></ul><h2 id="七、二维数组的内存分配"><a href="#七、二维数组的内存分配" class="headerlink" title="七、二维数组的内存分配"></a>七、二维数组的内存分配</h2><p><code>int[][] arr = new int[3][];</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210127164103595.png"></p><p><code>arr[0] = new int[3];</code></p><p><code>arr[1] = new int[5];</code></p><p><code>arr[2] = new int[1];</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210127164103587.png"></p><p>说明：这里 Java 与 C / C++ 语言在二维数组内存分配上最大的区别，在 C / C++ 中二维数组是一个合并成的一维数组，并在逻辑上为其划分为二维，而 Java 截然不同，在内存上更加清晰</p><p>由以上说明引出的三个注意点：</p><p>1、</p><p>在 C / C++ 中：<code>a[][n]</code> 是合法的，但 Java 不合法</p><p>在 Java 中：<code>a[m][]</code> 是合法的，但 C / C++ 不合法</p><p>2、</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>][];</span><br><span class="line">arr[<span class="number">1</span>] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">System.out.println(arr);<span class="comment">// [[I@1b6d3586</span></span><br><span class="line">System.out.println(arr[<span class="number">0</span>]);<span class="comment">// null</span></span><br><span class="line">System.out.println(arr[<span class="number">1</span>]);<span class="comment">// [I@4554617c</span></span><br><span class="line">System.out.println(arr[<span class="number">2</span>]);<span class="comment">// null</span></span><br></pre></td></tr></tbody></table></figure><p>C / C++ 中：a 与 a[0] 都是表示二维数组的首地址</p><p>Java 中：a 与 a[0] 则不是一个概念</p><p>3、</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] arr = {{<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>},</span><br><span class="line">               {<span class="number">50</span>, <span class="number">10</span>},</span><br><span class="line">               {<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">100</span>, <span class="number">2000</span>}};</span><br><span class="line">System.out.println(a.length);<span class="comment">// 3</span></span><br><span class="line">System.out.println(a[<span class="number">1</span>].length);<span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二维数组名.length 表示二维数组中有多少个一维数组</span></span><br><span class="line"><span class="comment">// 二维数组名[n].length 表示二维数组中的第 n+1 个一维数组有多少个元素</span></span><br></pre></td></tr></tbody></table></figure><h1 id="16"><a href="#16" class="headerlink" title="16"></a>16</h1><p><code>System.out.println();</code> 的风格优化</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">5</span>;</span><br><span class="line">System.out.printf(<span class="string">"a = "</span> + a + <span class="string">", "</span> + <span class="string">"b = "</span> + b);<span class="comment">// a=10, b=5</span></span><br></pre></td></tr></tbody></table></figure><h1 id="17"><a href="#17" class="headerlink" title="17"></a>17</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> y = (x++) + (++x) + (x * <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 运算顺序从左到右，所以：y = 70</span></span><br><span class="line"><span class="comment">// 当然 ++、-- 一般只应该单独独立，这样的风格很差</span></span><br></pre></td></tr></tbody></table></figure><h1 id="18"><a href="#18" class="headerlink" title="18"></a>18</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x += <span class="number">4</span> + <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// x = x + (4 + 3 + 1)</span></span><br><span class="line"><span class="comment">//即：+= -= *= ... 都是：左 = 左 + (右全部)</span></span><br></pre></td></tr></tbody></table></figure><h1 id="19"><a href="#19" class="headerlink" title="19"></a>19</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">s = s + <span class="number">1</span>;<span class="comment">// 报错！不兼容的类型：从 int 转换到 short 可能会有损（原因：出现了具体变量）</span></span><br><span class="line">s += <span class="number">1</span>;<span class="comment">// 正常！s += 1; 的本质是：s = (s的数据类型)(s + 1);</span></span><br></pre></td></tr></tbody></table></figure><h1 id="20"><a href="#20" class="headerlink" title="20"></a>20</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (x == <span class="number">3</span>) {</span><br><span class="line">    </span><br><span class="line">} <span class="comment">// 死循环！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> y = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (y = <span class="number">3</span>) {</span><br><span class="line">    </span><br><span class="line">} <span class="comment">// 报错！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原因：x = 3 本质上就是一个 3，而 Java 中 3 并不是 true.（与 C 语言的区别）</span></span><br><span class="line"><span class="comment">// 即：Java 中布尔值只能用 true false 表示！</span></span><br><span class="line"><span class="comment">// Java 不是 C！</span></span><br></pre></td></tr></tbody></table></figure><h1 id="21"><a href="#21" class="headerlink" title="21"></a>21</h1><p>switch 语句说明：</p><ul><li><code>case x:</code> x 只能是常量！（注意：<code>int b = 1; ... case b:</code> 报错！）</li><li><code>switch</code> 中只有遇到 <code>break;</code> 或 <code>}</code> 才会退出！</li><li><code>default:</code> 语句可以放在 <code>switch</code> 中的任何位置（但：优先推荐放在末尾）</li></ul><h1 id="22"><a href="#22" class="headerlink" title="22"></a>22</h1><p><code>\n</code> 换行符 与 <code>\r</code> 回车符的解释</p><ul><li><code>\n</code> 换行符的本质是去到当前光标的正下放</li><li><code>\r</code> 回车符的本质是去到当前光标所在行的第一个位置</li><li>在 C Java 中，<code>\n == \n\r == \r\n</code> 即：<code>\n</code> 便去到了下一行的第一个位置</li></ul><h1 id="23"><a href="#23" class="headerlink" title="23"></a>23</h1><p><code>\t</code> 制表符的解释</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jerry.eclipse.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"xxxxxxxxxxx"</span>);</span><br><span class="line">System.out.println(<span class="string">"1\tend"</span>);</span><br><span class="line">System.out.println(<span class="string">"12\tend"</span>);</span><br><span class="line">System.out.println(<span class="string">"123\tend"</span>);</span><br><span class="line">System.out.println(<span class="string">"1234\tend"</span>);</span><br><span class="line">System.out.println(<span class="string">"12345\tend"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xxxxxxxxxxx</span><br><span class="line">1end</span><br><span class="line">12end</span><br><span class="line">123end</span><br><span class="line">1234end</span><br><span class="line">12345end</span><br></pre></td></tr></tbody></table></figure><p><code>\t</code> 制表符原本是 8 个空格，当然在开发中经常将其改为 4 个空格，并且 <code>\t</code> 的实际空格数与 <code>\t</code> 前的字符数且相关，故可利用该特性来对齐文本！</p><h1 id="24"><a href="#24" class="headerlink" title="24"></a>24</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"'"</span>);</span><br><span class="line">System.out.println(<span class="string">"\'"</span>);</span><br><span class="line"><span class="comment">// '可以带转义字符，也不可以带</span></span><br></pre></td></tr></tbody></table></figure><h1 id="25"><a href="#25" class="headerlink" title="25"></a>25</h1><p><code>.nextLine()</code> 与 <code>.next()</code> 的说明</p><p><code>.nextLine()</code> 与 <code>.next()</code> 都是用于接收字符串的函数，但是，<code>.next()</code> 会自动丢弃字符串前的空格、回车，所以有下面几种特殊情况</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jerry.eclipse.java;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"PLEASE INPUT INT NUM:"</span>);</span><br><span class="line"><span class="keyword">int</span> test1 = scanner.nextInt();</span><br><span class="line">System.out.println(test1);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"PLEASE INPUT STRING:"</span>);</span><br><span class="line">String test2 = scanner.nextLine();</span><br><span class="line">System.out.println(test2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行效果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PLEASE INPUT INT NUM:24</span><br><span class="line">24</span><br><span class="line">PLEASE INPUT STRING:</span><br></pre></td></tr></tbody></table></figure><p>解释：</p><p>在第一次输入 <code>24+回车</code> 后， test1 只是接收了 <code>24</code>，而 <code>回车符</code> 被留在了缓存区中，当 <code>.nextLine()</code> 开始执行时，<code>回车符</code> 会默认被当做字符接收</p><p>解决方法：</p><ul><li>1、最优方案</li></ul><p>在第二次输入前加入一条输入语句：</p><p><code>scanner.nextLine();        // 用于清空缓冲区的字符（回车符）</code></p><ul><li>2、用 <code>.next()</code> 代替 <code>.nextLine()</code></li></ul><p>该方案会忽略字符串前的空格（包括：回车符）</p><p>（一般用于不要空格的字符串输入，如：密码）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jerry.eclipse.java;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"PLEASE INPUT INT NUM:"</span>);</span><br><span class="line">String test1 = scanner.nextLine();</span><br><span class="line">System.out.println(test1);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"PLEASE INPUT STRING:"</span>);</span><br><span class="line">String test2 = scanner.nextLine();</span><br><span class="line">System.out.println(test2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PLEASE INPUT INT NUM:zjr</span><br><span class="line">zjr</span><br><span class="line">PLEASE INPUT STRING:lxy</span><br><span class="line">lxy</span><br></pre></td></tr></tbody></table></figure><p>解释：这次之所以可行，是因为前一个为字符串，在输入 <code>zjr+回车</code> 后 <code>回车符</code> 也会被 test1 接受！并不会导致下一个 <code>.nextLine</code> 异常</p><p>对 <code>.next()</code> 的解释</p><p>1、对象：接受字符串</p><p>2、特点：从第一个非空字符开始到空字符结束</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jerry.eclipse.java;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"Please input String:"</span>);</span><br><span class="line">String test = scanner.next();</span><br><span class="line">System.out.println(test);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Please input String:"</span>);</span><br><span class="line">String test2 = scanner.next();</span><br><span class="line">System.out.println(test2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Please input String:zjr lxy</span><br><span class="line">zjr</span><br><span class="line">Please input String:</span><br><span class="line">lxy</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse IDE使用总结--Java小抄(9)</title>
      <link href="2021/01/04/Java-Supplement-9/"/>
      <url>2021/01/04/Java-Supplement-9/</url>
      
        <content type="html"><![CDATA[<h1 id="【Eclipse-IDE使用总结–Java小抄-9-】"><a href="#【Eclipse-IDE使用总结–Java小抄-9-】" class="headerlink" title="【Eclipse IDE使用总结–Java小抄(9)】"></a>【Eclipse IDE使用总结–Java小抄(9)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、Java开发常见工具介绍"><a href="#一、Java开发常见工具介绍" class="headerlink" title="一、Java开发常见工具介绍"></a>一、Java开发常见工具介绍</h1><ul><li><p>A:操作系统自带的记事本软件</p></li><li><p>B:高级记事本软件</p></li><li><p>C:集成开发环境 IDE(Integrated Development Environment)</p><ul><li>这种软件是用于程序开发环境的应用程序，一般包括代码编辑器，编译器，调试器和图形界面工具</li><li>集成了代码编写功能，分析功能，编译功能，调试功能等一体化的开发软件</li></ul></li></ul><h1 id="二、Eclipse概述"><a href="#二、Eclipse概述" class="headerlink" title="二、Eclipse概述"></a>二、Eclipse概述</h1><ul><li><p>Eclipse是一种可扩展的开放源代码的IDE。</p></li><li><p>Eclipse的特点描述</p><ul><li>免费</li><li>纯Java语言编写</li><li>免安装</li><li>扩展性强</li></ul></li><li><p>MyEclipse</p><ul><li>在Eclipse基础上追加的功能性插件，对插件收费</li><li>在Web开发中提供强大的系统架构平台</li></ul></li></ul><h1 id="三、Eclipse的下载，安装及卸载"><a href="#三、Eclipse的下载，安装及卸载" class="headerlink" title="三、Eclipse的下载，安装及卸载"></a>三、Eclipse的下载，安装及卸载</h1><ul><li><p>下载 <a href="http://eclipse.org/">http://eclipse.org/</a></p></li><li><p>安装</p><ul><li>压缩版    解压就可以使用(eclipse.exe)</li><li>安装版   双击运行,一路next即可(JDK)</li></ul></li><li><p>卸载</p><ul><li>压缩版 直接删除文件夹即可</li><li>安装版 专业卸载软件或者控制面板添加删除程序</li></ul></li></ul><h1 id="四、Eclipse的基本使用"><a href="#四、Eclipse的基本使用" class="headerlink" title="四、Eclipse的基本使用"></a>四、Eclipse的基本使用</h1><ul><li><p>选择工作空间</p><ul><li>工作空间  其实就是我们写的源代码所在的目录（不选择会默认指定为eclipse-workspace）</li></ul></li><li><p>用Eclipse来完成一个HelloWorld案例</p><ul><li>代码以项目为基本单位</li><li>创建项目</li><li>创建包</li><li>创建类</li><li>编写代码</li></ul></li><li><p>如何配置编译和运行环境</p><ul><li>Window-&gt;preferences-&gt;java-&gt;compiler编译环境设置</li><li>Window-&gt;preferences-&gt;java-&gt;Installed JREs编译环境设置</li><li>JDK与JRE版本最好一致（优选1.8）</li></ul></li><li><p>编译</p><ul><li>自动编译，在保存的那一刻帮你做好了（自动语法检查的前提）</li></ul></li><li><p>运行</p><ul><li>点击虫子后面的绿色内在三角形按钮</li><li>点击Run菜单下的run，也可以使用快捷键Ctrl+F11</li><li>选择要运行的文件或者在要运行的文件内容中<ul><li>右键 – Run as - Java Application即可</li></ul></li><li>看到Console即可，它就是Eclipse自带的控制台</li></ul></li><li><p>源代码语法检查</p><ul><li>红色波浪线（报错，必须解决）</li><li>黄色波浪线（警告，隐患提示）</li></ul></li></ul><h1 id="五、Eclipse主题设置"><a href="#五、Eclipse主题设置" class="headerlink" title="五、Eclipse主题设置"></a>五、Eclipse主题设置</h1><ul><li>自带主题<ul><li>Windows——&gt;Preferences——&gt;General——&gt;Appearance——&gt;Theme</li></ul></li><li>导入主题<ul><li>File——&gt;Import——&gt;General——&gt;Preferences——&gt;导入.epf——&gt;Finish</li></ul></li></ul><h1 id="六、Eclipse组成之视窗与视图"><a href="#六、Eclipse组成之视窗与视图" class="headerlink" title="六、Eclipse组成之视窗与视图"></a>六、Eclipse组成之视窗与视图</h1><ul><li><p>视窗  每一个基本的窗体被称为视窗</p><ul><li>PackageExplorer  显示项目结构，包，类，及资源</li><li>Outline   显示类的结构，方便查找，识别，修改</li><li>Console  程序运行的结果在该窗口显示</li><li>Problems 显示所有语法及错误所在的位置</li><li>Hierarchy 显示Java继承层次结构，选中类后F4</li></ul></li><li><p>视图  是由某些视窗的组合而成的。举例</p><ul><li>Java视图</li><li>Debug视图</li><li>Eclipse右上角可以点击按钮切换</li></ul></li></ul><h1 id="七、代码风格设置"><a href="#七、代码风格设置" class="headerlink" title="七、代码风格设置"></a>七、代码风格设置</h1><ul><li>花括号偏好设置<ul><li>Windows—preference—java—codestyle—formatter<ul><li>新建一个Active profile</li><li>Braces选项卡中选择next line</li></ul></li></ul></li></ul><h1 id="八、Eclipse中工作空间的基本配置"><a href="#八、Eclipse中工作空间的基本配置" class="headerlink" title="八、Eclipse中工作空间的基本配置"></a>八、Eclipse中工作空间的基本配置</h1><ul><li>程序的编译和运行的环境配置</li><li>如何去掉默认注释</li><li>行号的显示和隐藏</li><li>字体大小及颜色</li><li>窗体布局重置</li><li>控制台显示</li><li>均位于Window——&gt;Preferences内设置</li></ul><h1 id="九、程序的编译和运行的环境配置"><a href="#九、程序的编译和运行的环境配置" class="headerlink" title="九、程序的编译和运行的环境配置"></a>九、程序的编译和运行的环境配置</h1><ul><li>window – Preferences – Java<ul><li>编译环境：Compiler默认</li><li>认选中的就是最高版本</li><li>运行环境：Installed JREs默认会找你安装的那个JDK，建议配置了Java的环境变量<ul><li>低编译，高运行，可以</li><li>高编译，低运行，不可以</li></ul></li><li>建议，编译和运行的版本一致</li></ul></li></ul><h1 id="十、字体大小及颜色"><a href="#十、字体大小及颜色" class="headerlink" title="十、字体大小及颜色"></a>十、字体大小及颜色</h1><ul><li><p>Java代码区域的字体大小和颜色：</p><ul><li>window – Preferences – General – Appearance – Colors And Fonts – Java修改 – Java Edit Text Font</li></ul></li><li><p>控制台</p><ul><li>window – Preferences – General – Appearance – Colors And Fonts – Debug – Console font</li></ul></li><li><p>其他文件</p><ul><li>window – Preferences – General – Appearance – Colors And Fonts – Basic – Text Font</li></ul></li></ul><h1 id="十一、窗体设置"><a href="#十一、窗体设置" class="headerlink" title="十一、窗体设置"></a>十一、窗体设置</h1><ul><li><p>行号的显示和隐藏</p><ul><li>显示：在代码区域的最左边的空白区域，右键 – Show Line Numbers即可</li><li>隐藏：把上面的动作再做一次</li></ul></li><li><p>窗体布局重置</p><ul><li>Window – Reset Perspective    </li></ul></li><li><p>控制台显示</p><ul><li>Window–Show View—Console</li></ul></li></ul><h1 id="十二、Eclipse中快捷键的使用"><a href="#十二、Eclipse中快捷键的使用" class="headerlink" title="十二、Eclipse中快捷键的使用"></a>十二、Eclipse中快捷键的使用</h1><ul><li><p>内容辅助键</p><ul><li>Alt+/ 起提示作用</li><li>main+alt+/,syso+alt+/,给出其他提示</li></ul></li><li><p>常用快捷键</p><ul><li>删除行 ctrl+d</li><li>格式化  ctrl+shift+f</li><li>导入包  ctrl+shift+o </li><li>注释  ctrl+/,ctrl+shift+/,ctrl+shift+\</li><li>代码上下移动 选中代码alt+上/下箭头</li><li>查看源码  选中类名(F3或者Ctrl+鼠标点击)</li></ul></li></ul><h1 id="十三、注释"><a href="#十三、注释" class="headerlink" title="十三、注释"></a>十三、注释</h1><ul><li><p>单行注释：</p><ul><li>选中需要被注释的内容：ctrl+/</li><li>想取消注释，再次选中，然后ctrl+/</li></ul></li><li><p>多行注释：</p><ul><li>选中需要被注释的内容：ctrl+shift+/    </li><li>想取消注释，再次选中，然后ctrl+shift+\</li></ul></li></ul><h1 id="十四、导包"><a href="#十四、导包" class="headerlink" title="十四、导包"></a>十四、导包</h1><ul><li><p>导入方式：</p><ul><li>手动写完代码，需要导入包：ctrl+shift+o</li><li>通过alt+/提示的类，会自动把包导入</li></ul></li><li><p>有些类在多个包下都有</p><ul><li>按了提示后，会把所有的包给出显示，让用户选择</li></ul></li></ul><h1 id="十五、自动生成方法"><a href="#十五、自动生成方法" class="headerlink" title="十五、自动生成方法"></a>十五、自动生成方法</h1><ul><li><p>自动生成构造方法</p><ul><li>无参构造方法 在代码区域右键–source–Generate Constructors from Superclass. (Alt + Shift + S + C)</li><li>带参构造方法 在代码区域右键–source–Generate Constructors using fields. (Alt + Shift + S + O)</li></ul></li><li><p>自动生成get/set方法</p><ul><li>在代码区域右键–source–Generate Getters and Setters. (Alt + Shift + S + R)</li></ul></li></ul><h1 id="十六、继承抽象类和实现接口"><a href="#十六、继承抽象类和实现接口" class="headerlink" title="十六、继承抽象类和实现接口"></a>十六、继承抽象类和实现接口</h1><ul><li><p>以前先写类，然后在类中在去继承类或者实现接口</p></li><li><p>现在在创建类的时候，选择要继承的类或者实现的接口</p></li><li><p>Object是所有类的父类，所有类都直接或者间接的继承自Object</p></li></ul><h1 id="十七、Eclipse中打jar包并使用jar包"><a href="#十七、Eclipse中打jar包并使用jar包" class="headerlink" title="十七、Eclipse中打jar包并使用jar包"></a>十七、Eclipse中打jar包并使用jar包</h1><ul><li><p>jar是什么?</p><ul><li>jar是多个class文件的压缩包</li></ul></li><li><p>jar有什么用?</p><ul><li>用别人写好的东西，直接拿过来使用</li><li>代码封装实现代码匿藏（只提供.class文件，无.java文件）</li></ul></li><li><p>打jar包</p><ul><li>选中项目–右键–Export–Java–Jar–自己指定一个路径和一个名称.jar–Finish</li></ul></li><li><p>使用jar包</p><ul><li>复制jar包，粘贴到要使用的项目路径下（先点击项目名——&gt;然后右键：选择paste粘贴）</li><li>选中jar包，右键Build path – add to build path</li></ul></li></ul><h1 id="十八、Eclipse中如何删除项目和导入项目"><a href="#十八、Eclipse中如何删除项目和导入项目" class="headerlink" title="十八、Eclipse中如何删除项目和导入项目"></a>十八、Eclipse中如何删除项目和导入项目</h1><ul><li><p>删除项目</p><ul><li>选中项目 – 右键 – 删除<ul><li>从项目区域中删除</li><li>从硬盘上删除</li></ul></li></ul></li><li><p>导入项目</p><ul><li>在项目区域右键找到import</li><li>找到General，展开，并找到<ul><li>Existing Projects into Workspace</li></ul></li><li>点击next,然后选择你要导入的项目<ul><li>注意：这里选择的是项目名称</li></ul></li></ul></li></ul><h1 id="十九、Eclipse中几个常见小问题"><a href="#十九、Eclipse中几个常见小问题" class="headerlink" title="十九、Eclipse中几个常见小问题"></a>十九、Eclipse中几个常见小问题</h1><ul><li><p>如何查看项目所在路径</p></li><li><p>选中 – 右键 – Properties – Resource – Location</p></li><li><p>导入项目要注意的问题</p><ul><li>项目区域中不可能出现同名的项目(新建或者导入)</li><li>自己随意建立的文件夹是不能作为项目导入的</li></ul></li><li><p>修改项目问题</p><ul><li>不要随意修改项目名称</li><li>如果真要修改，不要忘记了配置文件.project中的<ul><li>&lt;name&gt;把这里改为你改后的名称&lt;/name&gt;</li></ul></li></ul></li></ul><h1 id="二十、Eclipse中代码的高级-Debug-调试"><a href="#二十、Eclipse中代码的高级-Debug-调试" class="headerlink" title="二十、Eclipse中代码的高级(Debug)调试"></a>二十、Eclipse中代码的高级(Debug)调试</h1><ul><li><p>Debug的作用</p><ul><li>调试程序</li><li>查看程序执行流程</li></ul></li><li><p>如何查看程序执行流程</p><ul><li>什么是断点（就是一个标记，表示从哪里开始看程序）</li><li>如何设置断点（在语句的最左边，双击即可）</li><li>在哪里设置断点（哪里不会加哪里）</li><li>能设置几个断点（没有限制，但建议5个以内）</li><li>如何运行设置断点后的程序（在代码区域–右键–Debug as–Java Appliaction）</li><li>看哪些地方<ul><li>看源代码：对照看程序的执行步骤<ul><li>step into, step over, step return的区别<ul><li>step into就是单步执行，遇到子函数就进入并且继续单步执行（F5）</li><li>step over是在单步执行时，在函数内遇到子函数时不会进入子函数内单步执行，而是将子函数整个执行完再停止，也就是把子函数整个作为一步（F6）</li><li>step return就是单步执行到子函数内时，用step return就可以执行完子函数余下部分，并返回到上一层函数（F7）</li><li>step into：进入子函数</li><li>step over：越过子函数，但子函数会执行</li><li>step return：跳出子函数 </li></ul></li></ul></li><li>看Debug界面：对照看程序的执行步骤，特别关注其中的线程！</li><li>看Variables界面：看变量的产生、赋值、变化、及消失</li></ul></li></ul></li><li><p>如何去除断点（a:把添加的动作再做一遍   b:Breakpoints界面点击双叉一键清除）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《3D打印与工业制造》—— 读书笔记</title>
      <link href="2020/12/24/3D-Printing-And-Industry-Manufacturing-Reading-Notes/"/>
      <url>2020/12/24/3D-Printing-And-Industry-Manufacturing-Reading-Notes/</url>
      
        <content type="html"><![CDATA[<h1 id="《3D打印与工业制造》——-读书笔记"><a href="#《3D打印与工业制造》——-读书笔记" class="headerlink" title="《3D打印与工业制造》—— 读书笔记"></a>《3D打印与工业制造》—— 读书笔记</h1><blockquote><p>原创内容，学习不易，转载请注明出处！</p></blockquote><h1 id="一、读后感——-“WOW”"><a href="#一、读后感——-“WOW”" class="headerlink" title="一、读后感—— “WOW”"></a>一、读后感—— “WOW”</h1><p>​        可以这么说，《3D打印与工业制造》这本书是我第一次以真正的视角理性的认识3D打印，在几年以前我就已经听闻过3D打印技术了，那时候觉得这项技术简直太不可思议了，将来的世界一定可以因此完全改变，可是过了几年后，突然又觉得3D打印貌似没有怎么走进我的生活啊，好像3D打印技术只是在一些特殊领域得到了发挥，而一些常见的地方几乎不会看到3D打印的身影，尤其这两年，3D打印的负面新闻接踵而至，技术复杂、价格昂贵、批量生产效率低，貌似3D打印有种种严重的问题，貌似3D打印距离走进普通人的生活还很遥远，貌似我也开始否定曾经的看法了……</p><p>​        有幸在大学班主任老师提供的机会下，开始从《3D打印与工业制造》这本书开始走进一个真正客观的3D打印世界，在这本书中我分别从：实践、市场、应用，三个部分客观了解了3D打印的实际行情，毫不夸张的说，在读完这本书后，我虽然没有了像几年前第一次听到3D打印那样的惊讶感，但我却有一种强烈的顿悟感，有一种恍然大悟、茅塞顿开的感悟，“原来，这才是3D打印！”</p><p>​        3D打印并不是不行、3D打印并不是没有走进我的生活、3D打印并不是泡沫科技、3D打印是实实在在的东西、3D打印是能够创造无限价值的东西、3D打印更是一种接地气的东西，在我们不知道的角落，无论是尖端领域还是日常领域，3D打印都在发挥他自身重要的价值！我们每一个人如今都或多或少已经和3D打印间接的接触了！之所以我们日常生活中还很少看见3D打印的广泛运用，那是因为目前的社会发展和基础建设还没有跟上3D打印技术快速普及的时代，而对于老牌的企业，要在短期内将传统的制造业与3D打印有机的结合是一件非常困难的事情，可能在短时期内付出与收益比例会很低，所以传统制造业占时没有广泛运用3D打印，而对于一些新兴企业、小型工作室，3D打印已经在很大程度上成为他们的首选制造工具了，而对于一些特殊的市场，比如：定制行业，高科技行业，磨具行业，高精制造业，科研行业……许多零件产品的设计制造利用3D打印是质的飞跃，其所蕴含的价值是远远超过传统的设计制作流程与技术的，所以我认为3D打印一定有完全改变世界的那一天，此时3D打印还处于婴儿阶段，也许在不远的未来3D打印会如同互联网经济颠覆传统经济一样颠覆传统制造业！</p><p>​        乐观的同时也要看到关键的因素，3D打印要早日普及，有很多方面的问题需要解决，首先肯定就是技术了，无论是打印的精度、速度、材料、规模、价格……都是技术要解决的问题，其次还要解决产业过渡的问题，目前对于传统制造行业，虽然已经看到3D打印未来的巨大价值了，也在关键业务上运用了3D打印的技术，但是要让其放弃大部分已经耕耘了多年的传统制造技术，放下身段，从头开始研究3D打印结合制造业，是非常困难的，所以就需要相关的社会及政策的支持、补贴……来促进3D打印走进传统制造业，一但传统制造业大规模运用了3D打印，那么3D打印自然也就普及了。</p><p>​        当然，一项新技术的革命是需要时间与耐心的，我正值青春年少，有幸认识3D打印，希望自己可以在其中深入学习，提前一窥未来的世界，也为未来世界的到来，做好准备，“WOW”！</p><hr><h1 id="二、实践篇"><a href="#二、实践篇" class="headerlink" title="二、实践篇"></a>二、实践篇</h1><h2 id="1-、突破思维局限"><a href="#1-、突破思维局限" class="headerlink" title="(1)、突破思维局限"></a>(1)、突破思维局限</h2><h3 id="lt-1-gt-、突破传统制造思维的限制"><a href="#lt-1-gt-、突破传统制造思维的限制" class="headerlink" title="<1>、突破传统制造思维的限制"></a>&lt;1&gt;、突破传统制造思维的限制</h3><h3 id="lt-2-gt-、为增材制造而设计的规则"><a href="#lt-2-gt-、为增材制造而设计的规则" class="headerlink" title="<2>、为增材制造而设计的规则"></a>&lt;2&gt;、为增材制造而设计的规则</h3><h3 id="lt-3-gt-、重塑产品"><a href="#lt-3-gt-、重塑产品" class="headerlink" title="<3>、重塑产品"></a>&lt;3&gt;、重塑产品</h3><h3 id="lt-4-gt-、数据赋能增材制造生产"><a href="#lt-4-gt-、数据赋能增材制造生产" class="headerlink" title="<4>、数据赋能增材制造生产"></a>&lt;4&gt;、数据赋能增材制造生产</h3><h3 id="lt-5-gt-、仿真提升过程可控性"><a href="#lt-5-gt-、仿真提升过程可控性" class="headerlink" title="<5>、仿真提升过程可控性"></a>&lt;5&gt;、仿真提升过程可控性</h3><h3 id="lt-6-gt-、实现轻量化的四种途径"><a href="#lt-6-gt-、实现轻量化的四种途径" class="headerlink" title="<6>、实现轻量化的四种途径"></a>&lt;6&gt;、实现轻量化的四种途径</h3><h3 id="lt-7-gt-、创成式设计"><a href="#lt-7-gt-、创成式设计" class="headerlink" title="<7>、创成式设计"></a>&lt;7&gt;、创成式设计</h3><h3 id="lt-8-gt-、小点阵大作用"><a href="#lt-8-gt-、小点阵大作用" class="headerlink" title="<8>、小点阵大作用"></a>&lt;8&gt;、小点阵大作用</h3><h3 id="lt-9-gt-、多材料3D打印"><a href="#lt-9-gt-、多材料3D打印" class="headerlink" title="<9>、多材料3D打印"></a>&lt;9&gt;、多材料3D打印</h3><h3 id="lt-10-gt-、超材料与3D打印"><a href="#lt-10-gt-、超材料与3D打印" class="headerlink" title="<10>、超材料与3D打印"></a>&lt;10&gt;、超材料与3D打印</h3><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>除了成本、精度、效率等因素外，制约3D打印的发展的一大因素是：“我们自己思维的限制”。</p><p>3D打印对产品的重塑，不仅包括其外观，还包括性能的提升。</p><p>3D打印对供应链也有重塑作用，并且可以改变商业模式。</p><p>3D打印技术并不是一种技术，而是集成在一起的一系列硬件、软件技术系统。</p><p>突破传统制造思维的限制是增材制造是否能发挥潜力的一大挑战。</p><p>增材制造技术也有其本身工艺特征，在设计时要严格遵循其工艺特征。</p><p>不能把传统制造方式的惯用思维直接拿来用，应该打破思维惯性，采用全新的设计思路，结合感性与理性去重塑产品的设计。</p><p>应该重视信息化手段实现3D打印数据的自动化管理，让产品可以追溯。</p><p>3D打印有许多颠覆传统制造业的设计制造思路，应该大力发挥其特点。</p><p>3D打印须要对材料有一定深度的认知，这是用好3D打印的基础。</p><h2 id="2-、增材制造的国际标准"><a href="#2-、增材制造的国际标准" class="headerlink" title="(2)、增材制造的国际标准"></a>(2)、增材制造的国际标准</h2><h3 id="lt-1-gt-、ASTM国际标准概述"><a href="#lt-1-gt-、ASTM国际标准概述" class="headerlink" title="<1>、ASTM国际标准概述"></a>&lt;1&gt;、ASTM国际标准概述</h3><h3 id="lt-2-gt-、金属材料制造的现状与ASTM国际标准"><a href="#lt-2-gt-、金属材料制造的现状与ASTM国际标准" class="headerlink" title="<2>、金属材料制造的现状与ASTM国际标准"></a>&lt;2&gt;、金属材料制造的现状与ASTM国际标准</h3><h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><p>ASTM：美国材料与试验学会</p><p>F42委员会：增材制造技术委员会</p><p>国际标准对于3D打印的大规模普及是非常有意义的！</p><h2 id="3-、成功3D打印零件的要素"><a href="#3-、成功3D打印零件的要素" class="headerlink" title="(3)、成功3D打印零件的要素"></a>(3)、成功3D打印零件的要素</h2><h3 id="lt-1-gt-、金属3D打印质量控制的三种方法"><a href="#lt-1-gt-、金属3D打印质量控制的三种方法" class="headerlink" title="<1>、金属3D打印质量控制的三种方法"></a>&lt;1&gt;、金属3D打印质量控制的三种方法</h3><h3 id="lt-2-gt-、安全生产"><a href="#lt-2-gt-、安全生产" class="headerlink" title="<2>、安全生产"></a>&lt;2&gt;、安全生产</h3><h3 id="lt-3-gt-、后处理对增材制造的影响"><a href="#lt-3-gt-、后处理对增材制造的影响" class="headerlink" title="<3>、后处理对增材制造的影响"></a>&lt;3&gt;、后处理对增材制造的影响</h3><h3 id="总结：-2"><a href="#总结：-2" class="headerlink" title="总结："></a>总结：</h3><p>3D打印技术在零件的质量检测方向拥有了更加不同的检测技术</p><p>同时为了更好的检测3D打印的零件，所以必须制定新的检测方式，还需要建立新的质量认证方式和标准。</p><p>金属3D打印质量控制的三种方法：过程前的控制、过程中的控制、过程后的控制——质量检测。</p><p>3D打印依旧要注意安全问题，同时在安全保障时要切合3D打印实际的特点来制定相关的安保措施。</p><hr><h1 id="三、市场篇"><a href="#三、市场篇" class="headerlink" title="三、市场篇"></a>三、市场篇</h1><h2 id="1-、3D打印的发展：宏观层面"><a href="#1-、3D打印的发展：宏观层面" class="headerlink" title="(1)、3D打印的发展：宏观层面"></a>(1)、3D打印的发展：宏观层面</h2><h3 id="lt-1-gt-、3D打印进入生产"><a href="#lt-1-gt-、3D打印进入生产" class="headerlink" title="<1>、3D打印进入生产"></a>&lt;1&gt;、3D打印进入生产</h3><h3 id="lt-2-gt-、迎接商业模式的重构"><a href="#lt-2-gt-、迎接商业模式的重构" class="headerlink" title="<2>、迎接商业模式的重构"></a>&lt;2&gt;、迎接商业模式的重构</h3><h3 id="lt-3-gt-、国内当前三大“接地气”的机会"><a href="#lt-3-gt-、国内当前三大“接地气”的机会" class="headerlink" title="<3>、国内当前三大“接地气”的机会"></a>&lt;3&gt;、国内当前三大“接地气”的机会</h3><h3 id="总结：-3"><a href="#总结：-3" class="headerlink" title="总结："></a>总结：</h3><p>宏观层面——波涛汹涌</p><p>3D打印要与应用端真正的结合，一定要认清一个现实的问题：</p><p>对于老牌企业：</p><p>要将耕耘了多年的传统制造业技术更替为新兴的3D打印技术是非常痛苦的，因为供应链、库存管理、员工培训、投资回报比例……都是很难解决的问题。</p><p>对于新兴企业：3D打印技术便可以在很多的方面成为企业发展的助力大法。</p><p>凯文·凯利在《新经济， 新规则》一书中曾说过， 企业从一个山峰直接跳到另外一个山峰是不可能做到的 。 不论一个组织有多明智、 速度有多快， 要去到 想要去的地方， 它必须一步一步地从原来所在的地方走下来， 放下曾经的辉煌成就， 这会使人感到一种痛苦。</p><p>这种难熬的过程不仅适用于网络经济， 也适用于实体经济， 增材制造与应用端的结合， 如何切入到应用端， 而应用端如何放下以往的辉煌， 努力在增材制造领域创造新的成绩， 这也是一种难熬的过程。</p><p>虽然3D打印技术极具吸引力， 但是从20世纪80年代诞生至今它与应用端的结合速度非常缓慢， 究其原因， 除了3D打印技术本身还有许多需要完善之处， 除了材料还需要更好更便宜以外， 我们也不应低估了应用企业做出这种颠裂性转型所需要付出的努力。</p><p>凯文·凯利在《新经济， 新规则》中还指出， 在新经济波涛汹涌， 快速变化的环境中， 只有反应敏捷、 顺应变化、 行动快速的公司才能成功。快速走向新 方向只解决一半问题， 快速放弃旧有成就才能解决另一半问题。 而目前处于30 打印技术应用端的工业制造企业正走在哪段路程之上呢？我们可以边了解3D打印技术及其应用的宏观、 微观发展情况和发展趋势边思考这个问题。</p><p>国内目前3D打印三大接地气的机会：</p><p>牙科、随形冷却模具、电动汽车</p><h2 id="2-、3D打印的发展：微观层面"><a href="#2-、3D打印的发展：微观层面" class="headerlink" title="(2)、3D打印的发展：微观层面"></a>(2)、3D打印的发展：微观层面</h2><h3 id="lt-1-gt-、金属3D打印和冶金加工学"><a href="#lt-1-gt-、金属3D打印和冶金加工学" class="headerlink" title="<1>、金属3D打印和冶金加工学"></a>&lt;1&gt;、金属3D打印和冶金加工学</h3><h3 id="lt-2-gt-、多样化的金属3D打印技术"><a href="#lt-2-gt-、多样化的金属3D打印技术" class="headerlink" title="<2>、多样化的金属3D打印技术"></a>&lt;2&gt;、多样化的金属3D打印技术</h3><h3 id="lt-3-gt-、走向生产的塑料3D打印"><a href="#lt-3-gt-、走向生产的塑料3D打印" class="headerlink" title="<3>、走向生产的塑料3D打印"></a>&lt;3&gt;、走向生产的塑料3D打印</h3><h3 id="总结：-4"><a href="#总结：-4" class="headerlink" title="总结："></a>总结：</h3><p>微观层面——暗流涌动</p><p>3D打印进入了快速发展的通道，宏观层面可以说是波涛汹涌，微观层面可以说是暗流涌动，踏入3D打印的浪潮之中， 不仅仅需要对宏观层面的应用发展趋势时刻保持同步，还需要对微观层面的技术发展时刻关注，否则一不留神就有误入歧途的可能性。</p><p>乔布斯曾经说过， 只有当你回头看时， 才会发现这些过去的点其实已经画出了那条线。所以，要相信每一个点迟早都会连接到一起。这的确是3D打印发展所带给人的直观感受，你经常会因为一门千里的变化感到摸不着头绪，然而过段时间 ， 很多技术与应用的发展就像拼图似的呈现出一种立体清晰的场景来。</p><p>3D打印行业每一个努力的点正在连成一条线， 这些线正在呈现一个立体的面， 有起有伏，微观的变化带来宏观的发展， 宏观的发展牵引微观的进步这是片时我们看到的一个点，这个点闪闪发光的同时，也显得十分孤立。我们已经习惯汽车是山大型工厂流水线制造出来的，而像搭积木一样“拼凑”一 辆车， 这样的制造汽车方式将是革命性的。</p><p>很快，发展到在中国开发及生产电动汽车这样一条线， 进而这条线或许还会影响到上海电动汽车设计与生产 在全国的影响力这个面户 可以说，3D打印正在点亮制造业的创新活力</p><h2 id="3-、3D打印领导企业的战略布局"><a href="#3-、3D打印领导企业的战略布局" class="headerlink" title="(3)、3D打印领导企业的战略布局"></a>(3)、3D打印领导企业的战略布局</h2><h3 id="lt-1-gt-、向3D打印发力的巨无霸们"><a href="#lt-1-gt-、向3D打印发力的巨无霸们" class="headerlink" title="<1>、向3D打印发力的巨无霸们"></a>&lt;1&gt;、向3D打印发力的巨无霸们</h3><h3 id="lt-2-gt-、材料巨头加快增材制造步伐"><a href="#lt-2-gt-、材料巨头加快增材制造步伐" class="headerlink" title="<2>、材料巨头加快增材制造步伐"></a>&lt;2&gt;、材料巨头加快增材制造步伐</h3><h3 id="lt-3-gt-、航空航天企业的多重布局"><a href="#lt-3-gt-、航空航天企业的多重布局" class="headerlink" title="<3>、航空航天企业的多重布局"></a>&lt;3&gt;、航空航天企业的多重布局</h3><h3 id="总结：-5"><a href="#总结：-5" class="headerlink" title="总结："></a>总结：</h3><p>近年来， 材料制造商加强了对增材制造及技术的投入， 尤其是像 DSM、巴斯夫、 沙特基础这样的化工材料企业。<br>他们的共同特点是早在多年前就推出了3D打印材料， 初期推出的材料种类少， 仅适用于少数3D打印技术。但是通过与增材制造应用端的不断合作， 以及对外收购3D打印企业， 这些材料企业对市场和用户的应用要求有若深刻的理解， 对于3D打印技术前景的信心也不断增强。<br>2016年以来， 几家大型材料制造商纷纷成立了专门的增材制造部门或子公司， 为推出更广泛的3D打印材料和更细分的增材制造解决方案奠定了基础， 也 在材料制造圈掀起一股增材制造热潮。 这其中包括欧瑞康、吉凯恩、 美铝等金属 材料与方案解决商， 还包 括赢创 (EVONIC )、帝斯曼 (DSM )、巴斯夫(BASF) 、沙特基础工业 (SABJC) 等塑料材料提供商。</p><h2 id="4-、3D打印与数字化制造趋势"><a href="#4-、3D打印与数字化制造趋势" class="headerlink" title="(4)、3D打印与数字化制造趋势"></a>(4)、3D打印与数字化制造趋势</h2><h3 id="lt-1-gt-、3D打印-数字化生产模式"><a href="#lt-1-gt-、3D打印-数字化生产模式" class="headerlink" title="<1>、3D打印+数字化生产模式"></a>&lt;1&gt;、3D打印+数字化生产模式</h3><h3 id="lt-2-gt-、与大数据“手牵手”"><a href="#lt-2-gt-、与大数据“手牵手”" class="headerlink" title="<2>、与大数据“手牵手”"></a>&lt;2&gt;、与大数据“手牵手”</h3><h3 id="总结：-6"><a href="#总结：-6" class="headerlink" title="总结："></a>总结：</h3><p>3D打印技术将三维数字模型转化为实际三维物体的能力可以比传统制造技术（如机械加工、 注塑和热成型）具有多方面的优势。</p><p>3D打印利于实现大规模定制、 复杂零件几何形状的形成，尤其是对于那些不容易被注塑或者铸造出来的零件几何形状。</p><p>3D打印与数字化制造所需的材料不仅要达到必要的力学性能和经济指标，而且还要设计成容易通过软件控制的，以数据为中心的制造技术。3D打印所实现的数字化制造过程，尤其是塑料领域正在面临这个挑战。</p><p>不仅仅是塑料，金属3D打印也在悄然进入到数字化生产线领域。</p><p>对于工业制造企业来说，实现数字化生产转型也并非意味着需要完全放弃传统制造工艺转而采用3D打印直接制造最终产品，将3D打印引入制造流程与传统工艺相结合，也是实现数字化生产的一条道路。 </p><p>当前3D打印还没有成为一种主流制造技术的一大限制因素是，能否制造出合格的零件主要是由人的经验决定的，这样的经验探索令人感受到折磨，而经验是难以复制的，这极大地限制了3D打印技术的广泛使用。而数字化的好处是能够读取和利用大址的数据，从而智能化地控制3D打印质拢，用科学的方法代替经验对30打印质量的影响。而只有3D打印可以达到更高的产品质量稳定性和一致性，才能使这一技术进入到真正的上升曲线中。</p><h2 id="5-、各国政府的支持及科研机构"><a href="#5-、各国政府的支持及科研机构" class="headerlink" title="(5)、各国政府的支持及科研机构"></a>(5)、各国政府的支持及科研机构</h2><h3 id="lt-1-gt-、各国政府的支持"><a href="#lt-1-gt-、各国政府的支持" class="headerlink" title="<1>、各国政府的支持"></a>&lt;1&gt;、各国政府的支持</h3><h3 id="lt-2-gt-、硕果累累的两大科研机构"><a href="#lt-2-gt-、硕果累累的两大科研机构" class="headerlink" title="<2>、硕果累累的两大科研机构"></a>&lt;2&gt;、硕果累累的两大科研机构</h3><h3 id="总结：-7"><a href="#总结：-7" class="headerlink" title="总结："></a>总结：</h3><p>中国、 美国、 德国、 英国、 新加坡等多个国家或区域的政府对千增材制造研发给予了支持和重视。</p><p>那么，3D打印技术备受关注的原因是因为3D打印技术为制造企业所创造的产品附加价值。</p><p>增材制造技术受到了我国多部门的政策支持， 使增材制造行业进入快速发展期， 这为我国企业带来前所术有的机遇。 在企业得以快速发展的同时， 也由于在商业模式和战略能力等方面存在的问题而面临着风险。</p><p>2012年，美国时任总统奥巴马呼吁要建立一个新兴制造技术研究院。 当年美国国家增材制造创新研究院成立。美国国家增材制造创新研究院是由美国国防部、能源部、 美国国家航空航天局、 美国国家科学基金会、 商务部5家政府部门，以及俄亥俄，州、 宾夕法尼亚和西弗吉尼亚州的企业、 学校和非营利性组织组成的联合团体共同出资建立的公私合营的机构。</p><h2 id="6-、教育"><a href="#6-、教育" class="headerlink" title="(6)、教育"></a>(6)、教育</h2><h3 id="lt-1-gt-、为K12教育服务的生态圈"><a href="#lt-1-gt-、为K12教育服务的生态圈" class="headerlink" title="<1>、为K12教育服务的生态圈"></a>&lt;1&gt;、为K12教育服务的生态圈</h3><h3 id="lt-2-gt-、多学科交叉的高等教育"><a href="#lt-2-gt-、多学科交叉的高等教育" class="headerlink" title="<2>、多学科交叉的高等教育"></a>&lt;2&gt;、多学科交叉的高等教育</h3><h3 id="总结：-8"><a href="#总结：-8" class="headerlink" title="总结："></a>总结：</h3><p>3D打印是一种具有实用性的专业技术，并且涉及了材料、数学、工业设计、工程等多个学科的交叉，因此3D打印增材制造会作为一门学科出现在高等教育体系中。</p><p>3D打印使得任何人都可以成为制造者，不论教育背景，不论肤色，不论年龄与性别，即使是一个孩子，也可以成为制造者。而3D打印教育当前还很落后，3D不仅仅需要重视大学的教育， 还要重视工人的教育， 不仅仅需要重视成年人的教育， 还要需要重视更早期的教育。</p><p>中小学课堂进行3D打印教育的目的显然是，3D打印机可以将将孩子们的设计创意转化为实物的一种便利的工具，而创意对于孩子们非常非常重要！</p><p>在美国、欧洲和中国，越来越多的学校认可了3D打印在基础教育中的重要性，也因此有很多学校开设了3D打印课程，安装了3D打印机已 不过安装3D打 印机只是教育的开始，如何融入现有的课程体系，如何用生动有趣的课程与模型套件来激发学生的能动性和想象力尤为重要。</p><p>在高等教育中，高等院校与3D打印的正面拥抱，不仅仅涉及研发3D打印设备、 材料、软件、工业应用等相关技术， 还可以将3D打印作为一种辅助教学工具。</p><hr><h1 id="四、应用篇"><a href="#四、应用篇" class="headerlink" title="四、应用篇"></a>四、应用篇</h1><h2 id="1-、航空航天"><a href="#1-、航空航天" class="headerlink" title="(1)、航空航天"></a>(1)、航空航天</h2><h3 id="lt-1-gt-、3D打印成为核心制造技术"><a href="#lt-1-gt-、3D打印成为核心制造技术" class="headerlink" title="<1>、3D打印成为核心制造技术"></a>&lt;1&gt;、3D打印成为核心制造技术</h3><h3 id="lt-2-gt-、催生下一代航空制造"><a href="#lt-2-gt-、催生下一代航空制造" class="headerlink" title="<2>、催生下一代航空制造"></a>&lt;2&gt;、催生下一代航空制造</h3><h3 id="lt-3-gt-、重新定义航空关键零件"><a href="#lt-3-gt-、重新定义航空关键零件" class="headerlink" title="<3>、重新定义航空关键零件"></a>&lt;3&gt;、重新定义航空关键零件</h3><h3 id="lt-4-gt-、机身与内饰走向经济性与个性化"><a href="#lt-4-gt-、机身与内饰走向经济性与个性化" class="headerlink" title="<4>、机身与内饰走向经济性与个性化"></a>&lt;4&gt;、机身与内饰走向经济性与个性化</h3><h3 id="lt-5-gt-、航空制造新赛道"><a href="#lt-5-gt-、航空制造新赛道" class="headerlink" title="<5>、航空制造新赛道"></a>&lt;5&gt;、航空制造新赛道</h3><h3 id="总结：-9"><a href="#总结：-9" class="headerlink" title="总结："></a>总结：</h3><p>我们不能陷入将3D打印与传统制造方法一对一比较的误区，原因在于我们很容易忽略3D打印不是在生产和原来一样的零件，而是生产完全不一样的零件，不一样的形状，不一样的材料，不一样的性能。</p><p>30打印来获得更高的生产效益的同时，还减少了对钦合金这样昂贵材料的浪费。</p><p>通过30打印这种工艺对产品形状创造的自由度，可以将以往需要多个零件组装在一起的零件以一体化结构的方式来完成，并且通过拓扑优化、创成式设计、仿真等软件实现以最少的材料达到最佳的性能。</p><p>将3D打印与传统制造方法一对一去比较是一个 “ 陷阱”，我们衡量3D打印的价值需要跳出单件加工效率、单件成本这些思维局限，应该站在产品生命周期的角度来评估。</p><p>一方面从产业链的角度看，3D 打印贯穿了航空行业的研发、 制造与后市场。 另一方面，从产品生命周期的角度看3D 打印正在改变航空行业的产品，更轻、更紧凑、性能更好的零件提升了航空行业的绩效，让人们拥有了更美好的出行体验。</p><p>3D打印在飞机制造中，已经解决了普通制造技术对于一些特殊零件的制造，并且大大提升了该零件的性能。</p><p>3D打印因其特别的制造方式，在航空制造上提出了许许多多的新技术，新思路，新性能，3D打印正在催生下一代航空制造。</p><p>3D打印由于其区别于传统制造技术的特定，所以利用3D打印可以制造一些新式的零部件，可以说3D打印将在未来重新定义航空关键零部件。</p><h2 id="2-、汽车"><a href="#2-、汽车" class="headerlink" title="(2)、汽车"></a>(2)、汽车</h2><h3 id="lt-1-gt-、快速原型制造"><a href="#lt-1-gt-、快速原型制造" class="headerlink" title="<1>、快速原型制造"></a>&lt;1&gt;、快速原型制造</h3><h3 id="lt-2-gt-、概念车"><a href="#lt-2-gt-、概念车" class="headerlink" title="<2>、概念车"></a>&lt;2&gt;、概念车</h3><h3 id="lt-3-gt-、汽车零部件创新"><a href="#lt-3-gt-、汽车零部件创新" class="headerlink" title="<3>、汽车零部件创新"></a>&lt;3&gt;、汽车零部件创新</h3><h3 id="lt-4-gt-、定制化夹具制造"><a href="#lt-4-gt-、定制化夹具制造" class="headerlink" title="<4>、定制化夹具制造"></a>&lt;4&gt;、定制化夹具制造</h3><h3 id="lt-5-gt-、电动汽车时代为3D打印带来的机遇"><a href="#lt-5-gt-、电动汽车时代为3D打印带来的机遇" class="headerlink" title="<5>、电动汽车时代为3D打印带来的机遇"></a>&lt;5&gt;、电动汽车时代为3D打印带来的机遇</h3><h3 id="lt-6-gt-、切入定制化市场"><a href="#lt-6-gt-、切入定制化市场" class="headerlink" title="<6>、切入定制化市场"></a>&lt;6&gt;、切入定制化市场</h3><h3 id="总结：-10"><a href="#总结：-10" class="headerlink" title="总结："></a>总结：</h3><p>由于通过3D打印设备可以在不开发模具的情况下，快速地将原型制造出来，这项技术为汽车制造企业的设计工作节省了大属时间，同时节省了研发过程中的模具制造成本，为加速汽车的设计迭代创造了条件。汽车研发部门通过实车 安装3D打印零部件原型，能够及时发现问题，及时凋整优化结构设计方案， 这进一步提升了新设计的可靠性。 此外，汽车外壳中有不少曲面结构、棚格结构，这些零部件的原型如通过机械加工技术制造难度很大，而3D打印技术在驾驭复杂结构方面则显得游刃有余。</p><p>3D打印原型的另一类用途是功能性原型或高性能原型， 这些原型往往具有良好的耐热性、 耐蚀性或者是能够承受机械应力。 汽车制造商通过这类30打印零部件原型可以进行功能测试。 实现这类应用可用的3D打印技术和材料包括： 工业级熔融沉积成型3D打印设备和工程塑料丝材或者是纤维增强复合材料， 选区激光熔融3D打印设备和工程塑料粉末、 纤维增强复合粉末材料。</p><p>3D可以将设计师对于汽车设计的天马行空灵感快速的实现出来，对于设计师的工作效率有非常大且本质性的提升！</p><p>3D打印技术在汽车发动机制造中的应用主要包括以下几种：使用选区激光熔融技术直接制造复杂的发动机零件，使用选区激光烧结技术或黏结剂喷射技术制造汽车零件铸造用的砂型。黏结剂喷射金属3D打印技术，作为一种新型金屈打印工艺，在发动机组件、变速箱壳体等部件的快速成型制造领域具有一定潜力。</p><p>3D打印技术与夹具制造的结合点主 要有三个， 即：快速制造个性化或小批址的火具， 夹具设计的自由造型， 用轻扭化的塑料夹具替代金属夹具。</p><p>3D打印切入到电动汽车这个市场有两个明显的优势，一方面是传统汽车的产能基本已经固定了，很难去抛掉部分现有的设备来切换到3D打印技术领域。 电动汽车的产能投入是从全新的工厂开始的，3D 打印技术可发挥的空间就很大。 另一方面是针对电动汽车的零件生产，3D打印 可扩展的空间很大，例如生产结构、功能一体化零件，从而减少车辆中的零件数址 极大地压缩原来庞大的供应链，尤其是传统汽车制造领域复杂的供应商体系。</p><p>3D打印技术在汽车配件按需制造中的应用，有可能会使汽车零配件从目前的大批量集中制造的模式转变为根据客户的需求在本地工厂中进行按需生产的模式。宝马、奔驰、大众等汽车制造商在 3D 打印汽车配件、定制化汽车零件制造中的布局，以及1:1本大发汽车为客户提供的个性化汽车外饰件制造服务，都使 3D 打印技术主导的按需生产模式初露端倪。</p><h2 id="3-、模具"><a href="#3-、模具" class="headerlink" title="(3)、模具"></a>(3)、模具</h2><h3 id="lt-1-gt-、3D打印模具的“废”与“立”"><a href="#lt-1-gt-、3D打印模具的“废”与“立”" class="headerlink" title="<1>、3D打印模具的“废”与“立”"></a>&lt;1&gt;、3D打印模具的“废”与“立”</h3><h3 id="lt-2-gt-、注塑模具与随性冷却水路"><a href="#lt-2-gt-、注塑模具与随性冷却水路" class="headerlink" title="<2>、注塑模具与随性冷却水路"></a>&lt;2&gt;、注塑模具与随性冷却水路</h3><h3 id="lt-3-gt-、更多的随行冷却"><a href="#lt-3-gt-、更多的随行冷却" class="headerlink" title="<3>、更多的随行冷却"></a>&lt;3&gt;、更多的随行冷却</h3><h3 id="lt-4-gt-、轮胎制造的新思路"><a href="#lt-4-gt-、轮胎制造的新思路" class="headerlink" title="<4>、轮胎制造的新思路"></a>&lt;4&gt;、轮胎制造的新思路</h3><h3 id="lt-5-gt-、快速模具的“快”意"><a href="#lt-5-gt-、快速模具的“快”意" class="headerlink" title="<5>、快速模具的“快”意"></a>&lt;5&gt;、快速模具的“快”意</h3><h3 id="总结：-11"><a href="#总结：-11" class="headerlink" title="总结："></a>总结：</h3><p>金属3D打印技术为模具设计带来了更高的自由度，这使得模具设计师能够将复杂的功能整合在一个模具组件上，通过设计优化来提高模具性能，从而使通过模具制造的高功能性终端产品的制造速度更快、产品德缺陷更少。</p><p>30打印技术在金屈模具与塑料模具的制造中都有相应的应用。在金属模具 中较为典型的应用， 是将3D打印技术用于制造铸模， 比如说通过黏结剂喷射3D 打印技术制造金属铸造用的砂模 在注塑模具制造中典型的应用是制造模具中的随形冷却水路。</p><p>采用选区激光熔融3D打印技术来制造注塑模具中的冷却水路， 则可以摆 脱交叉钻孔制造方式的限制， 根据冷却要求， 设计出具有良好冷却效果的随形冷 却水路， 从而以一致的速度进行散热， 以促进散热的均匀性。</p><p>金屈30打印很好地解决了刀具下涉的问题， 当复杂性与可制造性不再是困扰轮胎模具制造的最大因素的时候， 30打印很好地释放了轮胎产品设计迭代的便捷性， 也催生了新型的轮胎制造能力。</p><p>3D打印技术与注塑模具制造结合最为紧密的应用是制造带有随形冷却水路的模具镶件，这种随形冷却模具被用于注塑件批益生产。 但有时企业所需的塑料零件数量非常少， 比如说企业在新产品研发阶段， 需要在短期内制造出少械新产品进行市场验证， 此时就会提出对小批批生产的需求。在这种情况下，如果使用用于注塑件批量生产的模具来制造小批量注塑件，会产生高昂的成本和较长的制造周期。但3D打印技术用一些树脂材料或特殊复合材料，直接制造小批戴快速生产需求的模具，则是条快速、经济的途径。</p><h2 id="4-、铸造"><a href="#4-、铸造" class="headerlink" title="(4)、铸造"></a>(4)、铸造</h2><h3 id="lt-1-gt-、砂型铸造"><a href="#lt-1-gt-、砂型铸造" class="headerlink" title="<1>、砂型铸造"></a>&lt;1&gt;、砂型铸造</h3><h3 id="lt-2-gt-、熔模铸造"><a href="#lt-2-gt-、熔模铸造" class="headerlink" title="<2>、熔模铸造"></a>&lt;2&gt;、熔模铸造</h3><h3 id="总结：-12"><a href="#总结：-12" class="headerlink" title="总结："></a>总结：</h3><p>3D打印技术及设备已应用到铸造行业，省去了模具制造环节， 大大缩短了铸件交付周期。3D打印技术在铸造业中的应用， 主要涉及与砂型铸造、 熔模铸造这两种铸造工艺的结合。 </p><p>虽然我国铸造行业尚未完成数字化、智能化的转型升级，但部分铸造企业在 这方面已经走在了前列。</p><h2 id="5-、液压"><a href="#5-、液压" class="headerlink" title="(5)、液压"></a>(5)、液压</h2><h3 id="lt-1-gt-、液压市场不平凡"><a href="#lt-1-gt-、液压市场不平凡" class="headerlink" title="<1>、液压市场不平凡"></a>&lt;1&gt;、液压市场不平凡</h3><h3 id="lt-2-gt-、液压歧管的”瘦身“故事"><a href="#lt-2-gt-、液压歧管的”瘦身“故事" class="headerlink" title="<2>、液压歧管的”瘦身“故事"></a>&lt;2&gt;、液压歧管的”瘦身“故事</h3><h3 id="lt-3-gt-、机械中不寻常的液压系统"><a href="#lt-3-gt-、机械中不寻常的液压系统" class="headerlink" title="<3>、机械中不寻常的液压系统"></a>&lt;3&gt;、机械中不寻常的液压系统</h3><h3 id="lt-4-gt-、“复杂性”驱动液压增材制造"><a href="#lt-4-gt-、“复杂性”驱动液压增材制造" class="headerlink" title="<4>、“复杂性”驱动液压增材制造"></a>&lt;4&gt;、“复杂性”驱动液压增材制造</h3><h3 id="lt-5-gt-、液压制造商发力3D打印"><a href="#lt-5-gt-、液压制造商发力3D打印" class="headerlink" title="<5>、液压制造商发力3D打印"></a>&lt;5&gt;、液压制造商发力3D打印</h3><h3 id="总结：-13"><a href="#总结：-13" class="headerlink" title="总结："></a>总结：</h3><p>在3D科学谷看来，液压、散热器、叶片、随形冷却模具，这是几大正在与金属3D打印技术进行深度结合的应用。 因为这些产品都有着特殊的内部结构，传统的加工方式需要牺牲掉产品的性能来满足加工要求，要达到最佳的产品性能，优化的结构通过传统方式是很难实现的。</p><p>传统制造工艺固有的局限性会导致相邻流动通道之间形成突兀的拐角， 造成液体流动不畅或停滞， 这是效率损失的一个重要原因。 从流体力学的角度来看， 传统方式加工的液压歧管在设计上存在许多有待改进的空间， 这正是3D打印技术可以发挥作用之处。</p><p>基于3D打印技术重新设计液压歧管价值体现在两个方面，一方面是重屈得到减轻，使用的制造材料相应减少另一方面是提高设计自由度， 优化内部流体通道的设计，减少流体效率的损失增材制造的液压歧管可应用在农业机械、赛乍、航空、帆船等多种机械设备的液压阀体中。通过下面的案例，我们可以感知粉末床选区金属熔融技术在液压控制系统领域的产业化趋势。</p><h2 id="6-、工业其他"><a href="#6-、工业其他" class="headerlink" title="(6)、工业其他"></a>(6)、工业其他</h2><h3 id="lt-1-gt-、燃气轮机制造"><a href="#lt-1-gt-、燃气轮机制造" class="headerlink" title="<1>、燃气轮机制造"></a>&lt;1&gt;、燃气轮机制造</h3><h3 id="lt-2-gt-、核工业"><a href="#lt-2-gt-、核工业" class="headerlink" title="<2>、核工业"></a>&lt;2&gt;、核工业</h3><h3 id="lt-3-gt-、刀具"><a href="#lt-3-gt-、刀具" class="headerlink" title="<3>、刀具"></a>&lt;3&gt;、刀具</h3><h3 id="lt-4-gt-、后市场"><a href="#lt-4-gt-、后市场" class="headerlink" title="<4>、后市场"></a>&lt;4&gt;、后市场</h3><h3 id="lt-5-gt-、再制造"><a href="#lt-5-gt-、再制造" class="headerlink" title="<5>、再制造"></a>&lt;5&gt;、再制造</h3><h3 id="总结：-14"><a href="#总结：-14" class="headerlink" title="总结："></a>总结：</h3><p>3D打印无论在工业的任何一方面都在以一种全新的方式，一种区别以传统制造业的方式改变了工业制造大的某一环节，并且还会持续产生更大的价值！</p><h2 id="7-、医疗"><a href="#7-、医疗" class="headerlink" title="(7)、医疗"></a>(7)、医疗</h2><h3 id="lt-1-gt-、手术预规划"><a href="#lt-1-gt-、手术预规划" class="headerlink" title="<1>、手术预规划"></a>&lt;1&gt;、手术预规划</h3><h3 id="lt-2-gt-、植入物"><a href="#lt-2-gt-、植入物" class="headerlink" title="<2>、植入物"></a>&lt;2&gt;、植入物</h3><h3 id="lt-3-gt-、牙科"><a href="#lt-3-gt-、牙科" class="headerlink" title="<3>、牙科"></a>&lt;3&gt;、牙科</h3><h3 id="lt-4-gt-、康复医疗器械"><a href="#lt-4-gt-、康复医疗器械" class="headerlink" title="<4>、康复医疗器械"></a>&lt;4&gt;、康复医疗器械</h3><h3 id="lt-5-gt-、芯片上的实验室"><a href="#lt-5-gt-、芯片上的实验室" class="headerlink" title="<5>、芯片上的实验室"></a>&lt;5&gt;、芯片上的实验室</h3><h3 id="总结：-15"><a href="#总结：-15" class="headerlink" title="总结："></a>总结：</h3><p>3D 打印技术在医疗领域的主要应用价值体现在更好地为患者进行个体化治疗，以高效、精准的数字化设计与制造手段制造定制化的医疗器械毋咐置疑，3D打印在医疗领域极具发展潜力。</p><p>目前从事科学研究和市场研究的机构普遍认为，3D打印技术在医疗行业应用发展趋势是从制造植入物、手术、药品等不具有生物活性的医疗器械发展到制造带有生物活性的人造器官。</p><p>D打印医疗模型能够形象地将病人解剖结构呈现给医生， 医生在做手术之 前可以根据模型规划手术方案，或者使用一些与人体组织 “ 手感” 相似的柔性 30打印模型进行手术演练。3D打印医疗模型还可以在医患沟通方面提供许多帮助、 其中之一就是医生可以用来告诉患者究竟是哪个部位出问题了骨科、心脏、神经外科、 肿瘤科等越来越多的医学学科已经利用30打印医疗模型进行手术预规划， 一定程度上帮助医生提高复杂手术的成功率、降低手术风险。 难度越高的手术， 通过3D打印模型进行手术预规划的价值越高。</p><p>目前的3D打印医疗模型制造技术仍具有可提升的空间，主要包括两个方面，一方面是三维建模技术的提升，另一方面是医疗校型建模、3D打印过程与现有医疗诊断流程的整合。</p><p>3D打印医疗模型是通过软件对CT、核磁共振等设备产生的医学影像进行三维建模， 并将建模文件传输给30打印设备进行打印而产生的。核磁共振和CT扫描等医学成像技术可以产生一系列高分辨率的平面化的位图图像， 通过这些图像可以获得如何来建立三维建模的信息。</p><p>3D打印植入物是3D打印技术在医疗行业中市场规模最大的应用。</p><p>牙科产品加工领域是3D打印技术短期和长期发展的重要推动力屈， 牙科产品对小批量定制化的需求， 为3D打印技术提供了良好的应用基础。</p><h2 id="8-、电子"><a href="#8-、电子" class="headerlink" title="(8)、电子"></a>(8)、电子</h2><h3 id="lt-1-gt-、印刷电子与硅基微电子"><a href="#lt-1-gt-、印刷电子与硅基微电子" class="headerlink" title="<1>、印刷电子与硅基微电子"></a>&lt;1&gt;、印刷电子与硅基微电子</h3><h3 id="lt-2-gt-、PCB快速原型"><a href="#lt-2-gt-、PCB快速原型" class="headerlink" title="<2>、PCB快速原型"></a>&lt;2&gt;、PCB快速原型</h3><h3 id="lt-3-gt-、小批量制造"><a href="#lt-3-gt-、小批量制造" class="headerlink" title="<3>、小批量制造"></a>&lt;3&gt;、小批量制造</h3><h3 id="lt-4-gt-、几种有生产潜力的应用"><a href="#lt-4-gt-、几种有生产潜力的应用" class="headerlink" title="<4>、几种有生产潜力的应用"></a>&lt;4&gt;、几种有生产潜力的应用</h3><h3 id="lt-5-gt-、3D打印与物联网"><a href="#lt-5-gt-、3D打印与物联网" class="headerlink" title="<5>、3D打印与物联网"></a>&lt;5&gt;、3D打印与物联网</h3><h3 id="总结：-16"><a href="#总结：-16" class="headerlink" title="总结："></a>总结：</h3><p>3D打印技术在电子行业的运用远远不止于“表面”的阶段，还包括在电子的底层上进行运用。</p><p>3D打印技术在电子行业中的应用尚处于早期阶段，目前主要是用于电子产 品的快速原型， 例如PCB快速原型制造喷墨3D打印。然而也有少数的应用已经超越原型制造，走向了电子产品批股生产， 如共形天线。</p><p>现阶段，3D打印技术在电子产品制造领域最主要的应用就是新产品的快速原型制造。不仅是电子产品的外壳可以通过3D打印技术进行快速制造，电子产品中所衙的PCB也可以通过3D打印进行快速制造。</p><p>柔性电子制造技术在未来的技术创新中将发挥祖要作用， 而用于监测、分析人体健康或运动情况的可穿戴设备是柔性电子应用的高地。 混合3D打印（或称为多材料3D打印）在柔性可穿戴设备的制造中具有一定市场潜力。</p><p>物联网和3D打印的结合是双向的： 一个方向是通过3D打印技术在零件或 产品制造的过程中将传感器嵌入 ，作为一种制造技术手段与物联网发生直接联系；另一个方向是物联网所积聚的大数据反馈给3D打印的制造系统，以实现更精益的生产及供应链管理和更加适合用户需求的产品设计。</p><p>3D打印技术正变得越来越受欢迎，在航空航天、汽车、电子和医疗行业发挥越来越重要的作用，而物联网在这些行业中均可以发挥重要的作用。应用物联网技术之后，机械中的各项监测结果将连接到网络中，成为大数据的一部分，对这些数据进行分析后，则能够实现高效的质批控制。不仅如此，物联网还通过不断增长的传感器收集每一个可能的数据，分析与人类有关的行为和互动，并允许企业收集人们的产品行为信息，用来了解和预测未来的行为。同样的技术还可以用千特定的用途，如分析温度和结构的完整性，有助于提高产品的产量和质报。总之，以3D打印为代表的数字化制造与大数据这两种革命性的技术，将为许多行业提供一种工具，可以彻底改变监控过程的方式，分析和改进产品质量。毕马威曾预测物联网和3D打印将成为位居改变人们生活和工作方式的前三名技术，而到2020年，活跃的无线连接设备数量将超过409亿部，这为二者的结合提供了空间。</p><h2 id="9-、首饰"><a href="#9-、首饰" class="headerlink" title="(9)、首饰"></a>(9)、首饰</h2><h3 id="lt-1-gt-、首饰的两种“打印”方式"><a href="#lt-1-gt-、首饰的两种“打印”方式" class="headerlink" title="<1>、首饰的两种“打印”方式"></a>&lt;1&gt;、首饰的两种“打印”方式</h3><h3 id="lt-2-gt-、互联网-首饰定制"><a href="#lt-2-gt-、互联网-首饰定制" class="headerlink" title="<2>、互联网+首饰定制"></a>&lt;2&gt;、互联网+首饰定制</h3><h3 id="总结：-17"><a href="#总结：-17" class="headerlink" title="总结："></a>总结：</h3><p>3D打印无论是直接还是间接用于首饰制造，都将简化当前首饰制作的流程，并推动行业发展向定制化、更复杂或者独特的设计、数字化制造的方向发展。</p><p>3D打印将改变首饰行业，未来将出现数字化的首饰平台，消费者除了购买首饰，还能参与首饰的设计，首饰在设计方案确定之后才能进行生产。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
          <category> 3D打印 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 3D打印 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java包管理模式总结归纳——Java小抄(8)</title>
      <link href="2020/12/24/Java-Supplement-8/"/>
      <url>2020/12/24/Java-Supplement-8/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java包管理模式总结归纳——Java小抄-8-】"><a href="#【Java包管理模式总结归纳——Java小抄-8-】" class="headerlink" title="【Java包管理模式总结归纳——Java小抄(8)】"></a>【Java包管理模式总结归纳——Java小抄(8)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、包"><a href="#一、包" class="headerlink" title="一、包"></a>一、包</h1><h2 id="1、包的概述"><a href="#1、包的概述" class="headerlink" title="1、包的概述"></a>1、包的概述</h2><ul><li>其实就是文件夹</li><li>作用：对类进行分类管理</li><li>包的划分：<ul><li>举例：<ul><li>学生的增加，删除，修改，查询</li><li>老师的增加，删除，修改，查询</li><li>以及以后可能出现的其他的类的增加，删除，修改，查询</li><li>基本的划分“按照模块和功能划分”</li></ul></li></ul></li></ul><h1 id="二、包的定义及注意事项"><a href="#二、包的定义及注意事项" class="headerlink" title="二、包的定义及注意事项"></a>二、包的定义及注意事项</h1><h2 id="1、定义包的格式"><a href="#1、定义包的格式" class="headerlink" title="1、定义包的格式"></a>1、定义包的格式</h2><ul><li><p>package 包名;</p><ul><li>多级包用 . 分开即可</li><li>package cn.cxtc.jk03</li><li>原则：域名反写</li></ul></li><li><p>注意事项：</p><ul><li>package语句必须是程序的第一条可执行的代码(import放在package后)</li><li>package语句在一个java文件中只能有一个</li><li>如果没有package，默认表示无包名</li></ul></li></ul><h1 id="三、带包的类的编译和运行"><a href="#三、带包的类的编译和运行" class="headerlink" title="三、带包的类的编译和运行"></a>三、带包的类的编译和运行</h1><h2 id="1、手动式"><a href="#1、手动式" class="headerlink" title="1、手动式"></a>1、手动式</h2><ul><li><p>a：java编译当前类文件</p></li><li><p>b：手动建立包对应的文件夹</p></li><li><p>c：把a步骤的class文件放到步骤的最终文件夹下</p></li><li><p>d：通过java命令执行，注意：需要带包名称的执行</p><ul><li>java cn.cxtc.jk03.HelloWorld</li></ul></li></ul><h2 id="2、自动式"><a href="#2、自动式" class="headerlink" title="2、自动式"></a>2、自动式</h2><ul><li><p>a：javac编译的时候带上 -d 即可</p><ul><li>javac -d . HelloWorld.java</li></ul></li><li><p>b：通过java命令执行，和手动式一样</p></li></ul><h2 id="3、说明"><a href="#3、说明" class="headerlink" title="3、说明"></a>3、说明</h2><ul><li>1、对于 .java 文件中没有package语句时：<ul><li>编译：.java文件所在路径下：javac Xx.java（生成 Xx.class 文件）</li><li>运行：.class文件所在路径下：java Xx</li></ul></li><li>2、对于 .java 文件中有package语句，但是 .java 文件不在包结构中时：<ul><li>编译：.java文件所在路径下：javac Xx.java（能够成功编译，并成功生成 Xx.class 文件）</li><li>运行：.class文件所在路径下：java Xx（运行报错！错误: 找不到或无法加载主类 Xx）</li></ul></li><li>3、对于 .java 文件中有package语句，但是 .java 文件不在包结构中时：<ul><li>编译：.java文件所在路径下：javac Xx.java（能够成功编译，并成功生成 .class 文件）</li><li>移动：将 Xx.class 文件放到对应的包结构目录下</li><li>运行：.java文件所在路径下：java Xx（运行报错！错误: 找不到或无法加载主类 Xx）</li><li>再次运行：.java文件所在路径下：java cn.cxtc.jk03.Xx（运行成功！）</li><li>运行：.class文件所在路径下：java Xx（运行成功！）</li></ul></li><li>4、对于 .java 文件中有package语句，但是 .java 文件不在包结构中时：<ul><li>编译：.java文件所在路径下：javac -d . Xx.java（能够成功编译，并成功生成 .class 文件）</li><li>自动构建包结构：当上一步完成后，编译器会自动根据package语句中的包结构路径创建文件夹结构（已有时便直接用）并将生成的 .class 文件放入指定位置</li><li>运行：.java文件所在路径下：java Xx（运行报错！错误: 找不到或无法加载主类 Xx）</li><li>再次运行：.java文件所在路径下：java cn.cxtc.jk03.Xx（运行成功！）</li><li>运行：.class文件所在路径下：java Xx（运行成功！）</li></ul></li></ul><h1 id="四、类之间的访问"><a href="#四、类之间的访问" class="headerlink" title="四、类之间的访问"></a>四、类之间的访问</h1><h2 id="1、定义两个类：Method-Test"><a href="#1、定义两个类：Method-Test" class="headerlink" title="1、定义两个类：Method, Test"></a>1、定义两个类：Method, Test</h2><ul><li>Method<ul><li>求和方法(sum)</li></ul></li><li>Test<ul><li>测试方法(main)</li></ul></li></ul><h2 id="2、测试两个类不同位置的访问方式"><a href="#2、测试两个类不同位置的访问方式" class="headerlink" title="2、测试两个类不同位置的访问方式"></a>2、测试两个类不同位置的访问方式</h2><ul><li>无包时的访问</li><li>同一个包内的访问<ul><li>不用导包</li></ul></li><li>不同包间的访问<ul><li>必须指明包（或：导入包）</li></ul></li></ul><h1 id="五、导包"><a href="#五、导包" class="headerlink" title="五、导包"></a>五、导包</h1><h2 id="1、导包概述"><a href="#1、导包概述" class="headerlink" title="1、导包概述"></a>1、导包概述</h2><ul><li>不同包下的类之间的访问，我们发现，每次使用不同包下的类的时候，都需要加包的全路径（eg: java.util.Scanner sc = new java.util.Scanner(System.in);    cn.cxtc.jk03.Jerry zjr = new cn.cxtc.jk03.Jerry(); ），比较麻烦，这个时候java就提供了导包的功能。</li></ul><h2 id="2、导包格式"><a href="#2、导包格式" class="headerlink" title="2、导包格式"></a>2、导包格式</h2><ul><li>import 包名;</li><li>注意：<ul><li>这种方式导入是到类的名称（单类型导入：import cn.cxtc.jk03.Jerry;）</li><li>虽然可以最后写 * ，但是不建议（按需导入：import cn.cxtc.jk03.*;     // 不允许出现多个*）   </li></ul></li><li>package, import, class有没有顺序关系?<ul><li>package——&gt;import——&gt;class</li></ul></li><li>补充说明：<ul><li>package只能出现一次</li><li>import可以出现多次</li><li>一个.java文件中可以放多个class，但是实际开发中只建议一个.java文件内放一个class</li></ul></li></ul><h1 id="六、权限修饰符"><a href="#六、权限修饰符" class="headerlink" title="六、权限修饰符"></a>六、权限修饰符</h1><table><thead><tr><th align="center"></th><th align="center">public</th><th align="center">protected</th><th align="center">缺省</th><th align="center">private</th></tr></thead><tbody><tr><td align="center">同一类中</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center">同一包子类，其他类</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td></tr><tr><td align="center">不同包子类</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">不同包其他类</td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="附：class修饰符实例"><a href="#附：class修饰符实例" class="headerlink" title="附：class修饰符实例"></a>附：class修饰符实例</h2><ul><li>四种访问控制修饰符中，对于外部类只可以使用：public 或 默认</li><li>public class：所有地方都可以使用该类</li><li>class：只有同一包中才能使用该类</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201231105814328.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201231105814314.png"></p><h1 id="七、补充"><a href="#七、补充" class="headerlink" title="七、补充"></a>七、补充</h1><h2 id="1、类及其组成可以用的修饰符"><a href="#1、类及其组成可以用的修饰符" class="headerlink" title="1、类及其组成可以用的修饰符"></a>1、类及其组成可以用的修饰符</h2><ul><li>修饰符：</li><li>权限修饰符：private，缺省，protected，public</li><li>状态修饰符：static，final</li><li>抽象修饰符：abstract</li></ul><h2 id="2、类及其组成可以用的修饰符"><a href="#2、类及其组成可以用的修饰符" class="headerlink" title="2、类及其组成可以用的修饰符"></a>2、类及其组成可以用的修饰符</h2><ul><li>类：<ul><li>默认，public，final，abstract</li><li>我们自己定义：public居多</li></ul></li><li>成员变量：<ul><li>四种权限修饰符均可,final,static</li><li>我们自己定义：private居多</li></ul></li><li>构造方法：<ul><li>四种权限修饰符均可,其他不可</li><li>我们自己定义：public 居多</li></ul></li><li>成员方法：<ul><li>四种权限修饰符均可，final,static,abstract</li><li>我们自己定义：public居多</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java接口机制案例详解——Java小抄(7)</title>
      <link href="2020/12/24/Java-Supplement-7/"/>
      <url>2020/12/24/Java-Supplement-7/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java接口机制案例详解——Java小抄-7-】"><a href="#【Java接口机制案例详解——Java小抄-7-】" class="headerlink" title="【Java接口机制案例详解——Java小抄(7)】"></a>【Java接口机制案例详解——Java小抄(7)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、接口概述"><a href="#一、接口概述" class="headerlink" title="一、接口概述"></a>一、接口概述</h1><h2 id="1、接口概述"><a href="#1、接口概述" class="headerlink" title="1、接口概述"></a>1、接口概述</h2><ul><li>猫狗案例中，如果有狗看门，猫钻火圈等额外的动作，并不是所有猫或者狗一开始就具备的，这应该属于经过特殊的培训训练出来的，这些额外的动作定义到动物类中就不合适，也不适合直接定义到猫或者狗中，因为只有部分猫狗具备这些功能。所以，为了体现事物功能的扩展性，Java中就提供了接口来定义这些额外功能，并不给出具体实现，将来哪些猫狗需要被培训，只需要这部分猫狗把这些额外功能实现即可。</li></ul><h1 id="二、接口特点"><a href="#二、接口特点" class="headerlink" title="二、接口特点"></a>二、接口特点</h1><h2 id="1、接口特点"><a href="#1、接口特点" class="headerlink" title="1、接口特点"></a>1、接口特点</h2><ul><li><p>接口用关键字interface表示</p><ul><li>格式：interface 接口名 {}</li></ul></li><li><p>类实现接口用implements表示</p><ul><li>格式：class 类名 implements 接口名 {}</li></ul></li><li><p>接口不能实例化</p><ul><li><p>那么，接口如何实例化呢?</p></li><li><p>按照多态的方式，由具体的子类实例化。其实这也是多态的一种，接口多态。</p></li></ul></li><li><p>接口的子类</p><ul><li><p>要么是抽象类</p></li><li><p>要么重写接口中的所有抽象方法</p></li></ul></li></ul><h1 id="三、接口成员特点"><a href="#三、接口成员特点" class="headerlink" title="三、接口成员特点"></a>三、接口成员特点</h1><h2 id="1、成员变量"><a href="#1、成员变量" class="headerlink" title="1、成员变量"></a>1、成员变量</h2><ul><li>只能是常量</li><li>默认修饰符 public static final（注意：可以省略，但推荐还是写上！）</li></ul><h2 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h2><ul><li>没有，因为接口主要是扩展功能的，而没有具体存在</li></ul><h2 id="3、成员方法"><a href="#3、成员方法" class="headerlink" title="3、成员方法"></a>3、成员方法</h2><ul><li>只能是抽象方法</li><li>默认修饰符 public abstract（注意：可以省略，但推荐还是写上！）</li></ul><h1 id="四、类与类-类与接口以及接口与接口的关系"><a href="#四、类与类-类与接口以及接口与接口的关系" class="headerlink" title="四、类与类,类与接口以及接口与接口的关系"></a>四、类与类,类与接口以及接口与接口的关系</h1><h2 id="1、类与类"><a href="#1、类与类" class="headerlink" title="1、类与类"></a>1、类与类</h2><ul><li><p>继承关系，只能单继承，但是可以多层继承</p><h2 id="2、类与接口"><a href="#2、类与接口" class="headerlink" title="2、类与接口"></a>2、类与接口</h2></li><li><p>实现关系，可以单实现，也可以多实现。还可以在继承一个类的同时实现多个接口</p><h2 id="3、接口与接口"><a href="#3、接口与接口" class="headerlink" title="3、接口与接口"></a>3、接口与接口</h2></li><li><p>继承关系，可以单继承，也可以多继承</p></li></ul><h1 id="五、抽象类和接口的区别"><a href="#五、抽象类和接口的区别" class="headerlink" title="五、抽象类和接口的区别"></a>五、抽象类和接口的区别</h1><h2 id="1、成员区别"><a href="#1、成员区别" class="headerlink" title="1、成员区别"></a>1、成员区别</h2><ul><li>抽象类 变量,常量;有抽象方法;抽象方法,非抽象方法</li><li>接口 常量;抽象方法</li></ul><h2 id="2、关系区别"><a href="#2、关系区别" class="headerlink" title="2、关系区别"></a>2、关系区别</h2><ul><li>类与类 继承，单继承</li><li>类与接口 实现，单实现，多实现</li><li>接口与接口 继承，单继承，多继承</li></ul><h2 id="3、设计理念区别"><a href="#3、设计理念区别" class="headerlink" title="3、设计理念区别"></a>3、设计理念区别</h2><ul><li>抽象类 被继承体现的是：”is a”的关系。共性功能</li><li>接口 被实现体现的是：”like a”的关系(能不能，具不具有)。扩展功能</li></ul><h1 id="六、接口练习"><a href="#六、接口练习" class="headerlink" title="六、接口练习"></a>六、接口练习</h1><h2 id="1、猫狗案例-加入跳高的额外功能"><a href="#1、猫狗案例-加入跳高的额外功能" class="headerlink" title="1、猫狗案例,加入跳高的额外功能"></a>1、猫狗案例,加入跳高的额外功能</h2><h2 id="2、老师和学生案例-加入抽烟的额外功能"><a href="#2、老师和学生案例-加入抽烟的额外功能" class="headerlink" title="2、老师和学生案例,加入抽烟的额外功能"></a>2、老师和学生案例,加入抽烟的额外功能</h2><h2 id="3、教练和运动员案例"><a href="#3、教练和运动员案例" class="headerlink" title="3、教练和运动员案例"></a>3、教练和运动员案例</h2><ul><li>乒乓球运动员和篮球运动员。</li><li>乒乓球教练和篮球教练。</li><li>为了出国交流，跟乒乓球相关的人员都需要学习英语。</li><li>请用所学知识：</li><li>分析，这个案例中有哪些抽象类，哪些接口，哪些具体类。</li></ul><h1 id="七、接口思想"><a href="#七、接口思想" class="headerlink" title="七、接口思想"></a>七、接口思想</h1><h2 id="1、实现软件模块间的连接方面有着巨大优势。"><a href="#1、实现软件模块间的连接方面有着巨大优势。" class="headerlink" title="1、实现软件模块间的连接方面有着巨大优势。"></a>1、实现软件模块间的连接方面有着巨大优势。</h2><h2 id="2、调用者和被调用者只需要各自遵循接口标准，而无需各自了解对方具体的实现过程，更好的实现扩展性和低耦合性。"><a href="#2、调用者和被调用者只需要各自遵循接口标准，而无需各自了解对方具体的实现过程，更好的实现扩展性和低耦合性。" class="headerlink" title="2、调用者和被调用者只需要各自遵循接口标准，而无需各自了解对方具体的实现过程，更好的实现扩展性和低耦合性。"></a>2、调用者和被调用者只需要各自遵循接口标准，而无需各自了解对方具体的实现过程，更好的实现扩展性和低耦合性。</h2><h2 id="3、USB接口案例"><a href="#3、USB接口案例" class="headerlink" title="3、USB接口案例"></a>3、USB接口案例</h2><ul><li>主板，各类USB设备（U盘，手机，移动硬盘）</li></ul><p>低配版本：<strong>UsbTest.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jerry.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">USB接口案例(版本1)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> voltage = <span class="number">5.0</span>; <span class="comment">// 电压</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> current = <span class="number">0.5</span>; <span class="comment">// 电流</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>; <span class="comment">// 启动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>; <span class="comment">// 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;    <span class="comment">// 关闭</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标实现USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"鼠标启动"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"鼠标运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"鼠标关闭"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键盘实现USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Keyboard</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"键盘启动"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"键盘运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"键盘关闭"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 摄像头实现USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Camera</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"摄像头启动"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"摄像头运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"摄像头关闭"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机实现USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机启动"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机关闭"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主板类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mainboard</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useUSB</span><span class="params">(USB u)</span> </span>{    <span class="comment">// 接口多态</span></span><br><span class="line">        u.start();</span><br><span class="line">        u.run();</span><br><span class="line">        u.stop();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsbTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Mainboard mb = <span class="keyword">new</span> Mainboard();</span><br><span class="line">        Mouse m = <span class="keyword">new</span> Mouse();</span><br><span class="line">        Keyboard kb = <span class="keyword">new</span> Keyboard();</span><br><span class="line">        Camera c = <span class="keyword">new</span> Camera();</span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">        mb.useUSB(m);  <span class="comment">// 接口多态</span></span><br><span class="line">        mb.useUSB(kb);  <span class="comment">// 接口多态</span></span><br><span class="line">        mb.useUSB(c);  <span class="comment">// 接口多态</span></span><br><span class="line">        mb.useUSB(p);  <span class="comment">// 接口多态</span></span><br><span class="line">        System.out.println(<span class="string">"USB设备的电压是："</span> + USB.voltage);</span><br><span class="line">        System.out.println(<span class="string">"USB设备的电流是："</span> + USB.current);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">鼠标启动</span><br><span class="line">鼠标运行</span><br><span class="line">鼠标关闭</span><br><span class="line">键盘启动</span><br><span class="line">键盘运行</span><br><span class="line">键盘关闭</span><br><span class="line">摄像头启动</span><br><span class="line">摄像头运行</span><br><span class="line">摄像头关闭</span><br><span class="line">手机启动</span><br><span class="line">手机运行</span><br><span class="line">手机关闭</span><br><span class="line">USB设备的电压是：5.0</span><br><span class="line">USB设备的电流是：0.5</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></tbody></table></figure><p>高配版本：<strong>UsbTestPro.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jerry.java;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">USB接口案例(版本2)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> voltage = <span class="number">5.0</span>; <span class="comment">// 电压</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> current = <span class="number">0.5</span>; <span class="comment">// 电流</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>; <span class="comment">// 启动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;   <span class="comment">// 运行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;  <span class="comment">// 关闭</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标实现USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"鼠标启动"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"鼠标运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"鼠标关闭"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 键盘实现USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Keyboard</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"键盘启动"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"键盘运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"键盘关闭"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 摄像头实现USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Camera</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"摄像头启动"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"摄像头运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"摄像头关闭"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机实现USB接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> <span class="keyword">implements</span> <span class="title">USB</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机启动"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机运行"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"手机关闭"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主板类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mainboard</span> </span>{</span><br><span class="line">    USB[] usb = <span class="keyword">new</span> USB[<span class="number">4</span>]; <span class="comment">// 主板上创建4个USB接口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加设备</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUSB</span><span class="params">(USB u)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; usb.length; i++){</span><br><span class="line">            <span class="keyword">if</span> (usb[i] == <span class="keyword">null</span>){</span><br><span class="line">                usb[i] = u;</span><br><span class="line">                <span class="keyword">break</span>;   <span class="comment">// 如果已经挂上一个接口，则退出循环，不再检测其他接口</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主板启动</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"主板启动了"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; usb.length; i++){</span><br><span class="line">            <span class="keyword">if</span> (usb[i] != <span class="keyword">null</span>){</span><br><span class="line">                usb[i].start();</span><br><span class="line">                usb[i].run();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主板关闭</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; usb.length; i++){</span><br><span class="line">            <span class="keyword">if</span> (usb[i] != <span class="keyword">null</span>){</span><br><span class="line">                usb[i].stop();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"主板关闭了"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UsbTestPro</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Mainboard mb = <span class="keyword">new</span> Mainboard();</span><br><span class="line">        Mouse m = <span class="keyword">new</span> Mouse();</span><br><span class="line">        Keyboard kb = <span class="keyword">new</span> Keyboard();</span><br><span class="line">        Camera c = <span class="keyword">new</span> Camera();</span><br><span class="line">        Phone p = <span class="keyword">new</span> Phone();</span><br><span class="line"></span><br><span class="line">        mb.addUSB(m);</span><br><span class="line">        mb.addUSB(kb);</span><br><span class="line">        mb.addUSB(c);</span><br><span class="line">        mb.addUSB(p);</span><br><span class="line"></span><br><span class="line">        mb.start();</span><br><span class="line">        mb.stop();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">主板启动了</span><br><span class="line">鼠标启动</span><br><span class="line">鼠标运行</span><br><span class="line">键盘启动</span><br><span class="line">键盘运行</span><br><span class="line">摄像头启动</span><br><span class="line">摄像头运行</span><br><span class="line">手机启动</span><br><span class="line">手机运行</span><br><span class="line">鼠标关闭</span><br><span class="line">键盘关闭</span><br><span class="line">摄像头关闭</span><br><span class="line">手机关闭</span><br><span class="line">主板关闭了</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></tbody></table></figure><h1 id="八、案例"><a href="#八、案例" class="headerlink" title="八、案例"></a>八、案例</h1><p>InterfaceDemo1.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口的特点：</span></span><br><span class="line"><span class="comment">A:接口用关键字interface表示</span></span><br><span class="line"><span class="comment">interface 接口名 {}</span></span><br><span class="line"><span class="comment">B:类实现接口用implements表示</span></span><br><span class="line"><span class="comment">class 类名 implements 接口名 {}</span></span><br><span class="line"><span class="comment">C:接口本身不能实例化，但可以按照多态的方式实例化</span></span><br><span class="line"><span class="comment">D:接口的子类</span></span><br><span class="line"><span class="comment">a:抽象类</span></span><br><span class="line"><span class="comment">b:具体类，重写接口中的所有抽象方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义动物培训接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AnimalTrain</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类实现接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">AnimalTrain</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体类实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">AnimalTrain</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"猫可以跳高了"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo1</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">// AnimalTrain无法实例化</span></span><br><span class="line"><span class="comment">// AnimalTrain at = new AnimalTrain();</span></span><br><span class="line"><span class="comment">// at.jump();</span></span><br><span class="line"></span><br><span class="line">AnimalTrain at = <span class="keyword">new</span> Cat();</span><br><span class="line">at.jump();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>InterfaceDemo2.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">接口成员特点</span></span><br><span class="line"><span class="comment">成员变量；只能是常量，并且是静态的。</span></span><br><span class="line"><span class="comment">默认修饰符：public static final</span></span><br><span class="line"><span class="comment">建议：手动给出。</span></span><br><span class="line"><span class="comment">构造方法：接口没有构造方法。</span></span><br><span class="line"><span class="comment">成员方法：只能是抽象方法。</span></span><br><span class="line"><span class="comment">默认修饰符：public abstract</span></span><br><span class="line"><span class="comment">建议：手动给出。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> num3 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误: 接口没有构造方法</span></span><br><span class="line"><span class="comment">// public Inter() {}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的方法没有方法体</span></span><br><span class="line"><span class="comment">// public void show() {}</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// abstract void show(); //默认public</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>; <span class="comment">//默认abstract</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterImpl</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Inter</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InterImpl</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo2</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">// 接口多态</span></span><br><span class="line">Inter i = <span class="keyword">new</span> InterImpl();</span><br><span class="line">System.out.println(i.num);</span><br><span class="line">System.out.println(i.num2);</span><br><span class="line"><span class="comment">//i.num = 100;</span></span><br><span class="line"><span class="comment">//i.num2 = 200;</span></span><br><span class="line"><span class="comment">//System.out.println(i.num); //无法为最终变量num分配值</span></span><br><span class="line"><span class="comment">//System.out.println(i.num2);//无法为最终变量num2分配值</span></span><br><span class="line">System.out.println(Inter.num);</span><br><span class="line">System.out.println(Inter.num2);</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>InterfaceDemo3.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">类与类：</span></span><br><span class="line"><span class="comment">继承关系,只能单继承,可以多层继承。</span></span><br><span class="line"><span class="comment">类与接口：</span></span><br><span class="line"><span class="comment">实现关系,可以单实现,也可以多实现。</span></span><br><span class="line"><span class="comment">还可以在继承一个类的同时实现多个接口。</span></span><br><span class="line"><span class="comment">接口与接口：</span></span><br><span class="line"><span class="comment">继承关系,可以单继承,也可以多继承。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mother</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口多继承</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Sister</span> <span class="keyword">extends</span> <span class="title">Father</span>, <span class="title">Mother</span> </span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// class Son implements Father,Mother // 多实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Father</span>, <span class="title">Mother</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show son"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show2 son"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceDemo3</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">// 接口多态</span></span><br><span class="line">Father f = <span class="keyword">new</span> Son();</span><br><span class="line">f.show();</span><br><span class="line"><span class="comment">// f.show2(); // 报错</span></span><br><span class="line"></span><br><span class="line">Mother m = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="comment">// m.show(); // 报错</span></span><br><span class="line">m.show2();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">show son</span></span><br><span class="line"><span class="comment">show2 son</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>InterfaceTest1.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">猫狗案例,加入跳高的额外功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳高接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Jumpping</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动物类（抽象类）</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"动物都要休息"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 狗类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"狗吃肉"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳高猫类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumpCat</span> <span class="keyword">extends</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JumpCat</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JumpCat</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"跳高猫"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳高狗类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JumpDog</span> <span class="keyword">extends</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Jumpping</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JumpDog</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JumpDog</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"跳高狗"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">// 跳高猫测试</span></span><br><span class="line">JumpCat jc = <span class="keyword">new</span> JumpCat(<span class="string">"abc"</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(jc.getName() + <span class="string">"---"</span> + jc.getAge());</span><br><span class="line">jc.eat();</span><br><span class="line">jc.sleep();</span><br><span class="line">jc.jump();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通多态</span></span><br><span class="line">Cat c1 = <span class="keyword">new</span> JumpCat();</span><br><span class="line">c1.eat();</span><br><span class="line">c1.sleep();</span><br><span class="line"><span class="comment">// c1.jump(); // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类多态</span></span><br><span class="line">Animal a1 = <span class="keyword">new</span> JumpCat();</span><br><span class="line">a1.eat();</span><br><span class="line">a1.sleep();</span><br><span class="line"><span class="comment">// a1.jump(); // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口多态</span></span><br><span class="line">Jumpping j1 = <span class="keyword">new</span> JumpCat();</span><br><span class="line"><span class="comment">// j1.eat(); // 报错</span></span><br><span class="line"><span class="comment">// j1.sleep(); // 报错</span></span><br><span class="line">j1.jump(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳高狗测试</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>InterfaceTest2.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">老师和学生案例,加入抽烟的额外功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽烟接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Smoking</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人类（抽象类）</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"人都要休息"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 教师类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"吃白菜"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学生类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"吃红烧肉"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽烟教师类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmokingTeacher</span> <span class="keyword">extends</span> <span class="title">Teacher</span> <span class="keyword">implements</span> <span class="title">Smoking</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SmokingTeacher</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SmokingTeacher</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"抽烟的老师"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽烟学生类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmokingStudent</span> <span class="keyword">extends</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Smoking</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SmokingStudent</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SmokingStudent</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">smoke</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"抽烟的学生"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest2</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">// 正常调用</span></span><br><span class="line">SmokingStudent s1 =  <span class="keyword">new</span> SmokingStudent();</span><br><span class="line">s1.eat();</span><br><span class="line">s1.sleep();</span><br><span class="line">s1.smoke();</span><br><span class="line">System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通多态</span></span><br><span class="line">Student s2 = <span class="keyword">new</span> SmokingStudent();</span><br><span class="line">s1.eat(); </span><br><span class="line">s1.sleep();</span><br><span class="line"><span class="comment">// s1.smoke(); // 报错</span></span><br><span class="line">System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类多态</span></span><br><span class="line">Person p1 = <span class="keyword">new</span> SmokingStudent();</span><br><span class="line">p1.eat(); </span><br><span class="line">p1.sleep();</span><br><span class="line"><span class="comment">// p1.smoke(); // 报错</span></span><br><span class="line">System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口多态</span></span><br><span class="line">Smoking s3 = <span class="keyword">new</span> SmokingStudent();</span><br><span class="line"><span class="comment">// p1.eat();  // 报错</span></span><br><span class="line"><span class="comment">// p1.sleep(); // 报错</span></span><br><span class="line">s3.smoke(); </span><br><span class="line">System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 教师测试</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">吃红烧肉</span></span><br><span class="line"><span class="comment">人都要休息</span></span><br><span class="line"><span class="comment">抽烟的学生</span></span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"><span class="comment">吃红烧肉</span></span><br><span class="line"><span class="comment">人都要休息</span></span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"><span class="comment">吃红烧肉</span></span><br><span class="line"><span class="comment">人都要休息</span></span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"><span class="comment">抽烟的学生</span></span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>InterfaceTest3.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">教练和运动员案例</span></span><br><span class="line"><span class="comment">乒乓球运动员和篮球运动员。</span></span><br><span class="line"><span class="comment">乒乓球教练和篮球教练。</span></span><br><span class="line"><span class="comment">为了出国交流，跟乒乓球相关的人员都需要学习英语。</span></span><br><span class="line"><span class="comment">请用所学知识：</span></span><br><span class="line"><span class="comment">分析，这个案例中有哪些抽象类，哪些接口，哪些具体类。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 讲英语接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SpeakEnglish</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 人类（抽象类）</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"人都是要睡觉的"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//运动员类（抽象类）</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 教练员类（抽象类）</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Coach</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Coach</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Coach</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name,age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 乒乓球运动员类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PingPangPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span> <span class="keyword">implements</span> <span class="title">SpeakEnglish</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PingPangPlayer</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PingPangPlayer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"乒乓球运动员三菜一汤"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"乒乓球运动员学习如何发球和接球"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"乒乓球运动员讲英语"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 篮球运动员类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasketballPlayer</span> <span class="keyword">extends</span> <span class="title">Player</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BasketballPlayer</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BasketballPlayer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"篮球运动员四菜两汤"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"篮球运动员学习如何运球和投篮"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 乒乓球教练类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PingPangCoach</span> <span class="keyword">extends</span> <span class="title">Coach</span> <span class="keyword">implements</span> <span class="title">SpeakEnglish</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PingPangCoach</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PingPangCoach</span><span class="params">(String name,<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name,age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"乒乓球教练三菜一汤"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"乒乓球教练教如何发球和接球"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"乒乓球教练讲英语"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 篮球教练类（具体类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasketballCoach</span> <span class="keyword">extends</span> <span class="title">Coach</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BasketballCoach</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BasketballCoach</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(name, age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"篮球教练四菜两汤"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"篮球教练教如何运球和投篮"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InterfaceTest3</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">// 乒乓球运动员测试自己完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 篮球运动员测试自己完成</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多态机制案例详解——Java小抄(6)</title>
      <link href="2020/12/23/Java-Supplement-6/"/>
      <url>2020/12/23/Java-Supplement-6/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java多态机制案例详解——Java小抄-6-】"><a href="#【Java多态机制案例详解——Java小抄-6-】" class="headerlink" title="【Java多态机制案例详解——Java小抄(6)】"></a>【Java多态机制案例详解——Java小抄(6)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、多态概述"><a href="#一、多态概述" class="headerlink" title="一、多态概述"></a>一、多态概述</h1><h2 id="1、多态概述"><a href="#1、多态概述" class="headerlink" title="1、多态概述"></a>1、多态概述</h2><ul><li><p>某一个事物，在不同时刻表现出来的不同状态</p></li><li><p>举例：</p><ul><li>猫可以是猫的类型，猫 m = new 猫();</li><li>同时猫也是动物的一种，也可以把猫称为动物，动物 d = new 猫();</li></ul></li></ul><h2 id="2、多态前提和体现"><a href="#2、多态前提和体现" class="headerlink" title="2、多态前提和体现"></a>2、多态前提和体现</h2><ul><li>有继承关系    </li><li>有方法重写</li><li>有父类引用指向子类对象</li></ul><h1 id="二、多态案例及成员访问特点"><a href="#二、多态案例及成员访问特点" class="headerlink" title="二、多态案例及成员访问特点"></a>二、多态案例及成员访问特点</h1><h2 id="1、多态案例"><a href="#1、多态案例" class="headerlink" title="1、多态案例"></a>1、多态案例</h2><ul><li>按照前提写一个多态的案例</li></ul><h2 id="2、成员访问特点"><a href="#2、成员访问特点" class="headerlink" title="2、成员访问特点"></a>2、成员访问特点</h2><ul><li>成员变量<ul><li>编译看左边，运行看左边</li></ul></li><li>成员方法（多态的体现）<ul><li>编译看左边，运行看右边</li></ul></li><li>静态方法<ul><li>编译看左边，运行看左边</li><li>所以静态方法不能算方法的重写</li></ul></li></ul><h2 id="3、成员方法访问顺序"><a href="#3、成员方法访问顺序" class="headerlink" title="3、成员方法访问顺序"></a>3、成员方法访问顺序</h2><ul><li>先看父类有没有该方法？<ul><li>如果父类有，则看子类有没有该方法<ul><li>子类也有，则执行子类的方法</li><li>子类没有，则执行父类的方法</li></ul></li><li>如果父类没有，无论子类有没有都报错！（因为：违背了多态的原则）</li></ul></li></ul><h1 id="三、多态的好处和弊端"><a href="#三、多态的好处和弊端" class="headerlink" title="三、多态的好处和弊端"></a>三、多态的好处和弊端</h1><h2 id="1、多态的好处-案例演示"><a href="#1、多态的好处-案例演示" class="headerlink" title="1、多态的好处(案例演示)"></a>1、多态的好处(案例演示)</h2><ul><li>提高了程序的维护性(由继承保证)</li><li>提高了程序的扩展性(由多态保证)</li></ul><h2 id="2、多态的弊端"><a href="#2、多态的弊端" class="headerlink" title="2、多态的弊端"></a>2、多态的弊端</h2><ul><li>不能访问子类特有功能</li><li>那么我们如何才能访问子类的特有功能呢?<ul><li>多态中的转型</li></ul></li></ul><h1 id="四、多态中的转型问题"><a href="#四、多态中的转型问题" class="headerlink" title="四、多态中的转型问题"></a>四、多态中的转型问题</h1><h2 id="1、向上转型"><a href="#1、向上转型" class="headerlink" title="1、向上转型"></a>1、向上转型</h2><ul><li>从子到父</li><li>父类引用指向子类对象</li></ul><h2 id="2、向下转型"><a href="#2、向下转型" class="headerlink" title="2、向下转型"></a>2、向下转型</h2><ul><li>从父到子</li><li>父类引用转为子类对象</li></ul><h1 id="五、抽象类概述"><a href="#五、抽象类概述" class="headerlink" title="五、抽象类概述"></a>五、抽象类概述</h1><h2 id="1、抽象类概述"><a href="#1、抽象类概述" class="headerlink" title="1、抽象类概述"></a>1、抽象类概述</h2><ul><li>猫狗案例中，提取出了一个动物类。并且我们在前面也创建过了动物对象，其实这是不对的。动物本身并不是一个具体的事物，而是一个抽象的事物。只有真正的猫，狗才是具体的动物。同理，我们也可以推想，不同的动物吃的东西应该是不一样的，所以，我们不应该在动物类中给出具体体现，而是应该给出一个声明即可</li></ul><h1 id="六、抽象类特点"><a href="#六、抽象类特点" class="headerlink" title="六、抽象类特点"></a>六、抽象类特点</h1><h2 id="1、抽象类特点"><a href="#1、抽象类特点" class="headerlink" title="1、抽象类特点"></a>1、抽象类特点</h2><ul><li>抽象类和抽象方法必须用abstract关键字修饰<ul><li>格式</li><li>abstract class 类名 {}</li><li>public abstract void eat();    //注意：没有{}</li></ul></li><li>抽象类不一定有抽象方法，有抽象方法的类一定是抽象类</li><li>抽象类不能实例化<ul><li>那么，抽象类如何实例化呢?</li><li>按照多态的方式，由具体的子类实例化。其实这也是多态的一种，抽象类多态</li></ul></li><li>抽象类的子类<ul><li>要么是抽象类</li><li>要么为普通类，但必须重写抽象类中的所有抽象方法</li></ul></li></ul><h1 id="七、抽象类的成员特点"><a href="#七、抽象类的成员特点" class="headerlink" title="七、抽象类的成员特点"></a>七、抽象类的成员特点</h1><h2 id="1、成员变量"><a href="#1、成员变量" class="headerlink" title="1、成员变量"></a>1、成员变量</h2><ul><li>可以是变量</li><li>也可以是常量</li></ul><h2 id="2、构造方法"><a href="#2、构造方法" class="headerlink" title="2、构造方法"></a>2、构造方法</h2><ul><li>有构造方法，但是不能实例化</li><li>那么，构造方法的作用是什么呢?<ul><li>用于子类访问父类数据的初始化</li></ul></li></ul><h2 id="3、成员方法"><a href="#3、成员方法" class="headerlink" title="3、成员方法"></a>3、成员方法</h2><ul><li>可以有抽象方法 限定子类必须完成某些动作</li><li>也可以有非抽象方法 提高代码复用性</li></ul><h1 id="八、抽象类练习"><a href="#八、抽象类练习" class="headerlink" title="八、抽象类练习"></a>八、抽象类练习</h1><h2 id="1、猫狗案例"><a href="#1、猫狗案例" class="headerlink" title="1、猫狗案例"></a>1、猫狗案例</h2><ul><li>具体事物：猫，狗</li><li>共性：姓名，年龄，吃饭</li></ul><h2 id="2、学生案例"><a href="#2、学生案例" class="headerlink" title="2、学生案例"></a>2、学生案例</h2><ul><li>具体事务：基础班学员，高级班学员</li><li>共性：姓名，年龄，班级，学习，吃饭</li></ul><h1 id="九、抽象类的几个问题"><a href="#九、抽象类的几个问题" class="headerlink" title="九、抽象类的几个问题"></a>九、抽象类的几个问题</h1><h2 id="1、一个类如果没有抽象方法，可不可以定义为抽象类-如果可以，有什么意义"><a href="#1、一个类如果没有抽象方法，可不可以定义为抽象类-如果可以，有什么意义" class="headerlink" title="1、一个类如果没有抽象方法，可不可以定义为抽象类?如果可以，有什么意义?"></a>1、一个类如果没有抽象方法，可不可以定义为抽象类?如果可以，有什么意义?</h2><h2 id="2、abstract不能和哪些关键字共存"><a href="#2、abstract不能和哪些关键字共存" class="headerlink" title="2、abstract不能和哪些关键字共存"></a>2、abstract不能和哪些关键字共存</h2><ul><li>private    冲突</li><li>final    冲突    </li><li>static    冲突无意义</li></ul><h1 id="十、案例"><a href="#十、案例" class="headerlink" title="十、案例"></a>十、案例</h1><p>DuoTaiTest1.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">看程序写结果:先判断有没有问题，如果没有，写出结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"fu show"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"zi show"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"zi method"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiTest1</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">f.method(); <span class="comment">// 报错，找不到符号</span></span><br><span class="line">f.show();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>DuoTaiTest2.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">看程序写结果:先判断有没有问题，如果没有，写出结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">show2();</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"楚雄"</span>);</span><br><span class="line">}</span><br><span class="line">    <span class="comment">//如果把A中的show2()注释了，便会报错，因为a.show()会调用show2()，此时已然是多态的执行原则，会先看A里是否有show2()</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>{</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public void show() {</span></span><br><span class="line"><span class="comment">show2();</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//注意：B是有show()方法的！因为B继承了A</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"师范"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">super</span>.show();</span><br><span class="line">}</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"学院"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuoTaiTest2</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">A a = <span class="keyword">new</span> B();</span><br><span class="line">a.show();</span><br><span class="line"></span><br><span class="line">B b = <span class="keyword">new</span> C();</span><br><span class="line">b.show();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">师范</span></span><br><span class="line"><span class="comment">学院</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>DuoTaiDemo.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多态的前提：</span></span><br><span class="line"><span class="comment">A:有继承关系。</span></span><br><span class="line"><span class="comment">B:有方法重写。</span></span><br><span class="line"><span class="comment">C:有父类引用指向子类对象。</span></span><br><span class="line"><span class="comment">父 f =  new 子();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">多态中的成员访问特点：</span></span><br><span class="line"><span class="comment">A:成员变量</span></span><br><span class="line"><span class="comment">编译看左边，运行看左边。</span></span><br><span class="line"><span class="comment">B:成员方法</span></span><br><span class="line"><span class="comment">编译看左边，运行看右边。</span></span><br><span class="line"><span class="comment">C:静态方法</span></span><br><span class="line"><span class="comment">编译看左边，运行看左边。</span></span><br><span class="line"><span class="comment">(静态和类相关，不能算重写，因此，运行还是看左边)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show Fu"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"function Fu"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show Zi"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"method zi"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"function Zi"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiDemo</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">//有父类引用指向子类对象。</span></span><br><span class="line"><span class="comment">//父 f =  new 子();</span></span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">System.out.println(f.num);</span><br><span class="line"><span class="comment">//找不到符号</span></span><br><span class="line"><span class="comment">//System.out.println(f.num2);</span></span><br><span class="line"></span><br><span class="line">f.show();</span><br><span class="line"><span class="comment">//找不到符号</span></span><br><span class="line"><span class="comment">//f.method();</span></span><br><span class="line">f.function();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">100</span></span><br><span class="line"><span class="comment">show Zi</span></span><br><span class="line"><span class="comment">function Fu</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>DuoTaiDemo2.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多态的好处：提高了代码的扩展性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"sleep"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">System.out.println(<span class="string">"狗吃肉"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"狗站着睡觉"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"猫趴着睡觉"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pig</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"猪吃白菜"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"猪侧着睡"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//针对动物操作的工具类，无论增加多少种动物，useAnimal方法的代码均不用修改，可以自适应（扩展性）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalTool</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">AnimalTool</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useAnimal</span><span class="params">(Animal a)</span> </span>{</span><br><span class="line">a.eat();</span><br><span class="line">a.sleep();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiDemo2</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">Cat c2 = <span class="keyword">new</span> Cat();</span><br><span class="line">Cat c3 = <span class="keyword">new</span> Cat();</span><br><span class="line">AnimalTool.useAnimal(c);</span><br><span class="line">AnimalTool.useAnimal(c2);</span><br><span class="line">AnimalTool.useAnimal(c3);</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">Dog d2 = <span class="keyword">new</span> Dog();</span><br><span class="line">Dog d3 = <span class="keyword">new</span> Dog();</span><br><span class="line">AnimalTool.useAnimal(d);</span><br><span class="line">AnimalTool.useAnimal(d2);</span><br><span class="line">AnimalTool.useAnimal(d3);</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Pig p = <span class="keyword">new</span> Pig();</span><br><span class="line">Pig p2 = <span class="keyword">new</span> Pig();</span><br><span class="line">Pig p3 = <span class="keyword">new</span> Pig();</span><br><span class="line">AnimalTool.useAnimal(p);</span><br><span class="line">AnimalTool.useAnimal(p2);</span><br><span class="line">AnimalTool.useAnimal(p3);</span><br><span class="line">System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">猫吃鱼</span></span><br><span class="line"><span class="comment">猫趴着睡觉</span></span><br><span class="line"><span class="comment">猫吃鱼</span></span><br><span class="line"><span class="comment">猫趴着睡觉</span></span><br><span class="line"><span class="comment">猫吃鱼</span></span><br><span class="line"><span class="comment">猫趴着睡觉</span></span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"><span class="comment">狗吃肉</span></span><br><span class="line"><span class="comment">狗站着睡觉</span></span><br><span class="line"><span class="comment">狗吃肉</span></span><br><span class="line"><span class="comment">狗站着睡觉</span></span><br><span class="line"><span class="comment">狗吃肉</span></span><br><span class="line"><span class="comment">狗站着睡觉</span></span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"><span class="comment">猪吃白菜</span></span><br><span class="line"><span class="comment">猪侧着睡</span></span><br><span class="line"><span class="comment">猪吃白菜</span></span><br><span class="line"><span class="comment">猪侧着睡</span></span><br><span class="line"><span class="comment">猪吃白菜</span></span><br><span class="line"><span class="comment">猪侧着睡</span></span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>DuoTaiDemo3.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多态的弊端：不能使用子类的特有功能。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show fu"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show zi"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"method zi"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiDemo3</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">f.show();</span><br><span class="line">f.method(); <span class="comment">// 报错，不能使用子类特有的功能</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>DuoTaiDemo4.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多态中想使用子类的特有功能怎么办？</span></span><br><span class="line"><span class="comment">A:创建子类对象调用方法即可。(可以，但是不恰当，而且创建对象会浪费内存空间)</span></span><br><span class="line"><span class="comment">B:把父类的引用强制转换为子类的引用。(向下转型)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对象间的转型问题：</span></span><br><span class="line"><span class="comment">向上转型：</span></span><br><span class="line"><span class="comment">Fu f = new Zi();</span></span><br><span class="line"><span class="comment">向下转型：</span></span><br><span class="line"><span class="comment">Zi z = (Zi)f; //要求该f必须是能够转换为Zi的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show fu"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show zi"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"method zi"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiDemo4</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Fu f = <span class="keyword">new</span> Zi();</span><br><span class="line">f.show();</span><br><span class="line"><span class="comment">//f.method();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建子类对象</span></span><br><span class="line"><span class="comment">//Zi z = new Zi();</span></span><br><span class="line"><span class="comment">//z.show();</span></span><br><span class="line"><span class="comment">//z.method();</span></span><br><span class="line"></span><br><span class="line">Zi z = (Zi)f; <span class="comment">// 向下转型</span></span><br><span class="line">z.show();</span><br><span class="line">z.method();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">show zi</span></span><br><span class="line"><span class="comment">show zi</span></span><br><span class="line"><span class="comment">method zi</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>DuoTaiDemo5.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ClassCastException:类型转换异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookDoor</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>{</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DuoTaiDemo5</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">Animal a = <span class="keyword">new</span> Dog();</span><br><span class="line">Dog d = (Dog)a;  <span class="comment">// 正确转型</span></span><br><span class="line"></span><br><span class="line">a = <span class="keyword">new</span> Cat();</span><br><span class="line">Cat c = (Cat)a; <span class="comment">// 正确转型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//a的本质是猫类对象，不能转为狗类的引用</span></span><br><span class="line">Dog dd = (Dog)a; <span class="comment">//ClassCastException</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>PolymorphicDemo1.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   A</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   B</span></span><br><span class="line"><span class="comment">  / \</span></span><br><span class="line"><span class="comment"> C   D</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. a1.show(b), A类中有两个show方法，但是都不能完全匹配，寻找父类引用为参数的方法，因此，只能调用public String show(A obj)，输出"AA"</span></span><br><span class="line"><span class="comment">2. a1.show(c), A类中有两个show方法，但是都不能完全匹配，寻找父类引用为参数的方法，因此，只能调用public String show(A obj)，输出"AA"</span></span><br><span class="line"><span class="comment">3. a1.show(d), A类中有两个show方法，public String show(D obj)可以完全匹配，因此，输出"AD"</span></span><br><span class="line"><span class="comment">4. a2.show(b), 共有A类的public String show(D obj)、public String show(A obj)和B类的public String show(A obj)三个方法可供调用，</span></span><br><span class="line"><span class="comment">   根据多态原则，优先考虑B类中的public String show(A obj)方法，但该方法不能完全匹配。接下来，在父类中寻找是否有完全匹配的方法，但父类中的两个方法也不能完全匹配。</span></span><br><span class="line"><span class="comment">   最后，再次到B类中寻找是否有次优匹配的方法，B类中的public String show(A obj)方法可以实现次优匹配，因此，输出"BA"</span></span><br><span class="line"><span class="comment">   (调用顺序：先看本类中有无完全匹配的方法；如果没有，再到父类中看有无完全匹配的方法；如果没有，再次回到本类中看有无次优匹配的方法；如果没有，最后再到父类中看有无次优匹配的方法。)</span></span><br><span class="line"><span class="comment">5. 和4保持一致</span></span><br><span class="line"><span class="comment">6. a2.show(d), 共有A类的public String show(D obj)、public String show(A obj)和B类的public String show(A obj)三个方法可供使用，</span></span><br><span class="line"><span class="comment">根据多态原则，优先考虑B类中的public String show(A obj)方法，但该方法不能完全匹配。接下来，在父类中寻找是否有完全匹配的方法，父类中的public String show(D obj)方法可以完全匹配，输出"AD"</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">8. 注意次优匹配中的优先级，最近原则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and D"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"A and A"</span>);</span><br><span class="line">    } </span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span> </span>{    <span class="comment">// 该方法在A类中找不到相同的声明，因此不算重写，是一个新的方法</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and B"</span>);</span><br><span class="line">    }    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>{    <span class="comment">// 该方法重写了A类的public String show(A obj)</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"B and A"</span>);</span><br><span class="line">    } </span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>{</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span> </span>{</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PolymorphicDemo1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        A a2 = <span class="keyword">new</span> B();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        D d = <span class="keyword">new</span> D();        </span><br><span class="line">        System.out.println(<span class="string">"1--"</span> + a1.show(b)); <span class="comment">// A and A</span></span><br><span class="line">        System.out.println(<span class="string">"2--"</span> + a1.show(c)); <span class="comment">// A and A</span></span><br><span class="line">        System.out.println(<span class="string">"3--"</span> + a1.show(d)); <span class="comment">// A and D</span></span><br><span class="line">        System.out.println(<span class="string">"4--"</span> + a2.show(b)); <span class="comment">// B and A </span></span><br><span class="line">        System.out.println(<span class="string">"5--"</span> + a2.show(c)); <span class="comment">// B and A</span></span><br><span class="line">        System.out.println(<span class="string">"6--"</span> + a2.show(d)); <span class="comment">// A and D</span></span><br><span class="line">        System.out.println(<span class="string">"7--"</span> + b.show(b));  <span class="comment">// B and B</span></span><br><span class="line">        System.out.println(<span class="string">"8--"</span> + b.show(c));  <span class="comment">// B and B</span></span><br><span class="line">        System.out.println(<span class="string">"9--"</span> + b.show(d));  <span class="comment">// A and D    </span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">1--A and A</span></span><br><span class="line"><span class="comment">2--A and A</span></span><br><span class="line"><span class="comment">3--A and D</span></span><br><span class="line"><span class="comment">4--B and A</span></span><br><span class="line"><span class="comment">5--B and A</span></span><br><span class="line"><span class="comment">6--A and D</span></span><br><span class="line"><span class="comment">7--B and B</span></span><br><span class="line"><span class="comment">8--B and B</span></span><br><span class="line"><span class="comment">9--A and D</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure><p>PolymorphicDemo2.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. </span></span><br><span class="line"><span class="comment">A a = new B(); </span></span><br><span class="line"><span class="comment">a.show(); </span></span><br><span class="line"><span class="comment">直接调用A类中的show()方法，首先输出"2019"，然后调用show2()方法</span></span><br><span class="line"><span class="comment">由于B类重写show2()方法，根据多态原则，执行B类中的show2()方法，输出"网络"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. </span></span><br><span class="line"><span class="comment">B b = new C();</span></span><br><span class="line"><span class="comment">b.show();  </span></span><br><span class="line"><span class="comment">B类中有一个show()方法（从A中继承），C类重写了show()方法，根据多态原则，先执行C类中的show()方法，输出"计科",</span></span><br><span class="line"><span class="comment">然后执行super.show()，查找父类B中没有show()方法，再到父类中的父类A中查找show()方法，输出"2019",</span></span><br><span class="line"><span class="comment">最后调用show2()方法，共有三个show2方法，根据多态原则，调用C类中的show2()方法，输出"数媒"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"2019"</span>);      </span><br><span class="line">show2();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"2018"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"网络"</span>);  </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"计科"</span>);</span><br><span class="line"><span class="keyword">super</span>.show();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"数媒"</span>); </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PolymorphicDemo2</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">A a = <span class="keyword">new</span> B(); </span><br><span class="line">a.show(); </span><br><span class="line"></span><br><span class="line">B b = <span class="keyword">new</span> C(); </span><br><span class="line">b.show();  </span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*结果：</span></span><br><span class="line"><span class="comment">2019</span></span><br><span class="line"><span class="comment">网络</span></span><br><span class="line"><span class="comment">计科</span></span><br><span class="line"><span class="comment">2019</span></span><br><span class="line"><span class="comment">数媒</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java类与对象及封装继承机制案例详解——Java小抄(5)</title>
      <link href="2020/12/23/Java-Supplement-5/"/>
      <url>2020/12/23/Java-Supplement-5/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java类与对象及封装继承机制案例详解——Java小抄-5-】"><a href="#【Java类与对象及封装继承机制案例详解——Java小抄-5-】" class="headerlink" title="【Java类与对象及封装继承机制案例详解——Java小抄(5)】"></a>【Java类与对象及封装继承机制案例详解——Java小抄(5)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、类与对象案例"><a href="#一、类与对象案例" class="headerlink" title="一、类与对象案例"></a>一、类与对象案例</h1><h2 id="1、大象装冰箱"><a href="#1、大象装冰箱" class="headerlink" title="1、大象装冰箱"></a>1、大象装冰箱</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">大象装冰箱</span></span><br><span class="line"><span class="comment">面向过程：（函数或方法）</span></span><br><span class="line"><span class="comment">1. 冰箱打开</span></span><br><span class="line"><span class="comment">2. 大象进入</span></span><br><span class="line"><span class="comment">3. 冰箱关闭</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">面向对象：（分类）</span></span><br><span class="line"><span class="comment">1. 几个类（主体）？ 2个，大象和冰箱</span></span><br><span class="line"><span class="comment">2. 方法分类</span></span><br><span class="line"><span class="comment">2.1 冰箱打开、冰箱关闭归入冰箱类</span></span><br><span class="line"><span class="comment">2.2 大象进入归入大象类</span></span><br><span class="line"><span class="comment">3. 类创建对象，对象调用方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 冰箱类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fridge</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"冰箱打开"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"冰箱关闭"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Elephant</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goin</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"大象进入"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">面向过程方法调用</span></span><br><span class="line"><span class="comment">open();</span></span><br><span class="line"><span class="comment">goin();</span></span><br><span class="line"><span class="comment">close();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先用类创建对象，然后用对象调用方法</span></span><br><span class="line">Fridge f1 = <span class="keyword">new</span> Fridge();</span><br><span class="line">Elephant e1 = <span class="keyword">new</span> Elephant();</span><br><span class="line"></span><br><span class="line">f1.open();</span><br><span class="line">e1.goin();</span><br><span class="line">f1.close();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"冰箱打开"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">goin</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"大象进入"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"冰箱关闭"</span>);</span><br><span class="line">}</span><br><span class="line">}    </span><br></pre></td></tr></tbody></table></figure><h2 id="2、张三与李四"><a href="#2、张三与李四" class="headerlink" title="2、张三与李四"></a>2、张三与李四</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"><span class="comment">// 静态的属性，变量表示</span></span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">String gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态的行为，方法表示</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(String name)</span> </span>{</span><br><span class="line">System.out.println(name + <span class="string">"要吃饭"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">(String name)</span> </span>{</span><br><span class="line">System.out.println(name + <span class="string">"要睡觉"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Person p1 = <span class="keyword">new</span> Person(); <span class="comment">// 人类创建对象p1</span></span><br><span class="line">Person p2 = p1; <span class="comment">// 对象p1增加新的引用p2(一个对象，两个名字)</span></span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(); <span class="comment">// 人类创建对象p3</span></span><br><span class="line"></span><br><span class="line">p1.name = <span class="string">"张三"</span>; <span class="comment">// 设置对象p1的姓名属性</span></span><br><span class="line">p1.age = <span class="number">18</span>; <span class="comment">// 设置对象p1的年龄属性</span></span><br><span class="line">p1.gender = <span class="string">"女"</span>; <span class="comment">// 设置对象p1的性别属性</span></span><br><span class="line"></span><br><span class="line">p3.name = <span class="string">"李四"</span>; <span class="comment">// 设置对象p3的姓名属性</span></span><br><span class="line">p3.age = <span class="number">19</span>; <span class="comment">// 设置对象p3的年龄属性</span></span><br><span class="line">p3.gender = <span class="string">"男"</span>; <span class="comment">// 设置对象p3的性别属性</span></span><br><span class="line"></span><br><span class="line">Person p4 = <span class="keyword">new</span> Person(); <span class="comment">// 人类创建对象p4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(p1.name); <span class="comment">// 输出对象p1的姓名</span></span><br><span class="line">System.out.println(p1.age); <span class="comment">// 输出对象p1的年龄</span></span><br><span class="line">System.out.println(p1.gender); <span class="comment">// 输出对象p1的性别</span></span><br><span class="line"></span><br><span class="line">p1.eat(p1.name); <span class="comment">// 调用对象p1的eat()方法</span></span><br><span class="line">p1.sleep(p1.name); <span class="comment">// 调用对象p1的sleep()方法</span></span><br><span class="line"></span><br><span class="line">System.out.println(p3.name);</span><br><span class="line">System.out.println(p3.age);</span><br><span class="line">System.out.println(p3.gender);</span><br><span class="line"></span><br><span class="line">p3.eat(p3.name); <span class="comment">// 调用对象p3的eat()方法</span></span><br><span class="line">p3.sleep(p3.name); <span class="comment">// 调用对象p3的sleep()方法</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">18</span><br><span class="line">女</span><br><span class="line">张三要吃饭</span><br><span class="line">张三要睡觉</span><br><span class="line">李四</span><br><span class="line">19</span><br><span class="line">男</span><br><span class="line">李四要吃饭</span><br><span class="line">李四要睡觉</span><br></pre></td></tr></tbody></table></figure><h2 id="3、内存图解"><a href="#3、内存图解" class="headerlink" title="3、内存图解"></a>3、内存图解</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201224015043698.jpg"></p><h2 id="4、手机类"><a href="#4、手机类" class="headerlink" title="4、手机类"></a>4、手机类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">手机类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneTest</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Phone p1 = <span class="keyword">new</span> Phone();<span class="comment">// 创建对象p1</span></span><br><span class="line">p1.color = <span class="string">"白色"</span>;<span class="comment">// 设置p1属性color</span></span><br><span class="line">p1.price = <span class="number">4999</span>;<span class="comment">// 设置p1属性price</span></span><br><span class="line">p1.brand = <span class="string">"苹果"</span>;  <span class="comment">// 设置p1属性brand</span></span><br><span class="line"></span><br><span class="line">Phone p2 = <span class="keyword">new</span> Phone();<span class="comment">// 创建对象p2</span></span><br><span class="line">p2.color = <span class="string">"黑色"</span>;</span><br><span class="line">p2.price = <span class="number">5999</span>;</span><br><span class="line">p2.brand = <span class="string">"华为"</span>;</span><br><span class="line"></span><br><span class="line">p1.showAll();</span><br><span class="line">p1.call();</span><br><span class="line">p1.sendMessage();</span><br><span class="line">p1.playGame();</span><br><span class="line">p2.showAll();</span><br><span class="line">p2.call();</span><br><span class="line">p2.sendMessage();</span><br><span class="line">p2.playGame();</span><br><span class="line">}</span><br><span class="line">}    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>{</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">String color;</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">String brand;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showAll</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// String brand = "小米"; // 局部变量brand</span></span><br><span class="line">System.out.println(<span class="string">"color = "</span> + color + <span class="string">", price = "</span> + price + <span class="string">", brand = "</span> + brand);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">System.out.println(brand + <span class="string">"手机打电话"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(brand + <span class="string">"手机发短信"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGame</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(brand + <span class="string">"手机玩游戏"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">color = 白色, price = 4999.0, brand = 苹果</span><br><span class="line">苹果手机打电话</span><br><span class="line">苹果手机发短信</span><br><span class="line">苹果手机玩游戏</span><br><span class="line">color = 黑色, price = 5999.0, brand = 华为</span><br><span class="line">华为手机打电话</span><br><span class="line">华为手机发短信</span><br><span class="line">华为手机玩游戏</span><br></pre></td></tr></tbody></table></figure><h2 id="5、内存图解"><a href="#5、内存图解" class="headerlink" title="5、内存图解"></a>5、内存图解</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201224015043429.jpg"></p><hr><h2 id="6、内存图补充"><a href="#6、内存图补充" class="headerlink" title="6、内存图补充"></a>6、内存图补充</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201224135900109.jpg"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020122413590096.jpg"></p><h1 id="二、成员变量与局部变量的区别"><a href="#二、成员变量与局部变量的区别" class="headerlink" title="二、成员变量与局部变量的区别"></a>二、成员变量与局部变量的区别</h1><h2 id="1、四个不同"><a href="#1、四个不同" class="headerlink" title="1、四个不同"></a>1、四个不同</h2><ul><li>1、在类中的位置不同<ul><li>成员变量 类中方法外</li><li>局部变量 方法内或者方法声明上（包括参数）</li></ul></li><li>2、在内存中的位置不同<ul><li>成员变量 堆内存</li><li>局部变量 栈内存</li></ul></li><li>3、生命周期不同<ul><li>成员变量 随着对象的存在而存在，随着对象的消失而消失</li><li>局部变量 随着方法的调用而存在，随着方法的调用完毕而消失</li></ul></li><li>4、初始化值不同<ul><li>成员变量 有默认的初始化值（除final修饰的局部变量）</li><li>局部变量 没有默认的初始化值，必须先定义，赋值，才能使用</li></ul></li></ul><h2 id="2、内存图解"><a href="#2、内存图解" class="headerlink" title="2、内存图解"></a>2、内存图解</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201224015042735.jpg"></p><h1 id="三、形式参数问题"><a href="#三、形式参数问题" class="headerlink" title="三、形式参数问题"></a>三、形式参数问题</h1><p>java中的方法可以传递参数，参数的传递方法就是<strong>值传递</strong></p><p>参数有形参和实参，定义方法时写的参数叫形参，真正调用方法时，传递的参数叫实参</p><p>调用方法时，会把实参传递给形参，方法内部其实是在使用形参（可以理解为实参的副本）</p><p>所谓值传递就是<strong>当参数是基本类型时，传递参数的值，比如传递i=10，真实传参时，是把10这个数值赋值给了形参</strong></p><p><strong>当参数是对象时，传递的是对象的值，也就是对象的首地址。就是把对象的地址赋值给形参</strong></p><h2 id="1、基本类型作为形式参数"><a href="#1、基本类型作为形式参数" class="headerlink" title="1、基本类型作为形式参数"></a>1、基本类型作为形式参数</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    此方法是错误的！原因：在没有实例Test类对象时，要调用该方法必须将其声明为static静态方法（类方法）</span></span><br><span class="line"><span class="comment">    public void fun(int a, int b) {</span></span><br><span class="line"><span class="comment">        a++;</span></span><br><span class="line"><span class="comment">        b++;</span></span><br><span class="line"><span class="comment">    }</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>{</span><br><span class="line">        a++;</span><br><span class="line">        b++;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"fun"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">        String sr = fun(a, b);</span><br><span class="line">        System.out.println(<span class="string">"a = "</span> + a + <span class="string">", "</span> + <span class="string">"b = "</span> + b + <span class="string">", "</span> + sr);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = 1, b = 2, fun</span><br></pre></td></tr></tbody></table></figure><h3 id="1-、方法的传参过程"><a href="#1-、方法的传参过程" class="headerlink" title="(1)、方法的传参过程"></a>(1)、方法的传参过程</h3><ul><li>1、main()方法是程序的入口，先分配实参变量的内存空间并初始化在栈中</li><li>2、调用fun()方法，为fun()方法的形参变量分配内存空间在栈中</li><li>3、将实参变量的数值赋值一份给对应的形参变量</li><li>4、执行fun()方法的方法体，执行完毕后释放形参变量的内存空间</li><li>5、main()方法得到fun()方法的返回值并继续向下执行</li><li>6、当main()执行完毕后，释放实参变量的内存空间</li></ul><h3 id="2-、内存图解"><a href="#2-、内存图解" class="headerlink" title="(2)、内存图解"></a>(2)、内存图解</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201224015040975.jpg"></p><h2 id="2、引用类型作为形式参数"><a href="#2、引用类型作为形式参数" class="headerlink" title="2、引用类型作为形式参数"></a>2、引用类型作为形式参数</h2><h3 id="1-、案例一"><a href="#1-、案例一" class="headerlink" title="(1)、案例一"></a>(1)、案例一</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">        i = <span class="number">200</span>;</span><br><span class="line">        System.out.println(<span class="string">"show方法中：i = "</span> + i);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">200</span>;</span><br><span class="line">        System.out.println(<span class="string">"show方法中：arr[0] = "</span> + arr[<span class="number">0</span>]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Test te = <span class="keyword">new</span> Test();</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        System.out.println(<span class="string">"main方法中：arr[0] = "</span> + arr[<span class="number">0</span>]);</span><br><span class="line">        te.show(arr);</span><br><span class="line">        System.out.println(<span class="string">"main方法中：arr[0] = "</span> + arr[<span class="number">0</span>]);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main方法中：arr[0] = 0</span><br><span class="line">show方法中：arr[0] = 200</span><br><span class="line">main方法中：arr[0] = 200</span><br></pre></td></tr></tbody></table></figure><h3 id="2-、内存图解-1"><a href="#2-、内存图解-1" class="headerlink" title="(2)、内存图解"></a>(2)、内存图解</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201224015043377.jpg"></p><h3 id="3-、案例二"><a href="#3-、案例二" class="headerlink" title="(3)、案例二"></a>(3)、案例二</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Jerry zjr = <span class="keyword">new</span> Jerry();</span><br><span class="line">        zjr.name = <span class="string">"zjr"</span>;</span><br><span class="line">        System.out.println(<span class="string">"main: "</span> + zjr.name);</span><br><span class="line">        pj(zjr);</span><br><span class="line">        System.out.println(<span class="string">"main: "</span> + zjr.name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pj</span><span class="params">(Jerry zjr)</span> </span>{</span><br><span class="line">        zjr.name = <span class="string">"Jerry"</span>;</span><br><span class="line">        System.out.println(<span class="string">"pj: "</span> + zjr.name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jerry</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main: zjr</span><br><span class="line">pj: Jerry</span><br><span class="line">main: Jerry</span><br></pre></td></tr></tbody></table></figure><h2 id="3、基本数据类型和引用数据类型作为参数的区别"><a href="#3、基本数据类型和引用数据类型作为参数的区别" class="headerlink" title="3、基本数据类型和引用数据类型作为参数的区别"></a>3、基本数据类型和引用数据类型作为参数的区别</h2><p>基本数据类型的变量中直接存放数据值本身，所以改的时候改的是数据值本身，而不是实参<br>但是引用类型不同的地方在于真正的数据并没有在<strong>栈区</strong>的变量中保存，而是在<strong>堆区</strong>里面保存着，虽然也有拷贝一份的过程，也有副本，但是二者指向的是同一块堆区</p><p>引用数据类型就好比如说，两位同学使用的是同一份复习资料，其中一人把资料撕毁了，另一人当然也会受到影响。<br>而基本数据类型就好比复印了一份，其中一人将自己的资料撕了，并不影响别人</p><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><ul><li>当使用<strong>基本数据类型</strong>作为方法的形参时，在方法体中对形参的修改<strong>不会</strong>影响到实参的数值</li><li>当使用<strong>引用数据类型</strong>作为方法的形参时，若在方法体中<strong>修改形参指向的数据内容</strong>，则会对实参变量的数值产生影响，因为形参变量和实参变量共享同一块堆区</li><li>当使用<strong>引用数据类型</strong>作为方法的形参时，若在方法体中<strong>修改形参变量的指向</strong>，此时不会对实参变量的数值产生影响，因为形参变量和实参变量分别指向不同的堆区</li></ul><h1 id="四、匿名对象"><a href="#四、匿名对象" class="headerlink" title="四、匿名对象"></a>四、匿名对象</h1><h2 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h2><ul><li>匿名对象：就是没有名字的对象<ul><li>是对象的一种简化表示形式</li></ul></li><li>匿名对象的两种使用情况<ul><li>对象调用方法仅仅一次的时候</li><li>作为实际参数传递</li></ul></li></ul><h2 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Car c1 = <span class="keyword">new</span> Car();            <span class="comment">//创建有名字的对象</span></span><br><span class="line">        c1.run();</span><br><span class="line">        c1.run();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Car().run();            <span class="comment">//匿名对象调用方法</span></span><br><span class="line">        <span class="keyword">new</span> Car().run();            <span class="comment">//匿名对象只适合对方法的一次调用,因为调用多次就会产生多个对象,不如用有名字的对象    </span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//匿名对象是否可以调用属性并赋值?有什么意义?</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        匿名对象可以调用属性,但是没有意义,因为调用后就变成垃圾</span></span><br><span class="line"><span class="comment">        如果需要赋值还是用有名字对象</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">new</span> Car().color = <span class="string">"red"</span>;</span><br><span class="line">        <span class="keyword">new</span> Car().num = <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">new</span> Car().run();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>{</span><br><span class="line">    String color;            <span class="comment">//颜色</span></span><br><span class="line">    <span class="keyword">int</span> num;                <span class="comment">//轮胎数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(color + <span class="string">"..."</span> + num);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3、使用方法"><a href="#3、使用方法" class="headerlink" title="3、使用方法"></a>3、使用方法</h2><h3 id="1-、-当对象对方法仅进行一次调用的时候，就可以简化成匿名对象"><a href="#1-、-当对象对方法仅进行一次调用的时候，就可以简化成匿名对象" class="headerlink" title="(1)、 当对象对方法仅进行一次调用的时候，就可以简化成匿名对象"></a>(1)、 当对象对方法仅进行一次调用的时候，就可以简化成匿名对象</h3><p>如一个对象需要进行调用方法2次，用匿名对象的</p><p>new Car().run()</p><p>new Car().run()</p><p>这是2个对象分别调用了run()，不是一个对象调用了多方法</p><h3 id="2-、-匿名对象可以作为实际参数进行传递"><a href="#2-、-匿名对象可以作为实际参数进行传递" class="headerlink" title="(2)、 匿名对象可以作为实际参数进行传递"></a>(2)、 匿名对象可以作为实际参数进行传递</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Car c)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line"><span class="comment">//......</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">show(<span class="keyword">new</span> Car());</span><br></pre></td></tr></tbody></table></figure><h3 id="3-、内存图解"><a href="#3-、内存图解" class="headerlink" title="(3)、内存图解"></a>(3)、内存图解</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Car().num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">new</span> Car().color = <span class="string">"green"</span>；</span><br><span class="line"><span class="keyword">new</span> Car().run();</span><br></pre></td></tr></tbody></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020122401504030.jpg"></p><p><strong>匿名对象执行完毕后，由于再无引用引用之，Java的自动回收机制会视作垃圾处理</strong></p><h1 id="五、封装的概念"><a href="#五、封装的概念" class="headerlink" title="五、封装的概念"></a>五、封装的概念</h1><h2 id="1、privated关键字"><a href="#1、privated关键字" class="headerlink" title="1、privated关键字"></a>1、privated关键字</h2><ul><li>private关键字：<ul><li>是一个权限修饰符</li><li>可以修饰成员(成员变量和成员方法)</li><li>被private修饰的成员只在本类中才能访问</li></ul></li><li>private最常见的应用：<ul><li>把成员变量用private修饰</li><li>提供对应的getXxx()/setXxx()方法</li></ul></li></ul><h2 id="2、封装概述"><a href="#2、封装概述" class="headerlink" title="2、封装概述"></a>2、封装概述</h2><ul><li>封装概述<ul><li>是指隐藏对象的属性和实现细节，仅对外提供公共访问方式</li></ul></li><li>好处：<ul><li>隐藏实现细节，提供公共的访问方式</li><li>提高了代码的复用性</li><li>提高安全性</li></ul></li><li>封装原则<ul><li>将不需要对外提供的内容都隐藏起来</li><li>把属性隐藏，提供公共方法对其访问</li></ul></li></ul><h2 id="3、this关键字"><a href="#3、this关键字" class="headerlink" title="3、this关键字"></a>3、this关键字</h2><ul><li>this:代表所在类的对象引用</li><li>记住：<ul><li>方法被哪个对象调用，this就代表那个对象</li></ul></li><li>什么时候使用this呢?<ul><li>局部变量隐藏成员变量</li></ul></li></ul><h2 id="4、构造方法"><a href="#4、构造方法" class="headerlink" title="4、构造方法"></a>4、构造方法</h2><ul><li>构造方法作用概述<ul><li>给对象的数据进行初始化</li></ul></li><li>构造方法格式<ul><li>方法名与类名相同</li><li>没有返回值类型，连void都没有</li><li>没有具体的返回值</li></ul></li><li>构造方法注意事项<ul><li>如果你不提供构造方法，系统会给出默认构造方法</li><li>如果你提供了构造方法，系统将不再提供默认构造方法（一般写带参构造方法的同时也要手动写一个无参构造方法）</li><li>构造方法也是可以重载的</li></ul></li></ul><h2 id="5、类的成员方法"><a href="#5、类的成员方法" class="headerlink" title="5、类的成员方法"></a>5、类的成员方法</h2><ul><li>成员方法其实就是我们前面讲过的方法</li><li>方法具体划分：<ul><li>根据返回值<ul><li>有明确返回值方法</li><li>返回void类型的方法</li></ul></li><li>根据形式参数<ul><li>无参方法</li><li>带参方法</li></ul></li></ul></li></ul><h2 id="6、一个基本类的标准代码写法"><a href="#6、一个基本类的标准代码写法" class="headerlink" title="6、一个基本类的标准代码写法"></a>6、一个基本类的标准代码写法</h2><ul><li>类<ul><li>成员变量</li><li>构造方法<ul><li>无参构造方法</li><li>带参构造方法</li></ul></li><li>成员方法<ul><li>getXxx()</li><li>setXxx()</li></ul></li></ul></li><li>给成员变量赋值的方式<ul><li>无参构造方法+setXxx()</li><li>带参构造方法</li></ul></li></ul><h2 id="7、类的加载及初始化过程"><a href="#7、类的加载及初始化过程" class="headerlink" title="7、类的加载及初始化过程"></a>7、类的加载及初始化过程</h2><h3 id="1-、Student-s-new-Student-在内存中做了哪些事情"><a href="#1-、Student-s-new-Student-在内存中做了哪些事情" class="headerlink" title="(1)、Student s = new Student(); 在内存中做了哪些事情?"></a>(1)、Student s = new Student(); 在内存中做了哪些事情?</h3><ul><li>加载Student.class文件进内存</li><li>如果有的话，执行静态代码块</li><li>在栈内存为s开辟空间</li><li>在堆内存为学生对象开辟空间</li><li>对学生对象的成员变量进行默认初始化</li><li>对学生对象的成员变量进行显示初始化</li><li>有过有的话按顺序执行构造代码块</li><li>通过构造方法对学生对象的成员变量赋值</li><li>学生对象初始化完毕，把对象地址赋值给s变量</li></ul><h3 id="2-、对象创建内存图解"><a href="#2-、对象创建内存图解" class="headerlink" title="(2)、对象创建内存图解"></a>(2)、对象创建内存图解</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201226000817194.png"></p><h3 id="3-、Java中类什么时候被加载？"><a href="#3-、Java中类什么时候被加载？" class="headerlink" title="(3)、Java中类什么时候被加载？"></a>(3)、Java中类什么时候被加载？</h3><p>假设，有一个公共类A。另外两个B、C类的内部都使用了A类，并且都new出了对象。现在有另外一个D类，其内部new出了B、C两类的实例。试分析他们分别在什么时候被JVM加载？</p><p><strong>第1步：公共类A</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Class A </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//静态初始化块</span></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"ClassA----我被加载了"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span>  String name = <span class="string">"xiaowang"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>第2步：B类（内部使用了A类）</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Class B </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"ClassB----我被加载了"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">private</span> ClassA classA;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myName</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"B方法---开始"</span>);</span><br><span class="line">        classA = <span class="keyword">new</span> ClassA();</span><br><span class="line">        System.out.println(<span class="string">"B方法---打印A的成员变量值："</span> + classA.getName());</span><br><span class="line">        System.out.println(<span class="string">"B方法---结束"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>第3步：C类（内部也使用了A类）</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassC</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Class B </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"ClassC----我被加载了"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ClassA classA = <span class="keyword">new</span> ClassA();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myName</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"C方法---开始"</span>);</span><br><span class="line">        System.out.println(<span class="string">"C方法---打印A的成员变量值："</span> + classA.getName());</span><br><span class="line">        System.out.println(<span class="string">"C方法---结束"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>到这里，问一下大家：B、C两个类有什么不一样的地方？BinGo，成员变量classA实例化的地方不一样，B是在方法中new出对象，C是定义成员变量引用的时候就new对象了。（咋一看，感觉没什么不一样，都是实例化，但是这里面蕴含了JVM的一个思想，那就是–JVM运行程序时，是用到该类的对象，才会去加载该类到方法区。如果方法区已经加载过该类了，不会再去加载该类）</p><p>注意一下：A、B、C 三个类都有一个静态初始化块，当一个类被加载的时候，块内的代码会得到执行。方便我们知道那个类被加载了。</p><p><strong>第4步：D类（D类使用了B、C两个类）</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DTest</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定义Class D </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> {</span><br><span class="line">            System.out.println(<span class="string">"ClassD----我被加载了"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//程序入口：</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">            <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">            ClassB classB = <span class="keyword">new</span> ClassB();</span><br><span class="line">            ClassC classC = <span class="keyword">new</span> ClassC();</span><br><span class="line">            classB.myName();</span><br><span class="line">            classC.myName();</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><strong>我们先来运行一下程序，打印一下结果：看看是怎么样的</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ClassD----我被加载了</span><br><span class="line">ClassB----我被加载了</span><br><span class="line">ClassC----我被加载了</span><br><span class="line">ClassA----我被加载了</span><br><span class="line">B方法---开始</span><br><span class="line">B方法---打印A的成员变量值：xiaowang</span><br><span class="line">B方法---结束</span><br><span class="line">C方法---开始</span><br><span class="line">C方法---打印A的成员变量值：xiaowang</span><br><span class="line">C方法---结束</span><br></pre></td></tr></tbody></table></figure><p>下面我们一步步把D的程序来肢解。</p><p><strong>1、如下代码，我们在程序入口里面，只实例化B类，并不执行B类实例的myName()方法。那么请问，ClassA会被加载吗？</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DTest</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定义Class D </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> {</span><br><span class="line">            System.out.println(<span class="string">"ClassD----我被加载了"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//程序入口：</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">            ClassB classB = <span class="keyword">new</span> ClassB();</span><br><span class="line">            <span class="comment">//注意：我们注释掉了，下面这个语句。</span></span><br><span class="line">            <span class="comment">//classB.myName();</span></span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>答案是：ClassA不会被加载。运行一下看看结果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassD----我被加载了</span><br><span class="line">ClassB----我被加载了</span><br></pre></td></tr></tbody></table></figure><p><strong>2、同样的情况，我们在程序入口里面，只实例化C类，那么请问，ClassA会不会被加载呢？</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DTest</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定义Class D </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> {</span><br><span class="line">            System.out.println(<span class="string">"ClassD----我被加载了"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//程序入口：</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            ClassC classC = <span class="keyword">new</span> ClassC();</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>我们运行一下看看结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ClassD----我被加载了</span><br><span class="line">ClassC----我被加载了</span><br><span class="line">ClassA----我被加载了</span><br></pre></td></tr></tbody></table></figure><p>咦，为什么这次ClassA 会被加载了呢？对比一下，发现B、C两个类，在声明成员变量 classA的时候，B类中只是声明了一个引用变量–classA，并没给它赋值。只在方法被使用的时候，才new对象，而C类是声明后，直接new出对象赋值。所以A类会被加载。这也正好符合了java的特点，使用时，再加载。</p><p><strong>3、那么如果D类只使用了B类，什么情况下，A类会被JVM 加载到方法区呢？我们来做下面这个实验</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DTest</span> </span>{</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 定义Class D </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">static</span> {</span><br><span class="line">            System.out.println(<span class="string">"ClassD----我被加载了"</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//程序入口：</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">            ClassB classB = <span class="keyword">new</span> ClassB();</span><br><span class="line"></span><br><span class="line">            classB.myName();</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p><strong>运行一下，结果如下：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ClassD—-我被加载了 </span><br><span class="line">ClassB—-我被加载了 </span><br><span class="line">B方法—开始 </span><br><span class="line">ClassA—-我被加载了 </span><br><span class="line">B方法—打印A的成员变量值：xiaowang </span><br><span class="line">B方法—结束</span><br></pre></td></tr></tbody></table></figure><p>从结果中，可以看出，ClassA的加载，是在B的实例方法，被调用的时候，才去加载。<br>总结一下，本文的中心思想是讲了，一个类什么时候会被JVM加载。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201226000816349.png"></p><h2 id="8、static关键字"><a href="#8、static关键字" class="headerlink" title="8、static关键字"></a>8、static关键字</h2><p><strong>可以修饰成员变量和成员方法</strong></p><ul><li>static关键字特点<ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>被类的所有对象共享<ul><li>这也是我们判断是否使用静态关键字的条件</li></ul></li><li>可以通过类名调用</li></ul></li><li>static关键字注意事项<ul><li>在静态方法中是没有this关键字的</li><li>静态方法只能访问静态的成员变量和静态的成员方法</li></ul></li></ul><h2 id="9、静态变量和成员变量的区别"><a href="#9、静态变量和成员变量的区别" class="headerlink" title="9、静态变量和成员变量的区别"></a>9、静态变量和成员变量的区别</h2><ul><li>所属不同<ul><li>静态变量属于类，所以也称为为类变量</li><li>成员变量属于对象，所以也称为实例变量(对象变量)</li></ul></li><li>内存中位置不同<ul><li>静态变量存储于方法区的静态区</li><li>成员变量存储于堆内存</li></ul></li><li>内存出现时间不同<ul><li>静态变量随着类的加载而加载，随着类的消失而消失</li><li>成员变量随着对象的创建而存在，随着对象的消失而消失</li></ul></li><li>调用不同<ul><li>静态变量可以通过类名调用，也可以通过对象调用</li><li>成员变量只能通过对象名调用</li></ul></li></ul><h2 id="10、main方法是静态的"><a href="#10、main方法是静态的" class="headerlink" title="10、main方法是静态的"></a>10、main方法是静态的</h2><ul><li>public static void main(String[] args) {}<ul><li>public 被jvm调用，访问权限足够大</li><li>static 被jvm调用，不用创建对象，直接类名访问</li><li>void被jvm调用，不需要给jvm返回值</li><li>main 一个通用的名称，虽然不是关键字，但是被jvm识别</li><li>String[] args 以前用于接收键盘录入的</li></ul></li></ul><h2 id="11、代码块"><a href="#11、代码块" class="headerlink" title="11、代码块"></a>11、代码块</h2><ul><li>代码块<ul><li>在Java中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块</li><li>局部代码块 <ul><li>在方法中出现；限定变量生命周期，及早释放，提高内存利用率</li></ul></li><li>构造代码块 <ul><li>在类中方法外出现；多个构造方法方法中相同的代码存放到一起，每次调用构造都执行，并且在构造方法前执行</li></ul></li><li>静态代码块 在类中方法外出现，加了static修饰<ul><li>在类中方法外出现，并加上static修饰；用于给类进行初始化，在加载的时候就执行，<strong>并且值执行一次</strong></li></ul></li></ul></li></ul><h3 id="1-、区别分析"><a href="#1-、区别分析" class="headerlink" title="(1)、区别分析"></a>(1)、区别分析</h3><ul><li>静态代码块<ul><li>对类的数据进行初始化（最先执行，且只执行一次！）</li></ul></li><li>构造代码块<ul><li>为对象的数据进行初始化，降低构造方法的冗余度（优先于构造方法执行，构造代码块的位置不受构造方法的影响，多个构造代码块按先后顺序执行）</li></ul></li><li>构造方法<ul><li>为对象的数据进行初始化</li></ul></li></ul><h3 id="2-、继承中的代码块和构造方法的执行顺序探索"><a href="#2-、继承中的代码块和构造方法的执行顺序探索" class="headerlink" title="(2)、继承中的代码块和构造方法的执行顺序探索"></a>(2)、继承中的代码块和构造方法的执行顺序探索</h3><p>本文讲述有关一个类的静态代码块，构造代码块，构造方法的执行流程问题。首先来看一个例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"执行Person静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line">        System.out.println(<span class="string">"执行Person构造代码块"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"执行Person构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"执行Student静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line">        System.out.println(<span class="string">"执行Student构造代码块"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"执行Student构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsStaticConstruct</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>{</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行的结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">执行Person静态代码块</span><br><span class="line">执行Student静态代码块</span><br><span class="line">执行Person构造代码块</span><br><span class="line">执行Person构造方法</span><br><span class="line">执行Student构造代码块</span><br><span class="line">执行Student构造方法</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></tbody></table></figure><p><strong>说明程序的执行顺序是：</strong></p><p>静态代码块 －－－》   构造代码块 －－－－》  构造方法</p><p><strong>执行流程解释：</strong><br>　　new的是Student类，但是Student是继承子Person类，所以在加载Student类时先要加载Person类，而静态的内容是随着类的加载而加载的，所以先打印“执行Person静态代码块”，后执行Student的静态代码块。</p><p>　　加载完类后，开始走main方法，执行Student构造方法上，即初始化Student，但是Student是继承自Person，必须先初始化Person，所以先调用Person类的空参构造方法进行初始化，但是Person类的构造代码块优先于构造方法执行，所以Person类的构造代码块先执行，构造方法后执行。然后再执行Student类的构造代码块和构造方法。</p><p>　　<strong>这里的执行顺序同子类构造中有一个默认的父类构造super()无关，不是执行到隐藏的super()才开始初始化父类的，类的初始化是分层初始化，即先初始化父类，再初始化子类，初始化每个类的过程中，进行类的初始化工作，先进性成员变量的初始化，成员变量的初始化顺序是：默认初始化，即int为0这种－－》显示初始化，例如给int型显示初始化了值－－》构造方法初始化，所以是这里执行到了构造方法。</strong></p><p>   <strong>但是一定要注意，父类初始化选择的构造方法却和子类中super 选择的构造相关，下面代码很好的解释了这点。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"执行Person静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    {</span><br><span class="line">        System.out.println(<span class="string">"执行Person构造代码块"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"执行Person无参构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"执行Person构造方法"</span> + name);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> {</span><br><span class="line">        System.out.println(<span class="string">"执行Student静态代码块"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    {</span><br><span class="line">        System.out.println(<span class="string">"执行Student构造代码块"</span>);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        System.out.println(<span class="string">"执行Student构造方法"</span> + name);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        System.out.println(<span class="string">"执行Student无参构造方法"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsStaticConstruct</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>{</span><br><span class="line">        Student student1 = <span class="keyword">new</span> Student(<span class="string">"lili"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        Student student2 = <span class="keyword">new</span> Student();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">执行Person静态代码块</span><br><span class="line">执行Student静态代码块</span><br><span class="line">执行Person构造代码块</span><br><span class="line">执行Person构造方法lili</span><br><span class="line">执行Student构造代码块</span><br><span class="line">执行Student构造方法lili</span><br><span class="line">--------------------</span><br><span class="line">执行Person构造代码块</span><br><span class="line">执行Person无参构造方法</span><br><span class="line">执行Student构造代码块</span><br><span class="line">执行Student无参构造方法</span><br><span class="line"> </span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></tbody></table></figure><h1 id="六、继承的概念"><a href="#六、继承的概念" class="headerlink" title="六、继承的概念"></a>六、继承的概念</h1><h2 id="1、继承概述"><a href="#1、继承概述" class="headerlink" title="1、继承概述"></a>1、继承概述</h2><ul><li>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可</li><li>通过extends关键字可以实现类与类的继承<ul><li>class 子类名 extends 父类名 {} </li></ul></li><li>单独的这个类称为父类，基类或者超类；这多个类可以称为子类或者派生类</li><li>有了继承以后，我们定义一个类的时候，可以在一个已经存在的类的基础上，还可以定义自己的新成员</li></ul><h2 id="2、继承的好处"><a href="#2、继承的好处" class="headerlink" title="2、继承的好处"></a>2、继承的好处</h2><ul><li><p>案例演示</p><ul><li>案例1：学生类和老师。定义两个功能(吃饭，睡觉)</li><li>案例2：加入人类后改进</li></ul></li><li><p>继承的好处</p><ul><li>提高了代码的复用性<ul><li>多个类相同的成员可以放到同一个类中</li></ul></li><li>提高了代码的维护性<ul><li>如果功能的代码需要修改，修改一处即可</li></ul></li><li>让类与类之间产生了关系，是多态的前提<ul><li>其实这是继承的一个弊端：类的耦合性很强</li></ul></li></ul></li></ul><h2 id="3、Java中继承的特点"><a href="#3、Java中继承的特点" class="headerlink" title="3、Java中继承的特点"></a>3、Java中继承的特点</h2><ul><li><p>Java只支持单继承，不支持多继承</p><ul><li>一个类只能有一个父类，不可以有多个父类</li><li>class SubDemo extends Demo{} //ok</li><li>class SubDemo extends Demo1,Demo2…//error</li></ul></li><li><p>Java支持多层继承(继承体系)</p><ul><li>class A{}</li><li>class B extends A{}</li><li>class C extends B{}</li></ul></li></ul><h2 id="4、Java中继承的注意事项"><a href="#4、Java中继承的注意事项" class="headerlink" title="4、Java中继承的注意事项"></a>4、Java中继承的注意事项</h2><ul><li>子类只能继承父类所有非私有的成员(成员方法和成员变量)<ul><li>这体现了继承的另一个弊端：打破了封装性</li></ul></li><li>子类不能继承父类的构造方法，但是可以通过super关键字去访问父类构造方法</li><li>不要为了部分功能而去继承</li><li>什么时候使用继承?<ul><li>继承中类之间体现的是：”is a”的关系</li></ul></li></ul><h2 id="5、继承中成员变量的关系"><a href="#5、继承中成员变量的关系" class="headerlink" title="5、继承中成员变量的关系"></a>5、继承中成员变量的关系</h2><ul><li>案例演示<ul><li>子父类中同名和不同名的成员变量</li></ul></li><li>结论：<ul><li>在子类方法中访问一个变量<ul><li>首先在子类局部范围找</li><li>然后在子类成员范围找</li><li>最后在父类成员范围找(不能访问到父类局部范围)</li><li>如果还是没有就报错(不考虑父亲的父亲…)</li></ul></li></ul></li></ul><h2 id="6、super关键字"><a href="#6、super关键字" class="headerlink" title="6、super关键字"></a>6、super关键字</h2><ul><li>super的用法和this很像<ul><li>this代表本类对象的引用</li><li>super代表父类对象存储空间的标识(可以简单理解为父类对象的引用)</li></ul></li><li>用法(this和super均可如下使用)<ul><li>访问成员变量<ul><li>this.成员变量        super.成员变量</li></ul></li><li>访问构造方法<ul><li>this(…)        super(…)</li></ul></li><li>访问成员方法<ul><li>this.成员方法()        super.成员方法()</li></ul></li></ul></li></ul><h2 id="7、继承中构造方法的关系"><a href="#7、继承中构造方法的关系" class="headerlink" title="7、继承中构造方法的关系"></a>7、继承中构造方法的关系</h2><ul><li><p>子类中所有的构造方法默认都会访问父类中空参数的构造方法</p></li><li><p>为什么呢?</p><ul><li>因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化。</li><li>每一个构造方法的第一条语句默认都是：super()</li></ul></li><li><p>如果父类中没有空参的构造方法，该怎么办呢?</p><ul><li>子类通过super去显示调用父类其他的带参的构造方法</li><li>子类通过this去调用本类的其他构造方法<ul><li>本类其他构造也必须首先访问了父类构造</li></ul></li><li>一定要注意：super(…)或者this(….)必须出现在第一条语句中,而且不能同时出现，否则就会出现父类数据的多次初始化问题。</li></ul></li></ul><h2 id="8、继承中成员方法的关系"><a href="#8、继承中成员方法的关系" class="headerlink" title="8、继承中成员方法的关系"></a>8、继承中成员方法的关系</h2><ul><li><p>案例演示</p><ul><li>子父类中同名和不同名的成员方法</li></ul></li><li><p>结论：</p><ul><li>通过子类对象去访问一个方法<ul><li>首先在子类中找</li><li>然后在父类中找</li><li>如果还是没有就报错。(不考虑父亲的父亲…)</li></ul></li></ul></li><li><p>方法重写概述</p><ul><li>子类中出现了和父类方法声明一致的方法，也被称为方法覆盖，方法复写</li><li>使用特点：<ul><li>如果方法名不同，就调用对应的方法</li><li>如果方法名相同，最终使用的是子类自己的</li></ul></li></ul></li><li><p>方法重写的应用：</p><ul><li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容</li></ul></li><li><p>方法重写的注意事项</p><ul><li>父类中私有方法不能被重写</li><li>子类重写父类方法时，访问权限不能更低</li><li>父类静态方法，子类也必须通过静态方法进行重写。(其实这样不算方法重写)</li></ul></li><li><p>方法重写和方法重载的区别?方法重载能改变返回值类型吗? </p><ul><li>Overload</li><li>Override</li></ul></li><li><p>this关键字和super关键字分别代表什么? 以及他们各自的使用场景和作用</p></li></ul><h2 id="9、案例"><a href="#9、案例" class="headerlink" title="9、案例"></a>9、案例</h2><p><strong>ExtendsDemo1.java</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承概述：</span></span><br><span class="line"><span class="comment">把多个类中相同的内容给提取出来定义到一个类中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何实现继承呢?</span></span><br><span class="line"><span class="comment">Java提供了关键字：extends</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">class 子类名 extends 父类名 {}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">好处：</span></span><br><span class="line"><span class="comment">A:提高了代码的复用性</span></span><br><span class="line"><span class="comment">B:提高了代码的维护性</span></span><br><span class="line"><span class="comment">C:让类与类之间产生了关系，是多态的前提</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用继承前</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Student {</span></span><br><span class="line"><span class="comment">public void eat() {</span></span><br><span class="line"><span class="comment">System.out.println("吃饭");</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public void sleep() {</span></span><br><span class="line"><span class="comment">System.out.println("睡觉");</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class Teacher {</span></span><br><span class="line"><span class="comment">public void eat() {</span></span><br><span class="line"><span class="comment">System.out.println("吃饭");</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public void sleep() {</span></span><br><span class="line"><span class="comment">System.out.println("睡觉");</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用继承后</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"吃饭"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"睡觉"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Student s = <span class="keyword">new</span> Student();</span><br><span class="line">s.eat();</span><br><span class="line">s.sleep();</span><br><span class="line">System.out.println(<span class="string">"----------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">t.eat();</span><br><span class="line">t.sleep();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo2.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Java中继承的特点：</span></span><br><span class="line"><span class="comment">A:Java只支持单继承，不支持多继承。</span></span><br><span class="line"><span class="comment">有些语言是支持多继承，格式：extends 类1,类2,...</span></span><br><span class="line"><span class="comment">B:Java支持多层继承(继承体系)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Father {}</span></span><br><span class="line"><span class="comment">class Mother {}</span></span><br><span class="line"><span class="comment">class Son exnteds Father {} //正确</span></span><br><span class="line"><span class="comment">class Son extends Father, Mother {} // 错误</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GrandFather</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"爷爷"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">GrandFather</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"父亲"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>{}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo2</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line">s.method(); <span class="comment">//使用父亲的方法</span></span><br><span class="line">s.show(); <span class="comment">//使用爷爷的方法</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo3.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">继承的注意事项：</span></span><br><span class="line"><span class="comment">A:子类只能继承父类所有非私有的成员(成员方法和成员变量)</span></span><br><span class="line"><span class="comment">B:子类不能继承父类的构造方法，但是可以通过super关键字去访问父类的构造方法。</span></span><br><span class="line"><span class="comment">C:不要为了部分功能而去继承</span></span><br><span class="line"><span class="comment">class A {</span></span><br><span class="line"><span class="comment">public void show1() {}</span></span><br><span class="line"><span class="comment">public void show2() {}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class B {</span></span><br><span class="line"><span class="comment">public void show2() {}</span></span><br><span class="line"><span class="comment">public void show3() {}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class B extends A {</span></span><br><span class="line"><span class="comment">public void show3() {}</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">这样定义不好，因为类B不但有了show2()方法,还多了show1()方法，可能show1()方法不是类B所需的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">继承其实体现的是一种关系："is a"。</span></span><br><span class="line"><span class="comment">Person</span></span><br><span class="line"><span class="comment">Student</span></span><br><span class="line"><span class="comment">Teacher</span></span><br><span class="line"><span class="comment">水果</span></span><br><span class="line"><span class="comment">苹果</span></span><br><span class="line"><span class="comment">香蕉</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">包含关系可以考虑使用继承。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">10</span>; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有方法，子类不能继承</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(num2);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(num);</span><br><span class="line">System.out.println(num2);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//System.out.println(num); //子类不能继承父类的私有成员变量</span></span><br><span class="line">System.out.println(num2);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo3</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="comment">//s.method(); //子类不能继承父类的私有成员方法</span></span><br><span class="line">s.show();</span><br><span class="line">s.function();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo4.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">子类中的成员变量和父类中的成员变量名称不一样，直接使用该变量。</span></span><br><span class="line"><span class="comment">子类中的成员变量和父类中的成员变量名称一样，如何使用？</span></span><br><span class="line"><span class="comment">a:在子类方法的局部范围找，有就使用</span></span><br><span class="line"><span class="comment">b:在子类的成员范围找，有就使用</span></span><br><span class="line"><span class="comment">c:在父类的成员范围找，有就使用</span></span><br><span class="line"><span class="comment">d:如果还找不到，就报错。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">50</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">40</span>;</span><br><span class="line">System.out.println(num);  <span class="comment">// 40</span></span><br><span class="line">System.out.println(num2); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 找不到符号</span></span><br><span class="line"><span class="comment">// System.out.println(num3);</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo4</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line">s.show();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo5.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">this和super的区别?</span></span><br><span class="line"><span class="comment">this代表本类对应的引用。</span></span><br><span class="line"><span class="comment">super代表父类存储空间的标识(可以理解为父类对象的引用)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如何使用this和super?</span></span><br><span class="line"><span class="comment">A:调用成员变量</span></span><br><span class="line"><span class="comment">this.成员变量   调用本类的成员变量</span></span><br><span class="line"><span class="comment">super.成员变量  调用父类的成员变量</span></span><br><span class="line"><span class="comment">B:调用构造方法</span></span><br><span class="line"><span class="comment">this(...)    调用本类的构造方法</span></span><br><span class="line"><span class="comment">super(...)    调用父类的构造方法</span></span><br><span class="line"><span class="comment">C:调用成员方法</span></span><br><span class="line"><span class="comment">this.成员方法   调用本类的成员方法</span></span><br><span class="line"><span class="comment">super.成员方法  调用父类的成员方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">System.out.println(num); <span class="comment">//  调用局部变量num</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.num);  <span class="comment">// 调用Son类的成员变量num</span></span><br><span class="line">System.out.println(<span class="keyword">super</span>.num); <span class="comment">// 调用Father类的成员变量num</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo5</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line">s.show();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo6.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为什么子类中所有的构造方法默认都会访问父类中空参数的构造方法？</span></span><br><span class="line"><span class="comment">因为子类会继承父类中的数据，可能还会使用父类的数据。</span></span><br><span class="line"><span class="comment">所以，子类初始化之前，一定要先完成父类数据的初始化。</span></span><br><span class="line"><span class="comment">注意：子类所有构造方法的第一条语句默认都是：super();</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"Father的无参构造方法"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(String name)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"Father的带参构造方法"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line">System.out.println(<span class="string">"Son的无参构造方法"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(String name)</span> </span>{</span><br><span class="line"><span class="comment">//super();</span></span><br><span class="line">System.out.println(<span class="string">"Son的带参构造方法"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo6</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line">System.out.println(<span class="string">"---------------------------------"</span>);</span><br><span class="line">Son s2 = <span class="keyword">new</span> Son(<span class="string">"张三"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo7.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果父类没有无参构造方法，那么子类的构造方法会出现什么现象呢? 报错。</span></span><br><span class="line"><span class="comment">如何解决?</span></span><br><span class="line"><span class="comment">A:在父类中加一个无参构造方法</span></span><br><span class="line"><span class="comment">B:通过使用super关键字去显示的调用父类的带参构造方法</span></span><br><span class="line"><span class="comment">C:子类通过this去调用本类的其他构造方法</span></span><br><span class="line"><span class="comment">子类中一定要有一个构造方法去访问父类的构造方法，否则父类数据就没有初始化。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">this(...)或者super(...)必须出现在第一条语句上。</span></span><br><span class="line"><span class="comment">如果不是放在第一条语句上，就可能对父类的数据进行了多次初始化，所以必须放在第一条语句上。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public Father() {</span></span><br><span class="line"><span class="comment">System.out.println("Father的无参构造方法");</span></span><br><span class="line"><span class="comment">}</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(String name)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"Father的带参构造方法"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(<span class="string">"随便给"</span>);</span><br><span class="line">System.out.println(<span class="string">"Son的无参构造方法"</span>);</span><br><span class="line"><span class="comment">//super("随便给");</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(String name)</span> </span>{</span><br><span class="line"><span class="comment">//super("随便给");</span></span><br><span class="line"><span class="keyword">this</span>();</span><br><span class="line">System.out.println(<span class="string">"Son的带参构造方法"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo7</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Son s1 = <span class="keyword">new</span> Son();</span><br><span class="line">System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">Son s2 = <span class="keyword">new</span> Son(<span class="string">"李四"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo8.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">子类中的方法和父类中的方法声明不一样，直接调用。</span></span><br><span class="line"><span class="comment">子类中的方法和父类中的方法声明一样，如何调用?</span></span><br><span class="line"><span class="comment">a:先看子类中是否有该方法，有就使用。</span></span><br><span class="line"><span class="comment">b:再看父类中是否有该方法，有就使用。</span></span><br><span class="line"><span class="comment">c:如果没有就报错。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show Father"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"method Son"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"show Son"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo8</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Son s = <span class="keyword">new</span> Son();</span><br><span class="line">s.show();</span><br><span class="line">s.method();</span><br><span class="line"><span class="comment">//s.fucntion(); //找不到符号</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo9.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">方法重写：子类中出现了和父类中方法声明一模一样的方法。</span></span><br><span class="line"><span class="comment">方法重载：</span></span><br><span class="line"><span class="comment">本类中出现的方法名一样，参数列表不同的方法。与返回值无关。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">子类对象调用方法的时，先找子类本身，再找父类(就近原则)。</span></span><br><span class="line"><span class="comment">方法重写的应用：</span></span><br><span class="line"><span class="comment">当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法。</span></span><br><span class="line"><span class="comment">这样，即沿袭了父类的功能，又定义了子类特有的内容。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"给"</span>+name+<span class="string">"打电话"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String name)</span> </span>{</span><br><span class="line"><span class="comment">//System.out.println("给"+name+"打电话");</span></span><br><span class="line"><span class="keyword">super</span>.call(name);</span><br><span class="line">System.out.println(<span class="string">"可以听天气预报了"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsDemo9</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">NewPhone np = <span class="keyword">new</span> NewPhone();</span><br><span class="line">np.call(<span class="string">"王五"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo10.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">看程序写结果：</span></span><br><span class="line"><span class="comment">A:成员变量就近原则</span></span><br><span class="line"><span class="comment">B:this和super的问题</span></span><br><span class="line"><span class="comment">this访问本类的成员</span></span><br><span class="line"><span class="comment">super访问父类的成员</span></span><br><span class="line"><span class="comment">C:子类构造方法执行前默认先执行父类的无参构造方法</span></span><br><span class="line"><span class="comment">D:一个类的初始化过程</span></span><br><span class="line"><span class="comment">成员变量进行初始化</span></span><br><span class="line"><span class="comment">默认初始化</span></span><br><span class="line"><span class="comment">显示初始化</span></span><br><span class="line"><span class="comment">构造方法初始化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果：</span></span><br><span class="line"><span class="comment">fu</span></span><br><span class="line"><span class="comment">zi</span></span><br><span class="line"><span class="comment">30</span></span><br><span class="line"><span class="comment">20</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"fu"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"zi"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">30</span>;</span><br><span class="line">System.out.println(num); <span class="comment">//30</span></span><br><span class="line">System.out.println(<span class="keyword">this</span>.num); <span class="comment">//20</span></span><br><span class="line">System.out.println(<span class="keyword">super</span>.num); <span class="comment">//10</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsTest1</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">z.show();</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo11.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A:一个类的静态代码块,构造代码块,构造方法的执行流程</span></span><br><span class="line"><span class="comment">静态代码块 &gt; 构造代码块 &gt; 构造方法</span></span><br><span class="line"><span class="comment">B:静态的内容是随着类的加载而加载</span></span><br><span class="line"><span class="comment">静态代码块的内容会优先执行</span></span><br><span class="line"><span class="comment">C:子类初始化之前先会进行父类的初始化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">结果是：</span></span><br><span class="line"><span class="comment">静态代码块Fu</span></span><br><span class="line"><span class="comment">静态代码块Zi</span></span><br><span class="line"><span class="comment">构造代码块Fu</span></span><br><span class="line"><span class="comment">构造方法Fu</span></span><br><span class="line"><span class="comment">构造代码块Zi</span></span><br><span class="line"><span class="comment">构造方法Zi</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="keyword">static</span> {</span><br><span class="line">System.out.println(<span class="string">"静态代码块Fu"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">System.out.println(<span class="string">"构造代码块Fu"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Fu</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"构造方法Fu"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>{</span><br><span class="line"><span class="keyword">static</span> {</span><br><span class="line">System.out.println(<span class="string">"静态代码块Zi"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line">System.out.println(<span class="string">"构造代码块Zi"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Zi</span><span class="params">()</span> </span>{</span><br><span class="line">System.out.println(<span class="string">"构造方法Zi"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtendsTest2</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Zi z = <span class="keyword">new</span> Zi();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>ExtendsDemo12.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">new Z(); 创建一个Z类对象;</span></span><br><span class="line"><span class="comment">由于Z类继承自X类，因此，先初始化父类数据(super());</span></span><br><span class="line"><span class="comment">先对成员变量初始化，即：Y b = new Y();</span></span><br><span class="line"><span class="comment">初始化Y类对象，执行Y类的构造方法，输出"Y";</span></span><br><span class="line"><span class="comment">执行X类的构造方法，输出"X";</span></span><br><span class="line"><span class="comment">接下来，初始化Z类对象，先对成员变量初始化，即：Y y = new Y();</span></span><br><span class="line"><span class="comment">初始化Y类对象，执行Y类的构造方法，输出"Y";</span></span><br><span class="line"><span class="comment">执行Z类的构造方法，输出"Z"</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">执行流程：</span></span><br><span class="line"><span class="comment">1. super(), 初始化父类数据</span></span><br><span class="line"><span class="comment">1.1 成员变量默认初始化   b = null</span></span><br><span class="line"><span class="comment">1.2 成员变量显示初始化 b = new Y(),    显示"Y"</span></span><br><span class="line"><span class="comment">1.3 调用构造方法X() X(), 显示"X"</span></span><br><span class="line"><span class="comment">2. new Z(), 初始化子类数据</span></span><br><span class="line"><span class="comment">2.1 成员变量默认初始化   b = null</span></span><br><span class="line"><span class="comment">2.2 成员变量显示初始化 b = new Y(),    显示"Y"</span></span><br><span class="line"><span class="comment">2.3 调用构造方法Z() Z(), 显示"Z" </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>{</span><br><span class="line">Y b = <span class="keyword">new</span> Y(); <span class="comment">// 2. 执行完毕后，输出一个"Y"</span></span><br><span class="line">    </span><br><span class="line">X() { <span class="comment">// 3. 执行完毕后，输出一个"X"</span></span><br><span class="line">System.out.print(<span class="string">"X"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> </span>{</span><br><span class="line">Y() {</span><br><span class="line">System.out.print(<span class="string">"Y"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">extends</span> <span class="title">X</span> </span>{</span><br><span class="line">Y y = <span class="keyword">new</span> Y();  <span class="comment">// 4. 执行完毕后，输出一个"Y"</span></span><br><span class="line"></span><br><span class="line">Z() {</span><br><span class="line"><span class="keyword">super</span>(); <span class="comment">// 跳过该行代码，因为父类数据已初始化，该行代码不按照顺序执行</span></span><br><span class="line">System.out.print(<span class="string">"Z"</span>); <span class="comment">// 5. 输出一个"Z"</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="keyword">new</span> Z(); <span class="comment">// 1.</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 42行代码说明： 一个子类对象出现以前，必须保证父类数据已存在并被初始化</span></span><br></pre></td></tr></tbody></table></figure><h1 id="七、this-super-详解"><a href="#七、this-super-详解" class="headerlink" title="七、this super 详解"></a>七、this super 详解</h1><h2 id="1、this"><a href="#1、this" class="headerlink" title="1、this"></a>1、this</h2><p>this 是自身的一个对象，代表对象本身，可以理解为：<strong>指向对象本身的一个指针</strong></p><p>this 的用法在 Java 中大体可以分为3种：</p><p><strong>1.普通的直接引用</strong></p><p>这种就不用讲了，this 相当于是指向当前对象本身</p><p><strong>2.形参与成员名字重名，用 this 来区分：</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line">    System.out.println(<span class="string">"初始化年龄："</span>+age);</span><br><span class="line">}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Person Harry = <span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"Harry's age is "</span> + Harry.GetAge(<span class="number">12</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初始化年龄：10</span><br><span class="line">Harry's age is 12</span><br></pre></td></tr></tbody></table></figure><p>可以看到，这里 age 是 GetAge 成员方法的形参，this.age 是 Person 类的成员变量</p><p><strong>3.引用构造函数</strong></p><p>这个和 super 放在一起讲，见下面</p><h2 id="2、super"><a href="#2、super" class="headerlink" title="2、super"></a>2、super</h2><p>super 可以理解为是指向自己超（父）类对象的一个指针，而这个超类指的是离自己最近的一个父类</p><p>super 也有三种用法：</p><p><strong>1.普通的直接引用</strong></p><p>与 this 类似，super 相当于是指向当前对象的父类，这样就可以用 <strong>super.xxx</strong> 来引用父类的成员</p><p><strong>2.子类中的成员变量或方法与父类中的成员变量或方法同名</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span> </span>{</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>{</span><br><span class="line">       name = <span class="string">"China"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">extends</span> <span class="title">Country</span> </span>{</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">value</span><span class="params">()</span> </span>{</span><br><span class="line">    name = <span class="string">"Shanghai"</span>;</span><br><span class="line">    <span class="keyword">super</span>.value();      <span class="comment">//调用父类的方法</span></span><br><span class="line">    System.out.println(name);</span><br><span class="line">    System.out.println(<span class="keyword">super</span>.name);</span><br><span class="line">    }</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">       City c = <span class="keyword">new</span> City();</span><br><span class="line">       c.value();</span><br><span class="line">       }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Shanghai</span><br><span class="line">China</span><br></pre></td></tr></tbody></table></figure><p>可以看到，这里既调用了父类的方法，也调用了父类的变量。若不调用父类方法 value()，只调用父类变量 name 的话，则父类 name 值为默认值 null</p><p><strong>3.引用构造函数</strong></p><ul><li>**super(参数)**：调用父类中的某一个构造函数（应该为构造函数中的第一条语句）</li><li>**this(参数)**：调用本类中另一种形式的构造函数（应该为构造函数中的第一条语句）</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{ </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prt</span><span class="params">(String s)</span> </span>{ </span><br><span class="line">       System.out.println(s); </span><br><span class="line">    } </span><br><span class="line">   </span><br><span class="line">    Person() { </span><br><span class="line">       prt(<span class="string">"父类·无参数构造方法： "</span> + <span class="string">"A Person."</span>); </span><br><span class="line">    }<span class="comment">//构造方法(1) </span></span><br><span class="line">    </span><br><span class="line">    Person(String name) { </span><br><span class="line">       prt(<span class="string">"父类·含一个参数的构造方法： "</span> + <span class="string">"A person's name is "</span> + name); </span><br><span class="line">    }<span class="comment">//构造方法(2) </span></span><br><span class="line">} </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>{ </span><br><span class="line">    Chinese() { </span><br><span class="line">       <span class="keyword">super</span>(); <span class="comment">// 调用父类构造方法（1） </span></span><br><span class="line">       prt(<span class="string">"子类·调用父类"</span>无参数构造方法<span class="string">"： "</span> + <span class="string">"A chinese coder."</span>); </span><br><span class="line">    } </span><br><span class="line">    </span><br><span class="line">    Chinese(String name) { </span><br><span class="line">       <span class="keyword">super</span>(name);<span class="comment">// 调用父类具有相同形参的构造方法（2） </span></span><br><span class="line">       prt(<span class="string">"子类·调用父类"</span>含一个参数的构造方法<span class="string">"： "</span> + <span class="string">"his name is "</span> + name); </span><br><span class="line">    } </span><br><span class="line">    </span><br><span class="line">    Chinese(String name, <span class="keyword">int</span> age) { </span><br><span class="line">       <span class="keyword">this</span>(name);<span class="comment">// 调用具有相同形参的构造方法（3） </span></span><br><span class="line">       prt(<span class="string">"子类：调用子类具有相同形参的构造方法：his age is "</span> + age); </span><br><span class="line">    } </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{ </span><br><span class="line">       Chinese cn = <span class="keyword">new</span> Chinese(); </span><br><span class="line">       cn = <span class="keyword">new</span> Chinese(<span class="string">"codersai"</span>); </span><br><span class="line">       cn = <span class="keyword">new</span> Chinese(<span class="string">"codersai"</span>, <span class="number">18</span>); </span><br><span class="line">    } </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">父类·无参数构造方法： A Person.</span><br><span class="line">子类·调用父类”无参数构造方法“： A chinese coder.</span><br><span class="line">父类·含一个参数的构造方法： A person's name is codersai</span><br><span class="line">子类·调用父类”含一个参数的构造方法“： his name is codersai</span><br><span class="line">父类·含一个参数的构造方法： A person's name is codersai</span><br><span class="line">子类·调用父类”含一个参数的构造方法“： his name is codersai</span><br><span class="line">子类：调用子类具有相同形参的构造方法：his age is 18</span><br></pre></td></tr></tbody></table></figure><p>从本例可以看到，可以用 super 和 this 分别调用父类的构造方法和本类中其他形式的构造方法</p><p>例子中 Chinese 类第三种构造方法调用的是本类中第二种构造方法，而第二种构造方法是调用父类的，因此也要先调用父类的构造方法，再调用本类中第二种，最后是重写第三种构造方法</p><h2 id="3、super-和-this-的异同"><a href="#3、super-和-this-的异同" class="headerlink" title="3、super 和 this 的异同"></a>3、super 和 this 的异同</h2><ul><li>super(参数)：调用基类中的某一个构造函数（应该为构造函数中的第一条语句）</li><li>this(参数)：调用本类中另一种形成的构造函数（应该为构造函数中的第一条语句）</li><li>super:　它引用当前对象的直接父类中的成员（用来访问直接父类中被隐藏的父类中成员数据或函数，基类与派生类中有相同成员定义时如：super.变量名 super.成员函数据名（实参） this：它代表当前对象名（在程序中易产生二义性之处，应使用 this 来指明当前对象；如果函数的形参与类中的成员数据同名，这时需用 this 来指明成员变量名）</li><li>调用super()必须写在子类构造方法的第一行，否则编译不通过。每个子类构造方法的第一条语句，都是隐含地调用 super()，如果父类没有这种形式的构造函数，那么在编译的时候就会报错</li><li>super() 和 this() 类似,区别是，super() 从子类中调用父类的构造方法，this() 在同一类内调用其它方法</li><li>super() 和 this() 均需放在构造方法内第一行</li><li>尽管可以用this调用一个构造器，但却不能调用两个</li><li>this 和 super 不能同时出现在一个构造函数里面，因为this必然会调用其它的构造函数，其它的构造函数必然也会有 super 语句的存在，所以在同一个构造函数里面有相同的语句，就失去了语句的意义，编译器也不会通过</li><li>this() 和 super() 都指的是对象，所以，均不可以在 static 环境中使用。包括：static 变量,static 方法，static 语句块</li><li>从本质上讲，this 是一个指向本对象的指针, 然而 super 是一个 Java 关键字</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 类 </tag>
            
            <tag> 对象 </tag>
            
            <tag> 封装 </tag>
            
            <tag> 继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常量与变量总结——Java小抄(4)</title>
      <link href="2020/12/23/Java-Supplement-4/"/>
      <url>2020/12/23/Java-Supplement-4/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java常量与变量总结——Java小抄-4-】"><a href="#【Java常量与变量总结——Java小抄-4-】" class="headerlink" title="【Java常量与变量总结——Java小抄(4)】"></a>【Java常量与变量总结——Java小抄(4)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、Java常量"><a href="#一、Java常量" class="headerlink" title="一、Java常量"></a>一、Java常量</h1><h2 id="1、常量概述"><a href="#1、常量概述" class="headerlink" title="1、常量概述"></a>1、常量概述</h2><ul><li><p><strong>在程序执行的过程中其值不可以发生改变！</strong></p><h2 id="2、常量的类型"><a href="#2、常量的类型" class="headerlink" title="2、常量的类型"></a>2、常量的类型</h2></li><li><p><strong>字符串常量：</strong>用双引号括起来的内容</p><ul><li>“Hello”</li></ul></li><li><p><strong>整数常量：</strong>所有整数</p><ul><li>12, 23</li></ul></li><li><p><strong>小数常量：</strong>所有小数</p><ul><li>12.34, 56.78</li></ul></li><li><p><strong>字符常量：</strong>用单引号括起来的单字符</p><ul><li>‘a’, ’A’, ’0’</li></ul></li><li><p><strong>布尔常量：</strong>true和false</p></li><li><p><strong>空常量：</strong>null</p><p><strong>补充：</strong></p><p><strong>Java针对整数常量提供了4种表现形式</strong></p><ul><li>二进制</li><li>八进制</li><li>十进制</li><li>十六进制</li></ul><p><strong>进制概述</strong><br>进制：就是进位制，是人们规定的一种进位方法。 对于任何一种进制–X进制，就表示某一位置上的数运算时是逢X进一位。二进制就是逢二进一，八进制是逢八进一，十进制是逢十进一，十六进制是逢十六进一。</p><p><strong>不同进制的数据组成</strong></p><ul><li>二进制<br>由0, 1组成。以0b开头</li><li>八进制<br>由0, 1, …7组成。以0开头</li><li>十进制<br>由0, 1, …9组成。整数默认是十进制的</li><li>十六进制<br>由0, 1, …9, a, b, c, d, e, f(大小写均可)。以0x开头</li></ul><p><strong>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示</strong></p><ul><li>当使用字面量的时候，前缀 <strong>0</strong> 表示 8 进制，而前缀 <strong>0x</strong> 代表 16 进制, 例如：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> decimal = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> octal = <span class="number">0144</span>;</span><br><span class="line"><span class="keyword">int</span> hexa =  <span class="number">0x64</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>常量在程序运行时是不能被修改的</strong></p><p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.1415927</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量</strong></p><p><strong>字面量可以赋给任何内置类型的变量。</strong>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">68</span>;</span><br><span class="line"><span class="keyword">char</span> a = <span class="string">'A'</span></span><br></pre></td></tr></tbody></table></figure><p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Hello World"</span></span><br><span class="line"><span class="string">"two\nlines"</span></span><br><span class="line"><span class="string">"\"This is in quotes\""</span></span><br></pre></td></tr></tbody></table></figure><p>字符串常量和字符常量都可以包含任何Unicode字符。例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> a = <span class="string">'\u0001'</span>;</span><br><span class="line">String a = <span class="string">"\u0001"</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>Java语言支持一些特殊的转义字符序列</strong></p><table><thead><tr><th align="center">符号</th><th align="center">字符含义</th></tr></thead><tbody><tr><td align="center">\n</td><td align="center">换行 (0x0a)</td></tr><tr><td align="center">\r</td><td align="center">回车 (0x0d)</td></tr><tr><td align="center">\f</td><td align="center">换页符(0x0c)</td></tr><tr><td align="center">\b</td><td align="center">退格 (0x08)</td></tr><tr><td align="center">\0</td><td align="center">空字符 (0x0)</td></tr><tr><td align="center">\s</td><td align="center">空格 (0x20)</td></tr><tr><td align="center">\t</td><td align="center">制表符</td></tr><tr><td align="center">"</td><td align="center">双引号</td></tr><tr><td align="center">'</td><td align="center">单引号</td></tr><tr><td align="center">\</td><td align="center">反斜杠</td></tr><tr><td align="center">\ddd</td><td align="center">八进制字符 (ddd)</td></tr><tr><td align="center">\uxxxx</td><td align="center">16进制Unicode字符 (xxxx)</td></tr></tbody></table><h1 id="二、Java变量"><a href="#二、Java变量" class="headerlink" title="二、Java变量"></a>二、Java变量</h1><h2 id="1、Java-变量类型"><a href="#1、Java-变量类型" class="headerlink" title="1、Java 变量类型"></a>1、Java 变量类型</h2><p>在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type identifier [ = value][, identifier [= value] ...];</span><br></pre></td></tr></tbody></table></figure><p>格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。</p><p>以下列出了一些变量的声明实例。注意有些包含了初始化过程（注意：<strong>局部变量、final 修饰的实例变量，必须初始化后才能使用，否则报错！</strong>）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a, b, c;         <span class="comment">// 声明三个int型整数：a、 b、c</span></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">3</span>, e = <span class="number">4</span>, f = <span class="number">5</span>; <span class="comment">// 声明三个整数并赋予初值</span></span><br><span class="line"><span class="keyword">byte</span> z = <span class="number">22</span>;         <span class="comment">// 声明并初始化 z</span></span><br><span class="line">String s = <span class="string">"runoob"</span>;  <span class="comment">// 声明并初始化字符串 s</span></span><br><span class="line"><span class="keyword">double</span> pi = <span class="number">3.14159</span>; <span class="comment">// 声明了双精度浮点型变量 pi</span></span><br><span class="line"><span class="keyword">char</span> x = <span class="string">'x'</span>;        <span class="comment">// 声明变量 x 的值是字符 'x'</span></span><br></pre></td></tr></tbody></table></figure><p>Java语言支持的变量类型有：</p><ul><li><strong>类变量：</strong>独立于方法之外的变量，用 static 修饰。</li><li><strong>实例变量：</strong>独立于方法之外的变量，不过没有 static 修饰。</li><li><strong>局部变量：</strong>类的方法中的变量。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Variable</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> allClicks = <span class="number">0</span>;    <span class="comment">// 类变量</span></span><br><span class="line"> </span><br><span class="line">    String str = <span class="string">"hello world"</span>;  <span class="comment">// 实例变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>{</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">// 局部变量</span></span><br><span class="line"> </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="2、Java-局部变量"><a href="#2、Java-局部变量" class="headerlink" title="2、Java 局部变量"></a>2、Java 局部变量</h2><ul><li>局部变量声明在方法、构造方法或者语句块中；</li><li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li><li>访问修饰符不能用于局部变量；</li><li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li><li>局部变量是在栈上分配的。</li><li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{ </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pupAge</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">      age = age + <span class="number">7</span>;</span><br><span class="line">      System.out.println(<span class="string">"小狗的年龄是: "</span> + age);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      Test test = <span class="keyword">new</span> Test();</span><br><span class="line">      test.pupAge();</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上实例编译运行结果如下:</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小狗的年龄是: 7</span><br></pre></td></tr></tbody></table></figure><p>在下面的例子中 age 变量没有初始化，所以在编译时会出错：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.runoob.test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{ </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pupAge</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">int</span> age;</span><br><span class="line">      age = age + <span class="number">7</span>;</span><br><span class="line">      System.out.println(<span class="string">"小狗的年龄是 : "</span> + age);</span><br><span class="line">   }</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      Test test = <span class="keyword">new</span> Test();</span><br><span class="line">      test.pupAge();</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上实例编译运行结果如下:</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test.java:4:variable number might not have been initialized</span><br><span class="line">age = age + 7;</span><br><span class="line">         ^</span><br><span class="line">1 error</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="3、Java-实例变量"><a href="#3、Java-实例变量" class="headerlink" title="3、Java 实例变量"></a>3、Java 实例变量</h2><ul><li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li><li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li><li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li><li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li><li>实例变量可以声明在使用前或者使用后；</li><li>访问修饰符可以修饰实例变量；</li><li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li><li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li><li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>Employee.java 文件代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>{</span><br><span class="line">   <span class="comment">// 这个实例变量对子类可见</span></span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line">   <span class="comment">// 私有变量，仅在该类可见</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line">   <span class="comment">//在构造器中对name赋值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Employee</span> <span class="params">(String empName)</span> </span>{</span><br><span class="line">      name = empName;</span><br><span class="line">   }</span><br><span class="line">   <span class="comment">//设定salary的值</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSalary</span><span class="params">(<span class="keyword">double</span> empSal)</span> </span>{</span><br><span class="line">      salary = empSal;</span><br><span class="line">   }  </span><br><span class="line">   <span class="comment">// 打印信息</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmp</span><span class="params">()</span> </span>{</span><br><span class="line">      System.out.println(<span class="string">"名字 : "</span> + name);</span><br><span class="line">      System.out.println(<span class="string">"薪水 : "</span> + salary);</span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">      Employee empOne = <span class="keyword">new</span> Employee(<span class="string">"RUNOOB"</span>);</span><br><span class="line">      empOne.setSalary(<span class="number">1000.0</span>);</span><br><span class="line">      empOne.printEmp();</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上实例编译运行结果如下:</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ javac Employee.java </span><br><span class="line">$ java Employee</span><br><span class="line">名字 : RUNOOB</span><br><span class="line">薪水 : 1000.0</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="4、Java-类变量（静态变量）"><a href="#4、Java-类变量（静态变量）" class="headerlink" title="4、Java 类变量（静态变量）"></a>4、Java 类变量（静态变量）</h2><ul><li><p>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</p></li><li><p>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</p></li><li><p>静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</p></li><li><p>静态变量储存在静态存储区。经常被声明为常量，很少单独使用 static 声明变量。</p></li><li><p>静态变量在第一次被访问时创建，在程序结束时销毁。</p></li><li><p>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</p></li><li><p>默认值和实例变量相似。数值型变量默认值是 0，布尔型默认值是 false，引用类型默认值是 null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</p></li><li><p>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</p></li><li><p>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致。</p></li><li><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p></li><li><p><strong>final 变量：</strong></p><p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。<strong>被 final 修饰的实例变量必须显式指定初始值。</strong></p><p>final修饰局部变量</p><ul><li>在方法内部，该变量不可以被改变</li><li>在方法声明上，分为基本类型和引用类型作为参数的情况<ul><li>基本类型，是值不能被改变</li><li>引用类型，是地址值不能被改变</li></ul></li><li>final修饰变量的初始化时机<ul><li><strong>在对象构造完毕前即可</strong></li></ul></li></ul><p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p><p>例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 下面是声明常量的实例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOXWIDTH = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String TITLE = <span class="string">"Manager"</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">()</span> </span>{</span><br><span class="line">     value = <span class="number">12</span>; <span class="comment">//将输出一个错误</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>Employee.java 文件代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>{</span><br><span class="line">    <span class="comment">//salary是静态的私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> salary;</span><br><span class="line">    <span class="comment">// DEPARTMENT是一个常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEPARTMENT = <span class="string">"开发人员"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    salary = <span class="number">10000</span>;</span><br><span class="line">        System.out.println(DEPARTMENT+<span class="string">"平均工资:"</span> + salary);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上实例编译运行结果如下:</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开发人员平均工资:10000.0</span><br></pre></td></tr></tbody></table></figure><p><strong>注意：</strong>如果其他类想要访问该变量，可以这样访问：<strong>Employee.DEPARTMENT</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 常量 </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数据类型及其转换——Java小抄(3)</title>
      <link href="2020/12/22/Java-Supplement-3/"/>
      <url>2020/12/22/Java-Supplement-3/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java数据类型及其转换——Java小抄-3-】"><a href="#【Java数据类型及其转换——Java小抄-3-】" class="headerlink" title="【Java数据类型及其转换——Java小抄(3)】"></a>【Java数据类型及其转换——Java小抄(3)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="Java两大类数据类型"><a href="#Java两大类数据类型" class="headerlink" title="Java两大类数据类型"></a>Java两大类数据类型</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/2020122301404133.png"></p><h1 id="一、内置数据类型（基本数据类型）"><a href="#一、内置数据类型（基本数据类型）" class="headerlink" title="一、内置数据类型（基本数据类型）"></a>一、内置数据类型（基本数据类型）</h1><p>Java语言提供了<strong>八种基本类型：</strong></p><ul><li>四种整数类型</li><li>两种浮点类型</li><li>一种字符类型</li><li>一种布尔型</li></ul><h2 id="整型："><a href="#整型：" class="headerlink" title="整型："></a>整型：</h2><p><strong>byte：</strong></p><p>byte 数据类型是8位（1字节）、有符号的以二进制补码表示的整数；<br>最小值是 -128（-2^7）；<br>最大值是 127（2^7-1）；<br>默认值是 0；<br>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；<br>例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">byte</span> b = -<span class="number">50</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>short：</strong></p><p>short 数据类型是 16 位（2字节）、有符号的以二进制补码表示的整数<br>最小值是 -32768（-2^15）；<br>最大值是 32767（2^15 - 1）；<br>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；<br>默认值是 0；<br>例子：short s = 1000，short r = -20000。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> s = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">short</span> r = -<span class="number">20000</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>int：</strong></p><p>int 数据类型是32位（4字节）、有符号的以二进制补码表示的整数；<br>最小值是 -2,147,483,648（-2^31）；<br>最大值是 2,147,483,647（2^31 - 1）；<br>一般地整型变量默认为 int 类型；<br>默认值是 0 ；<br>例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">int</span> b = -<span class="number">200000</span>;</span><br></pre></td></tr></tbody></table></figure><p><strong>long：</strong></p><p>long 数据类型是 64 位（8字节）、有符号的以二进制补码表示的整数；<br>最小值是 -9,223,372,036,854,775,808（-2^63）；<br>最大值是 9,223,372,036,854,775,807（2^63 -1）；<br>这种类型主要使用在需要比较大整数的系统上；<br>默认值是 0L；<br>例子： long a = 100000L，Long b = -200000L。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">100000L</span>;</span><br><span class="line"><span class="keyword">long</span> b = -<span class="number">200000L</span>;</span><br><span class="line"><span class="comment">//不一定要加后缀，但建议加（因为不叫后缀时默认将一个int型转型后赋给一个long型）</span></span><br><span class="line"><span class="comment">//"L"理论上不分大小写，但是若写成"l"容易与数字"1"混淆，不容易分辩。所以最好大写。</span></span><br></pre></td></tr></tbody></table></figure><h2 id="浮点型："><a href="#浮点型：" class="headerlink" title="浮点型："></a>浮点型：</h2><p><strong>float：</strong></p><p>float 数据类型是单精度、32位（4字节）、符合IEEE 754标准的浮点数；<br>float 在储存大型浮点数组的时候可节省内存空间；<br>表示数范围：-3.403E38~3.403E38；<br>默认值是 0.0f；<br>浮点数不能用来表示精确的值，如货币；<br>例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f1 = <span class="number">234.5F</span>;</span><br><span class="line"><span class="keyword">float</span> f2 = -<span class="number">231.6f</span>;</span><br><span class="line"><span class="comment">//必须加后缀，否则报错，优选F</span></span><br></pre></td></tr></tbody></table></figure><p><strong>double：</strong></p><p>double 数据类型是双精度、64 位（8字节）、符合IEEE 754标准的浮点数；<br>浮点数的默认类型为double类型；<br>表示数范围：-1.798E308~1.798E308；<br>double类型同样不能表示精确的值，如货币；<br>默认值是 0.0d；<br>例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d1 = <span class="number">123.4</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">234.3D</span>;</span><br><span class="line"><span class="keyword">double</span> d3 = <span class="number">32D</span>;</span><br><span class="line"><span class="keyword">double</span> d4 = <span class="number">23d</span>;</span><br><span class="line"><span class="comment">//浮点数Java默认为double型，但是如果遇到将整型赋值给double型时，可以加一个D\d（优选D）后缀以明确为double型</span></span><br></pre></td></tr></tbody></table></figure><h2 id="字符型："><a href="#字符型：" class="headerlink" title="字符型："></a>字符型：</h2><p><strong>char：</strong></p><p>char类型是一个单一的 16 位（2字节） Unicode 字符；<br>表示数范围：0<del>65535（0</del>2^16-1）；<br>最小值是 \u0000（即为 0）；<br>最大值是 \uffff（即为65、535）；<br>char 数据类型可以储存任何字符；<br>例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> letter = <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">char</span> letter = <span class="string">'ABC'</span>;<span class="comment">//编译报错！char型只能存放一个字符！</span></span><br></pre></td></tr></tbody></table></figure><h2 id="布尔型："><a href="#布尔型：" class="headerlink" title="布尔型："></a>布尔型：</h2><p><strong>boolean：</strong></p><p>boolean数据类型表示一位的信息；<br>boolean型不可与其他数据类型互相转换，也没有指定的大小，交由JVM具体根据系统及硬件环境实现；<br>只有两个取值：true 和 false；<br>这种类型只作为一种标志来记录 true/false 情况；<br>默认值是 false；<br>例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> one = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">boolean</span> two = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">boolean</span> three = <span class="number">1</span>;<span class="comment">//编译报错！Java与C类语言不通，非0不能代表true！</span></span><br><span class="line"><span class="keyword">boolean</span> four = <span class="number">0</span>;<span class="comment">//编译报错！Java与C类语言不通，0不能代表false！</span></span><br></pre></td></tr></tbody></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrimitiveTypeTest</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">// byte  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：byte 二进制位数："</span> + Byte.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Byte"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Byte.MIN_VALUE="</span> + Byte.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Byte.MAX_VALUE="</span> + Byte.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// short  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：short 二进制位数："</span> + Short.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Short"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Short.MIN_VALUE="</span> + Short.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Short.MAX_VALUE="</span> + Short.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// int  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：int 二进制位数："</span> + Integer.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Integer"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Integer.MIN_VALUE="</span> + Integer.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Integer.MAX_VALUE="</span> + Integer.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// long  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：long 二进制位数："</span> + Long.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Long"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Long.MIN_VALUE="</span> + Long.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Long.MAX_VALUE="</span> + Long.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// float  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：float 二进制位数："</span> + Float.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Float"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Float.MIN_VALUE="</span> + Float.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Float.MAX_VALUE="</span> + Float.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// double  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：double 二进制位数："</span> + Double.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Double"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"最小值：Double.MIN_VALUE="</span> + Double.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">"最大值：Double.MAX_VALUE="</span> + Double.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// char  </span></span><br><span class="line">        System.out.println(<span class="string">"基本类型：char 二进制位数："</span> + Character.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">"包装类：java.lang.Character"</span>);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">"最小值：Character.MIN_VALUE="</span>  </span><br><span class="line">                + (<span class="keyword">int</span>) Character.MIN_VALUE);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">"最大值：Character.MAX_VALUE="</span>  </span><br><span class="line">                + (<span class="keyword">int</span>) Character.MAX_VALUE);  </span><br><span class="line">    }  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">基本类型：byte 二进制位数：8</span><br><span class="line">包装类：java.lang.Byte</span><br><span class="line">最小值：Byte.MIN_VALUE=-128</span><br><span class="line">最大值：Byte.MAX_VALUE=127</span><br><span class="line"></span><br><span class="line">基本类型：short 二进制位数：16</span><br><span class="line">包装类：java.lang.Short</span><br><span class="line">最小值：Short.MIN_VALUE=-32768</span><br><span class="line">最大值：Short.MAX_VALUE=32767</span><br><span class="line"></span><br><span class="line">基本类型：int 二进制位数：32</span><br><span class="line">包装类：java.lang.Integer</span><br><span class="line">最小值：Integer.MIN_VALUE=-2147483648</span><br><span class="line">最大值：Integer.MAX_VALUE=2147483647</span><br><span class="line"></span><br><span class="line">基本类型：long 二进制位数：64</span><br><span class="line">包装类：java.lang.Long</span><br><span class="line">最小值：Long.MIN_VALUE=-9223372036854775808</span><br><span class="line">最大值：Long.MAX_VALUE=9223372036854775807</span><br><span class="line"></span><br><span class="line">基本类型：float 二进制位数：32</span><br><span class="line">包装类：java.lang.Float</span><br><span class="line">最小值：Float.MIN_VALUE=1.4E-45</span><br><span class="line">最大值：Float.MAX_VALUE=3.4028235E38</span><br><span class="line"></span><br><span class="line">基本类型：double 二进制位数：64</span><br><span class="line">包装类：java.lang.Double</span><br><span class="line">最小值：Double.MIN_VALUE=4.9E-324</span><br><span class="line">最大值：Double.MAX_VALUE=1.7976931348623157E308</span><br><span class="line"></span><br><span class="line">基本类型：char 二进制位数：16</span><br><span class="line">包装类：java.lang.Character</span><br><span class="line">最小值：Character.MIN_VALUE=0</span><br><span class="line">最大值：Character.MAX_VALUE=65535</span><br></pre></td></tr></tbody></table></figure><p><strong>说明：</strong></p><p>Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的”E+数字”表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 =3140，3.14E-3 就是 3.14 x 10-3 =0.00314。</p><p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p><h2 id="注意点强调！"><a href="#注意点强调！" class="headerlink" title="注意点强调！"></a>注意点强调！</h2><p><strong>为什么要设置变量？</strong></p><ul><li>提高内存利用率。</li></ul><p><strong>使用变量的一个核心注意点：</strong></p><p>整数默认int类型，小数默认double类型！！！</p><p><strong>使用变量注意事项：</strong></p><ul><li><p>作用域    </p><ul><li>普通变量定义在哪一级大括号中，哪个大括号的范围就是这个变量的作用域（一般情况）。相同的作用域中不能定义两个同名变量。</li></ul></li><li><p>初始化值</p><ul><li>没有初始值的变量不能直接使用，编译会报错！（不包括：成员变量系统会默认初始化的情况）</li></ul></li><li><p>在一行上建议只定义一个变量。</p></li></ul><h1 id="二、引用数据类型"><a href="#二、引用数据类型" class="headerlink" title="二、引用数据类型"></a>二、引用数据类型</h1><ul><li>在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li><li>对象、字符串、数组都是引用数据类型。</li><li>所有引用类型的默认值都是null。</li><li>一个引用变量可以用来引用任何与之兼容的类型。</li><li>例子：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Site site = <span class="keyword">new</span> Site(<span class="string">"Runoob"</span>);</span><br></pre></td></tr></tbody></table></figure><p>内存图示：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201223014040984.jpg"></p><h1 id="三、Java类型默认值"><a href="#三、Java类型默认值" class="headerlink" title="三、Java类型默认值"></a>三、Java类型默认值</h1><table><thead><tr><th align="center"><strong>数据类型</strong></th><th align="center"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">0</td></tr><tr><td align="center">short</td><td align="center">0</td></tr><tr><td align="center">int</td><td align="center">0</td></tr><tr><td align="center">long</td><td align="center">0L</td></tr><tr><td align="center">float</td><td align="center">0.0f</td></tr><tr><td align="center">double</td><td align="center">0.0d</td></tr><tr><td align="center">char</td><td align="center">‘u0000’</td></tr><tr><td align="center">String (or any object)</td><td align="center">null</td></tr><tr><td align="center">boolean</td><td align="center">false</td></tr></tbody></table><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> bool;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span> by;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> l;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">short</span> sh;</span><br><span class="line">    <span class="keyword">static</span> String str;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Bool :"</span> + bool);</span><br><span class="line">        System.out.println(<span class="string">"Byte :"</span> + by);</span><br><span class="line">        System.out.println(<span class="string">"Character:"</span> + ch);</span><br><span class="line">        System.out.println(<span class="string">"Double :"</span> + d);</span><br><span class="line">        System.out.println(<span class="string">"Float :"</span> + f);</span><br><span class="line">        System.out.println(<span class="string">"Integer :"</span> + i);</span><br><span class="line">        System.out.println(<span class="string">"Long :"</span> + l);</span><br><span class="line">        System.out.println(<span class="string">"Short :"</span> + sh);</span><br><span class="line">        System.out.println(<span class="string">"String :"</span> + str);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>编译运行结果：</strong></p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Bool     :false</span><br><span class="line">Byte     :0</span><br><span class="line">Character:</span><br><span class="line">Double   :0.0</span><br><span class="line">Float    :0.0</span><br><span class="line">Integer  :0</span><br><span class="line">Long     :0</span><br><span class="line">Short    :0</span><br><span class="line">String   :null</span><br></pre></td></tr></tbody></table></figure><h1 id="四、类型转换"><a href="#四、类型转换" class="headerlink" title="四、类型转换"></a>四、类型转换</h1><h2 id="1、自动类型转换"><a href="#1、自动类型转换" class="headerlink" title="1、自动类型转换"></a>1、自动类型转换</h2><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p><p>转换从低级到高级。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">低  ------------------------------------&gt;  高</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>,<span class="keyword">short</span>,<span class="keyword">char</span> —&gt; <span class="keyword">int</span> —&gt; <span class="keyword">long</span> —&gt; <span class="keyword">float</span> —&gt; <span class="keyword">double</span> </span><br></pre></td></tr></tbody></table></figure><p>数据类型转换必须满足如下规则：</p><ul><li><p>byte,short,char相互之间不转换，它们参与运算首先转换为int类型。</p></li><li><p>不能对boolean类型进行类型转换。</p></li><li><p>不能把对象类型转换成不相关类的对象。</p></li><li><p>在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p></li><li><p>转换过程中可能导致溢出或损失精度，例如：</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">128</span>;   </span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;<span class="comment">//b == -128</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> c = (<span class="keyword">byte</span>)<span class="number">130</span>;<span class="comment">//c == -126</span></span><br><span class="line"><span class="keyword">byte</span> d = (<span class="keyword">byte</span>)-<span class="number">210</span>;<span class="comment">//b == 46</span></span><br></pre></td></tr></tbody></table></figure><ul><li>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</li></ul><p>解释：</p><p>1、循环规律：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201223080741499.jpg"></p><p>2、本质，进制：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">byte 一个字节，范围：-128 ~ 127</span><br><span class="line"></span><br><span class="line">byte a = (byte)130;//a = -126</span><br><span class="line"></span><br><span class="line">本质：</span><br><span class="line">130二进制真值：10000010</span><br><span class="line">int类型原码表示130：00000000 00000000 00000000 10000010</span><br><span class="line">（正数的原码和补码一致）</span><br><span class="line">int类型补码表示130：00000000 00000000 00000000 10000010</span><br><span class="line"></span><br><span class="line">byte类型的补码表示：10000010</span><br><span class="line">（原码转补码转原码方法一致：最高位符号位保持不变，其余各位按位取反，最后末位加1）</span><br><span class="line">byte类型的原码为：11111110（即：-126(10)）</span><br><span class="line"></span><br><span class="line">byte b = (byte)-210//b = 46（同理）</span><br><span class="line"></span><br><span class="line">-210：11010010</span><br><span class="line">int原码：10000000 00000000 00000000 11010010</span><br><span class="line">int补码：11111111 11111111 11111111 00101110</span><br><span class="line">byte补码：00101110 ——&gt; byte原码：00101110（即：46(10)）</span><br></pre></td></tr></tbody></table></figure><ul><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">int</span>)<span class="number">23.7</span> == <span class="number">23</span>;        </span><br><span class="line">(<span class="keyword">int</span>)-<span class="number">45.89f</span> == -<span class="number">45</span></span><br></pre></td></tr></tbody></table></figure><h3 id="默认类型转换"><a href="#默认类型转换" class="headerlink" title="默认类型转换"></a>默认类型转换</h3><p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZiDongLeiZhuan</span></span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">            <span class="keyword">char</span> c1 = <span class="string">'a'</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="keyword">int</span> i1 = c1;<span class="comment">//char自动类型转换为int</span></span><br><span class="line">            System.out.println(<span class="string">"char自动类型转换为int后的值等于"</span> + i1);</span><br><span class="line">            <span class="keyword">char</span> c2 = <span class="string">'A'</span>;<span class="comment">//定义一个char类型</span></span><br><span class="line">            <span class="keyword">int</span> i2 = c2 + <span class="number">1</span>;<span class="comment">//char 类型和 int 类型计算</span></span><br><span class="line">            System.out.println(<span class="string">"char类型和int计算后的值等于"</span> + i2);</span><br><span class="line">        }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果为:</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char自动类型转换为int后的值等于97</span><br><span class="line">char类型和int计算后的值等于66</span><br><span class="line">//解析：c1的值为字符a,查ASCII码表可知对应的int类型值为97，A对应值为65，所以i2=65+1=66</span><br></pre></td></tr></tbody></table></figure><h2 id="2、强制类型转换"><a href="#2、强制类型转换" class="headerlink" title="2、强制类型转换"></a>2、强制类型转换</h2><ul><li>条件是转换的数据类型必须是兼容的。</li><li>格式：(type)value  type是要强制类型转换后的数据类型，即：目标类型 变量名 = (目标类型)(被转换的数据); <h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiangZhiZhuanHuan</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">123</span>;</span><br><span class="line">        <span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i1;<span class="comment">//强制类型转换为byte</span></span><br><span class="line">        System.out.println(<span class="string">"int强制类型转换为byte后的值等于"</span> + b);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果：</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int强制类型转换为byte后的值等于123</span><br></pre></td></tr></tbody></table></figure><h3 id="隐含强制类型转换"><a href="#隐含强制类型转换" class="headerlink" title="隐含强制类型转换"></a>隐含强制类型转换</h3><ul><li>整数的默认类型是 int。</li><li>浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。</li></ul><h2 id="3、重点实例"><a href="#3、重点实例" class="headerlink" title="3、重点实例"></a>3、重点实例</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1000000000000</span>;<span class="comment">//Error! 原因：超出int范围</span></span><br><span class="line"><span class="keyword">long</span> j = <span class="number">1000000000000</span>;  <span class="comment">//Error! 原因：虽然1000000000000没有超出long范围，但是1000000000000默认先认定为int型再自动转换为long型，而1000000000000超出了int范围</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> x = <span class="number">1000000000000L</span>;<span class="comment">//True!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> y = <span class="number">12.132</span>;<span class="comment">//Error! 原因：12.132默认为double型，float型装不下</span></span><br><span class="line"><span class="keyword">float</span> yy = <span class="number">12.132F</span>;<span class="comment">//True!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> flag1 = <span class="keyword">true</span>;<span class="comment">//True!</span></span><br><span class="line"><span class="keyword">boolean</span> flag1 = <span class="keyword">false</span>;<span class="comment">//True!</span></span><br><span class="line"><span class="keyword">boolean</span> flag11 = <span class="number">1</span>;<span class="comment">//Error! 原因：Java不是C</span></span><br><span class="line"><span class="keyword">boolean</span> flag22 = <span class="number">0</span>;<span class="comment">//Error! 原因：Java不是C</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> a = <span class="number">50</span>;<span class="comment">//True! 解释：50默认为int型，但是由于50介于byte(-128~127)之间，所以是可以自动转换的（注意！所有大—&gt;小的自动转换中，只有int转byte\short\char有这种特性，而比如double-&gt;float\long-&gt;int\float-&gt;int...无论数据大小介不介于目的数据的范围内都不能自动转换！）</span></span><br><span class="line"><span class="keyword">byte</span> b = <span class="number">130</span>;<span class="comment">//Error! 原因：130的int值不属于byte(-128~127)之间</span></span><br><span class="line"><span class="keyword">byte</span> c = (<span class="keyword">byte</span>)<span class="number">130</span>;<span class="comment">//True! c == -126 循环规律！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------重点说明1-------</span></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">byte</span> n = m;<span class="comment">//Error! 解释：当出现具体的变量时，与字面值常量的情况不同！在编译时并不会自动确定变量的大小是否介于范围之内，所以会报错！</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> mm = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">byte</span> nn = mm;<span class="comment">//True! 当然，这样是可行的！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------重点说明2-------</span></span><br><span class="line"><span class="keyword">short</span> s = <span class="number">1</span>;</span><br><span class="line">s = s + <span class="number">1</span>;<span class="comment">//Error! 解释：出现了具体的变量，编译时编译器并不知道s的具体值是多少，所以无法判断s+1是否介于允许范围之内，故会报错！</span></span><br><span class="line">s = (<span class="keyword">short</span>)(s + <span class="number">1</span>);<span class="comment">//True!</span></span><br><span class="line">s += <span class="number">1</span>;<span class="comment">//True! 解释：s+=1;的本质是：s = (short)(s + 1);</span></span><br></pre></td></tr></tbody></table></figure><h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><ul><li>整数默认int型，小数默认double型。</li><li>整数常量赋值给byte、short、char类型变量，先看该整数常量是否超出int范围，超出则报错；然后再看是否超出所赋值的变量类型的范围，超出则报错。</li><li>整数常量赋值给long类型变量，先看该整数常量是否超出int范围，超出则整数后需跟L字母，表示是long型常量，否则报错。</li><li>小数常量赋值给float类型报错，需要在小数后跟F字母。</li><li>byte,short,char类型相互之间不转换，它们参与运算首先转换为int类型。</li><li>变量相加，首先看类型问题，类型不匹配则报错。</li><li>常量相加，首先做加法，然后看结果是否在赋值的数据类型范围内，如果不是，才报错。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java修饰符总结归纳——Java小抄(2)</title>
      <link href="2020/12/21/Java-Supplement-2/"/>
      <url>2020/12/21/Java-Supplement-2/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java修饰符总结归纳——Java小抄-2-】"><a href="#【Java修饰符总结归纳——Java小抄-2-】" class="headerlink" title="【Java修饰符总结归纳——Java小抄(2)】"></a>【Java修饰符总结归纳——Java小抄(2)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="Java语言提供了很多的修饰符，主要分为两类："><a href="#Java语言提供了很多的修饰符，主要分为两类：" class="headerlink" title="Java语言提供了很多的修饰符，主要分为两类："></a>Java语言提供了很多的修饰符，主要分为两类：</h1><ul><li><p>访问控制修饰符</p></li><li><p>非访问修饰符</p></li></ul><h1 id="一、访问控制修饰符"><a href="#一、访问控制修饰符" class="headerlink" title="一、访问控制修饰符"></a>一、访问控制修饰符</h1><p>Java中，可以使用访问控制修饰符来<strong>保护</strong>对类、变量、方法和构造方法的访问。</p><p>Java 支持 4 种不同的访问权限：</p><ul><li><strong>default（缺省）</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。可使用于：类、接口、变量、方法。</li><li><strong>private :</strong> 在同一类内可见。可使用于：变量、方法。 <strong>注意：不能修饰外部类（内部类可以，所谓内部类就是定义在类{}里的类）。</strong></li><li><strong>public:</strong> 对所有类可见。可使用于：类、接口、变量、方法。</li><li><strong>protected:</strong> 对同一包内的类和所有子类可见。可使用于：变量、方法。 <strong>注意：不能修饰外部类（内部类可以，所谓内部类就是定义在类{}里的类）。</strong></li></ul><h2 id="访问权限表格："><a href="#访问权限表格：" class="headerlink" title="访问权限表格："></a>访问权限表格：</h2><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">子孙类(同一包)</th><th align="center">其他类(同一包)</th><th align="center">子孙类(不同包)</th><th align="center">其他类(不同包)</th></tr></thead><tbody><tr><td align="center"><code>public</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td></tr><tr><td align="center"><code>protected</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td></tr><tr><td align="center"><code>default</code></td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center"></td><td align="center"></td></tr><tr><td align="center"><code>private</code></td><td align="center">Y</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="访问控制和继承"><a href="#访问控制和继承" class="headerlink" title="访问控制和继承"></a>访问控制和继承</h2><p><strong>请注意以下方法继承的规则：</strong></p><ul><li>父类中声明为 public 的方法在子类中也必须为 public。</li><li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li><li>父类中声明为 private 的方法，不能够被继承。</li></ul><h2 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h2><p>项目结构：</p><ul><li><p>com.jerry.java.demo01</p><ul><li>A.java（当前类）</li><li>B.java（子孙类(同一包)）</li><li>C.java（其他类(同一包)）</li></ul></li><li><p>com.jerry.java.demo02</p><ul><li>D.java（子孙类(不同包)）</li><li>E.java（其他类(不同包)）</li></ul></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jerry.java.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当前类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>{</span><br><span class="line">    <span class="comment">//四种访问控制修饰符对应的成员变量</span></span><br><span class="line">    <span class="keyword">int</span> def = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pub = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> pro = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pri = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为类外获得pri所提前提供的Getter方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPri</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> pri;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//四种访问控制修饰符对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">funDef</span><span class="params">()</span> </span>{};</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">funPub</span><span class="params">()</span> </span>{};</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">funPro</span><span class="params">()</span> </span>{};</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">funPri</span><span class="params">()</span> </span>{};</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前类中四种访问控制修饰符都可见！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAuthority</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(def);</span><br><span class="line">        System.out.println(pub);</span><br><span class="line">        System.out.println(pro);</span><br><span class="line">        System.out.println(pri);</span><br><span class="line">        funDef();</span><br><span class="line">        funPub();</span><br><span class="line">        funPro();</span><br><span class="line">        funPri();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jerry.java.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子孙类（同一包）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>{</span><br><span class="line">    System.out.println(def);            <span class="comment">//Error:语句只能写在方法内或者语句块中，不能直接单独出现在类里！</span></span><br><span class="line">    <span class="comment">//子孙类（同一包）中除了private都可见！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAuthority</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//分别测试子孙类（同一包）中四种访问控制修饰符对应的成员变量的可见性（继承性\权限性）</span></span><br><span class="line">        System.out.println(def);        <span class="comment">//True:default</span></span><br><span class="line">        System.out.println(pub);        <span class="comment">//True:public</span></span><br><span class="line">        System.out.println(pro);        <span class="comment">//True:protected</span></span><br><span class="line">        System.out.println(pri);        <span class="comment">//Error:pri为private修饰为私有成员变量，只有父类里可以直接访问！</span></span><br><span class="line">        System.out.println(getPri());   <span class="comment">//True:访问private私有成员变量只能间接通过Getter方法！</span></span><br><span class="line">        <span class="comment">//分别测试子孙类（同一包）中四种访问控制修饰符对应的方法的可见性（继承性\权限性）</span></span><br><span class="line">        funDef();</span><br><span class="line">        funPub();</span><br><span class="line">        funPro();</span><br><span class="line">        funPri();                       <span class="comment">//Error:funPri为private修饰为私有方法，只有父类里可以直接访问！</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jerry.java.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类（同一包）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>{</span><br><span class="line">    <span class="comment">//其他类（同一包）中除了private都可见！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAuthority</span><span class="params">()</span> </span>{</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="comment">//分别测试其他类（同一包）中四种访问控制修饰符对应的成员变量的可见性（继承性\权限性）</span></span><br><span class="line">        System.out.println(a.def);        <span class="comment">//True:default</span></span><br><span class="line">        System.out.println(a.pub);        <span class="comment">//True:public</span></span><br><span class="line">        System.out.println(a.pro);        <span class="comment">//True:protected</span></span><br><span class="line">        System.out.println(a.pri);        <span class="comment">//Error:pri为private修饰为私有成员变量，只有父类里可以直接访问！</span></span><br><span class="line">        System.out.println(a.getPri());   <span class="comment">//True:访问private私有成员变量只能间接通过Getter方法！</span></span><br><span class="line">        <span class="comment">//分别测试其他类（同一包）中四种访问控制修饰符对应的方法的可见性（继承性\权限性）</span></span><br><span class="line">        a.funDef();</span><br><span class="line">        a.funPub();</span><br><span class="line">        a.funPro();</span><br><span class="line">        a.funPri();                       <span class="comment">//Error:funPri为private修饰为私有方法，只有父类里可以直接访问！</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jerry.java.demo02;</span><br><span class="line"><span class="keyword">import</span> com.jerry.java.demo01.A;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子孙类（不同包）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> </span>{</span><br><span class="line">    <span class="comment">//子孙类（不同包）中public,protected可见！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAuthority</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//分别测试子孙类（不同包）中四种访问控制修饰符对应的成员变量的可见性（继承性\权限性）</span></span><br><span class="line">        System.out.println(def);        <span class="comment">//Error:def为default修饰成员变量，只在同一包中才可见！</span></span><br><span class="line">        System.out.println(pub);        <span class="comment">//True:public</span></span><br><span class="line">        System.out.println(pro);        <span class="comment">//True:protected</span></span><br><span class="line">        System.out.println(pri);        <span class="comment">//Error:pri为private修饰为私有成员变量，只有父类里可以直接访问！</span></span><br><span class="line">        System.out.println(getPri());   <span class="comment">//True:访问private私有成员变量只能间接通过Getter方法！</span></span><br><span class="line">        <span class="comment">//分别测试子孙类（不同包）中四种访问控制修饰符对应的方法的可见性（继承性\权限性）</span></span><br><span class="line">        funDef();                       <span class="comment">//Error:funDef为default修饰方法，只在同一包中才可见！</span></span><br><span class="line">        funPub();</span><br><span class="line">        funPro();</span><br><span class="line">        funPri();                       <span class="comment">//Error:funPri为private修饰为私有方法，只有父类里可以直接访问！</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jerry.java.demo02;</span><br><span class="line"><span class="keyword">import</span> com.jerry.java.demo01.A;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他类（不同包）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">E</span> </span>{</span><br><span class="line">    <span class="comment">//其他类（不同包）中只有public可见！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestAuthority</span><span class="params">()</span> </span>{</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="comment">//分别测试其他类（不同包）中四种访问控制修饰符对应的成员变量的可见性（继承性\权限性）</span></span><br><span class="line">        System.out.println(a.def);        <span class="comment">//Error:def为default修饰成员变量，只在同一包中才可见！</span></span><br><span class="line">        System.out.println(a.pub);        <span class="comment">//True:public</span></span><br><span class="line">        System.out.println(a.pro);        <span class="comment">//Error:protect</span></span><br><span class="line">        System.out.println(a.pri);        <span class="comment">//Error:pri为private修饰为私有成员变量，只有父类里可以直接访问！</span></span><br><span class="line">        System.out.println(a.getPri());   <span class="comment">//True:访问private私有成员变量只能间接通过Getter方法！</span></span><br><span class="line">        <span class="comment">//分别测试其他类（不同包）中四种访问控制修饰符对应的方法的可见性（继承性\权限性）</span></span><br><span class="line">        a.funDef();                       <span class="comment">//Error:funDef为default修饰方法，只在同一包中才可见！</span></span><br><span class="line">        a.funPub();</span><br><span class="line">        a.funPro();                       <span class="comment">//Error:protect</span></span><br><span class="line">        a.funPri();                       <span class="comment">//Error:funPri为private修饰为私有方法，只有父类里可以直接访问！</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA:"></a>IntelliJ IDEA:</h2><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201222012218476.png" alt="A"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201222012219620.png" alt="B"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201222012219721.png" alt="C"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201222012219745.png" alt="D"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201222012219781.png" alt="E"></p><h2 id="class-修饰符实例"><a href="#class-修饰符实例" class="headerlink" title="class 修饰符实例"></a>class 修饰符实例</h2><ul><li>四种访问控制修饰符中，对于外部类只可以使用：public 或 默认</li><li>public class：所有地方都可以使用该类</li><li>class：只有同一包中才能使用该类</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201231105814328.png"></p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20201231105814314.png"></p><h1 id="二、非访问修饰符"><a href="#二、非访问修饰符" class="headerlink" title="二、非访问修饰符"></a>二、非访问修饰符</h1><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p><ul><li><p><strong>static 修饰符：</strong>用来修饰类方法和类变量。</p></li><li><p><strong>final 修饰符：</strong>用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p></li><li><p><strong>abstract 修饰符：</strong>用来创建抽象类和抽象方法。</p></li><li><p><strong>synchronized 和 volatile 修饰符：</strong>主要用于线程的编程。</p></li></ul><h2 id="static-修饰符"><a href="#static-修饰符" class="headerlink" title="static 修饰符"></a>static 修饰符</h2><ul><li><p><strong>静态变量：</strong></p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量<strong>只有一份</strong>拷贝。 静态变量也被称为<strong>类变量</strong>。<strong>局部变量不能被声明为 static 变量！</strong>。</p></li><li><p><strong>静态方法：</strong></p><p>static 关键字用来声明<strong>独立于对象</strong>的静态方法。<strong>静态方法不能使用类的非静态变量！</strong>静态方法从参数列表得到数据，然后计算这些数据。</p></li></ul><p><strong>static关键字特点：</strong></p><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>被类的所有对象共享<ul><li>这也是我们判断是否使用静态关键字的条件</li></ul></li><li>可以通过类名调用</li></ul><p><strong>static关键字注意事项：</strong></p><ul><li>在静态方法中是没有this关键字的</li><li>静态方法只能访问静态的成员变量和静态的成员方法</li></ul><p>对类变量和方法的访问可以直接使用 <strong>classname.variablename</strong> 和 <strong>classname.methodname</strong> 的方式访问。</p><p>如下例所示，static修饰符用来创建类方法和类变量。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceCounter</span> </span>{</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> numInstances = <span class="number">0</span>;</span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{</span><br><span class="line">      <span class="keyword">return</span> numInstances;</span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addInstance</span><span class="params">()</span> </span>{</span><br><span class="line">      numInstances++;</span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   InstanceCounter() {</span><br><span class="line">      InstanceCounter.addInstance();</span><br><span class="line">   }</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arguments)</span> </span>{</span><br><span class="line">      System.out.println(<span class="string">"Starting with "</span> + InstanceCounter.getCount() + <span class="string">" instances"</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; ++i) {</span><br><span class="line">         <span class="keyword">new</span> InstanceCounter();</span><br><span class="line">      }</span><br><span class="line">      System.out.println(<span class="string">"Created "</span> + InstanceCounter.getCount() + <span class="string">" instances"</span>);</span><br><span class="line">   }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>以上实例运行编辑结果如下:</p><figure class="highlight txt"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Starting with 0 instances</span><br><span class="line">Created 500 instances</span><br></pre></td></tr></tbody></table></figure><h2 id="final-修饰符"><a href="#final-修饰符" class="headerlink" title="final 修饰符"></a>final 修饰符</h2><p><strong>final 变量：</strong></p><p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p><p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">int</span> value = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 下面是声明常量的实例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BOXWIDTH = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> String TITLE = <span class="string">"Manager"</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeValue</span><span class="params">()</span></span>{</span><br><span class="line">     value = <span class="number">12</span>; <span class="comment">//将输出一个错误</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>final 方法：</strong></p><p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p><p>声明 final 方法的主要目的是防止该方法的内容被修改。</p><p>如下所示，使用 final 修饰符声明方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">changeName</span><span class="params">()</span></span>{</span><br><span class="line">       <span class="comment">// 方法体</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>final 类：</strong></p><p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line">   <span class="comment">// 类体</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="abstract-修饰符"><a href="#abstract-修饰符" class="headerlink" title="abstract 修饰符"></a>abstract 修饰符</h2><p><strong>抽象类：</strong></p><p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p><p>一个类不能同时被 abstract 和 final 修饰。<strong>如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</strong></p><p>抽象类可以包含抽象方法和非抽象方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Caravan</span></span>{</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">   <span class="keyword">private</span> String model;</span><br><span class="line">   <span class="keyword">private</span> String year;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">goFast</span><span class="params">()</span></span>; <span class="comment">//抽象方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">changeColor</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>抽象方法：</strong></p><p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</p><p><strong>抽象方法不能被声明成 final 和 static。</strong></p><p><strong>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</strong></p><p><strong>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</strong></p><p><strong>抽象方法的声明以分号结尾，</strong>例如：**public abstract sample();**。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>; <span class="comment">//抽象方法</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>{</span><br><span class="line">     <span class="comment">//实现抽象方法</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>{</span><br><span class="line">          .........</span><br><span class="line">      }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者，在不实现抽象方法的前提下，必须把子类也设为抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>{</span><br><span class="line">   </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="synchronized-修饰符"><a href="#synchronized-修饰符" class="headerlink" title="synchronized 修饰符"></a>synchronized 修饰符</h2><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">showDetails</span><span class="params">()</span></span>{</span><br><span class="line">.......</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="transient-修饰符"><a href="#transient-修饰符" class="headerlink" title="transient 修饰符"></a>transient 修饰符</h2><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p><p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">transient</span> <span class="keyword">int</span> limit = <span class="number">55</span>;   <span class="comment">// 不会持久化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> b; <span class="comment">// 持久化</span></span><br></pre></td></tr></tbody></table></figure><h2 id="volatile-修饰符"><a href="#volatile-修饰符" class="headerlink" title="volatile 修饰符"></a>volatile 修饰符</h2><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p><p>一个 volatile 对象引用可能是 null。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> active;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        active = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (active) <span class="comment">// 第一行</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 代码</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        active = <span class="keyword">false</span>; <span class="comment">// 第二行</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 <strong>第一行</strong> 中缓冲区的 active 值被使用，那么在 <strong>第二行</strong> 的 active 值为 false 时循环不会停止。</p><p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p><h1 id="补充：修饰符的可用范围"><a href="#补充：修饰符的可用范围" class="headerlink" title="补充：修饰符的可用范围"></a>补充：修饰符的可用范围</h1><ul><li><p><strong>类 (外部类)：</strong></p></li><li><p>默认，public，final，abstract</p><ul><li>我们自己定义：public居多</li></ul></li><li><p><strong>成员变量：</strong></p><ul><li>四种访问控制修饰符均可，final，static</li><li>我们自己定义：private居多</li></ul></li><li><p><strong>构造方法：</strong></p><ul><li>四种访问控制修饰符均可，其他不可</li><li>我们自己定义：public居多</li></ul></li><li><p>(private：类外不可以new对象，类内可以)</p></li><li><p><strong>成员方法：</strong></p><ul><li>四种访问控制修饰符均可，final，static，abstract</li><li>我们自己定义：public居多</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 修饰符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java标识符命名规则——Java小抄(1)</title>
      <link href="2020/12/21/Java-Supplement-1/"/>
      <url>2020/12/21/Java-Supplement-1/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java标识符命名规则——Java小抄-1-】"><a href="#【Java标识符命名规则——Java小抄-1-】" class="headerlink" title="【Java标识符命名规则——Java小抄(1)】"></a>【Java标识符命名规则——Java小抄(1)】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、包（更好地组织类并解决相同类名问题）"><a href="#一、包（更好地组织类并解决相同类名问题）" class="headerlink" title="一、包（更好地组织类并解决相同类名问题）"></a>一、包（更好地组织类并解决相同类名问题）</h1><p>全部小写，域名反写</p><h1 id="二、类、接口（大驼峰表示法）"><a href="#二、类、接口（大驼峰表示法）" class="headerlink" title="二、类、接口（大驼峰表示法）"></a>二、类、接口（大驼峰表示法）</h1><p>第一个单词首字母大写，其余单词首字母大写</p><h1 id="三、对象、方法、变量（小驼峰表示法）"><a href="#三、对象、方法、变量（小驼峰表示法）" class="headerlink" title="三、对象、方法、变量（小驼峰表示法）"></a>三、对象、方法、变量（小驼峰表示法）</h1><p>第一个单词首字母小写，其余单词首字母大写</p><h1 id="四、常量"><a href="#四、常量" class="headerlink" title="四、常量"></a>四、常量</h1><p>全部大写，多个单词间使用_符号连接</p><h1 id="五、命名规则要求：见名知意"><a href="#五、命名规则要求：见名知意" class="headerlink" title="五、命名规则要求：见名知意"></a>五、命名规则要求：见名知意</h1><h1 id="六、示例："><a href="#六、示例：" class="headerlink" title="六、示例："></a>六、示例：</h1><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jerry.java.demo;<span class="comment">//所在包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamingTheDemo</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//实例化计算机专业学生对象：jerryZhou</span></span><br><span class="line">        ComputerMajorsStudents jerryZhou = <span class="keyword">new</span> ComputerMajorsStudents(<span class="string">"jerryZhou"</span>, <span class="number">201940</span>, <span class="number">20</span>);</span><br><span class="line">        jerryZhou.personalInformation();</span><br><span class="line">        jerryZhou.programming();</span><br><span class="line">        jerryZhou.playGames();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口：程序员技能</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ProgrammerSkill</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">programming</span><span class="params">()</span></span>;      <span class="comment">//编程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGames</span><span class="params">()</span></span>;        <span class="comment">//玩游戏</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//类：计算机专业学生</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerMajorsStudents</span> <span class="keyword">implements</span> <span class="title">ProgrammerSkill</span>  </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//字符串常量：大学专业</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String UNIVERSITY_MAJOR = <span class="string">"Computer Science And Technology"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerMajorsStudents</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerMajorsStudents</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//个人信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">personalInformation</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Name:"</span> + name + <span class="string">"\nId:"</span> + id + <span class="string">"\nAge:"</span> + age + <span class="string">"\nUniversity major:"</span> + UNIVERSITY_MAJOR);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写接口方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">programming</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Coding..."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写接口方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playGames</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"Play..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 命名规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sublime Text3 &amp; Java 环境搭建</title>
      <link href="2020/12/19/SublimeText3-Java/"/>
      <url>2020/12/19/SublimeText3-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="【Sublime-Text3-amp-Java-环境搭建】"><a href="#【Sublime-Text3-amp-Java-环境搭建】" class="headerlink" title="【Sublime Text3 &amp; Java 环境搭建】"></a>【Sublime Text3 &amp; Java 环境搭建】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、打开用户配置文件夹"><a href="#一、打开用户配置文件夹" class="headerlink" title="一、打开用户配置文件夹"></a>一、打开用户配置文件夹</h1><ul><li>菜单栏 ——&gt; 首选项 ——&gt; 浏览插件目录</li><li>打开目录下的 <code>User</code> 文件夹</li></ul><h1 id="二、配置-Java-环境"><a href="#二、配置-Java-环境" class="headerlink" title="二、配置 Java 环境"></a>二、配置 Java 环境</h1><p>编写一个 <code>JavaC.sublime-build</code> 文件放入 User 中</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">"cmd": ["javac","-encoding","UTF-8","-d",".","$file"],</span><br><span class="line">"file_regex": "^(...*?):([0-9]*):?([0-9]*)",</span><br><span class="line">"selector": "source.java",</span><br><span class="line">"encoding":"GBK",</span><br><span class="line">//执行完上面的命令就结束</span><br><span class="line">// 下面的命令需要按Ctrl+Shift+b来运行</span><br><span class="line">"variants":</span><br><span class="line">    [</span><br><span class="line">        {</span><br><span class="line">            "name": "Run",</span><br><span class="line">            "shell": true,</span><br><span class="line">            "cmd" :  ["start","cmd","/c", "java ${file_base_name} &amp;echo. &amp; pause"],</span><br><span class="line">            // /c是执行完命令后关闭cmd窗口,</span><br><span class="line">            // /k是执行完命令后不关闭cmd窗口。</span><br><span class="line">            // echo. 相当于输入一个回车</span><br><span class="line">            // pause命令使cmd窗口按任意键后才关闭</span><br><span class="line">            "working_dir": "${file_path}",</span><br><span class="line">            "encoding":"GBK"</span><br><span class="line">        }</span><br><span class="line">    ]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="三、编译-JavaC"><a href="#三、编译-JavaC" class="headerlink" title="三、编译 JavaC"></a>三、编译 JavaC</h1><ul><li>快捷键 <kbd>Shift</kbd> + <kbd>Ctrl</kbd> + <kbd>B</kbd></li><li>在弹窗中选择 <code>JavaC</code></li></ul><h1 id="四、运行-JavaC-Run"><a href="#四、运行-JavaC-Run" class="headerlink" title="四、运行 JavaC - Run"></a>四、运行 JavaC - Run</h1><ul><li>快捷键 <kbd>Shift</kbd> + <kbd>Ctrl</kbd> + <kbd>B</kbd></li><li>在弹窗中选择 <code>JavaC - Run</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 环境搭建 </tag>
            
            <tag> Sublime Text3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java JDK 安装目录及其子目录含义</title>
      <link href="2020/12/18/Java-Directory-Meaning/"/>
      <url>2020/12/18/Java-Directory-Meaning/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java-JDK-安装目录及其子目录含义】"><a href="#【Java-JDK-安装目录及其子目录含义】" class="headerlink" title="【Java JDK 安装目录及其子目录含义】"></a>【Java JDK 安装目录及其子目录含义】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、JDK-安装目录及其子目录结构图"><a href="#一、JDK-安装目录及其子目录结构图" class="headerlink" title="一、JDK 安装目录及其子目录结构图"></a>一、JDK 安装目录及其子目录结构图</h1><blockquote><p>这里以 JDK 1.8.0_231 版本为例<br>JDK 安装在了：D:\Program\Java 目录下</p></blockquote><p>当 JDK 安装完成后，在安装目录下除了 jdk 文件夹， 还会出现一个 jre 文件夹，而 jdk 文件夹内部也包含一个 jre 文件夹……，具体含义待会再说，先看一下 JDK 安装目录及其子目录结构图： </p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210313235617952.png" alt="JDK 安装目录及其子目录结构图"></p><h1 id="二、认识-JDK-与-JRE"><a href="#二、认识-JDK-与-JRE" class="headerlink" title="二、认识 JDK 与 JRE"></a>二、认识 JDK 与 JRE</h1><h2 id="2-1-啥是-JDK"><a href="#2-1-啥是-JDK" class="headerlink" title="2.1 啥是 JDK ?"></a>2.1 啥是 JDK ?</h2><p>JDK 即 Java SDK （全称：Java 程序开发的工具包），JDK 是整个 Java 的核心，包括了 Java 的开发环境和运行环境，以及一堆 Java 工具（tools.jar）和 Java 基础的类库（rt.jar）等。</p><h2 id="2-2-啥是-JRE"><a href="#2-2-啥是-JRE" class="headerlink" title="2.2 啥是 JRE ?"></a>2.2 啥是 JRE ?</h2><p>JRE 即 Java 运行环境，是运行 Java 程序所必须的环境的集合，包含 JVM （JAVA 虚拟机）标准实现、Java 核心类库（API）及支持文件，但不包含开发工具（编译器、调试器等）。</p><h2 id="2-3-JDK-与-JRE-的关系"><a href="#2-3-JDK-与-JRE-的关系" class="headerlink" title="2.3 JDK 与 JRE 的关系"></a>2.3 JDK 与 JRE 的关系</h2><h3 id="2-3-1-区别"><a href="#2-3-1-区别" class="headerlink" title="2.3.1 区别"></a>2.3.1 区别</h3><p>JDK 是开发工具包，是用来开发 Java 程序的，也就自然是面对 Java 的程序开发人员，而 JRE 是只是运行环境，面向的是 Java 程序的使用者。也就是说，如果要使用 Java 开发程序，则必须安装 JDK，但如果只是想运行 Java 程序，那只需要安装 JRE 即可。</p><h3 id="2-3-2-联系"><a href="#2-3-2-联系" class="headerlink" title="2.3.2 联系"></a>2.3.2 联系</h3><blockquote><p>参考以下 Java 源文件的编译和执行过程</p></blockquote><ol><li><p>Java 源文件（.java）经过 Java 编译器（javac.exe）编译以后形成 JVM 可运行的字节码（.class）文件。</p></li><li><p>运行 Java 解释器（java.exe）即可将 JVM 上运行的目标代码（字节码，即 .class 文件）解释成为具体平台的机器码（通常为：二进制码），也就可以运行该 Java 程序了。</p></li><li><p>任何一台机器只要配备了 Java 解释器，就可以运行这个程序，而不管这种字节码是在何种平台上生成的。但要注意的是 Java 解释器只是一个基于 JVM 平台的程序，所以它不能单独执行，必须依赖于JVM。</p></li></ol><h3 id="2-3-3-包含"><a href="#2-3-3-包含" class="headerlink" title="2.3.3 包含"></a>2.3.3 包含</h3><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210313235617995.png" alt="包含关系"></p><ul><li><p>由上图可知：JDK 包含 JRE 包含 JVM</p></li><li><p>所以，安装 JDK 就间接安装 JRE 及 JVM 了</p></li></ul><h1 id="三、JDK-各个文件夹含义详解"><a href="#三、JDK-各个文件夹含义详解" class="headerlink" title="三、JDK 各个文件夹含义详解"></a>三、JDK 各个文件夹含义详解</h1><h2 id="3-1-D-Program-Java-jdk-目录"><a href="#3-1-D-Program-Java-jdk-目录" class="headerlink" title="3.1 D:\Program\Java\jdk 目录"></a>3.1 D:\Program\Java\jdk 目录</h2><h3 id="3-1-1-D-Program-Java-jdk"><a href="#3-1-1-D-Program-Java-jdk" class="headerlink" title="3.1.1 D:\Program\Java\jdk"></a>3.1.1 D:\Program\Java\jdk</h3><p>jdk 根目录，包含版权、许可及 README 文件以及 Java 核心平台 API 的源文件归档（src.zip）。</p><h3 id="3-1-2-–jdk-bin"><a href="#3-1-2-–jdk-bin" class="headerlink" title="3.1.2 –jdk\bin"></a>3.1.2 –jdk\bin</h3><p>jdk 开发工具可执行文件目录，里面包含有 javac.exe、java.exe 等可执行程序。</p><h3 id="3-1-3-–jdk-lib"><a href="#3-1-3-–jdk-lib" class="headerlink" title="3.1.3 –jdk\lib"></a>3.1.3 –jdk\lib</h3><p>jdk 开发工具使用的类库目录，主要包括 tools.jar 和 dt.jar。</p><h3 id="3-1-4-–jdk-jre"><a href="#3-1-4-–jdk-jre" class="headerlink" title="3.1.4 –jdk\jre"></a>3.1.4 –jdk\jre</h3><p>jdk 开发工具所使用的 Java 运行时环境的根目录，除了文档外，它与可部署的 jre 完全相同。</p><h3 id="3-1-5-–jdk-include"><a href="#3-1-5-–jdk-include" class="headerlink" title="3.1.5 –jdk\include"></a>3.1.5 –jdk\include</h3><p>c 的头文件，用与支持 native-code 库使用 jvm Debugger（虚拟机调试器）接口。</p><h2 id="3-2-D-Program-Java-jdk-jre-目录"><a href="#3-2-D-Program-Java-jdk-jre-目录" class="headerlink" title="3.2 D:\Program\Java\jdk\jre 目录"></a>3.2 D:\Program\Java\jdk\jre 目录</h2><h3 id="3-2-1-D-Program-Java-jdk-jre"><a href="#3-2-1-D-Program-Java-jdk-jre" class="headerlink" title="3.2.1 D:\Program\Java\jdk\jre"></a>3.2.1 D:\Program\Java\jdk\jre</h3><p>Java 运行环境存放目录。</p><h3 id="3-2-2-–jdk-jre-bin"><a href="#3-2-2-–jdk-jre-bin" class="headerlink" title="3.2.2 –jdk\jre\bin"></a>3.2.2 –jdk\jre\bin</h3><p>jre 执行文件及 DLL 库，可执行文件与 jdk\bin 相同，不必将该目录放在 path 环境变量中。</p><h3 id="3-2-3-–jdk-jre-lib"><a href="#3-2-3-–jdk-jre-lib" class="headerlink" title="3.2.3 –jdk\jre\lib"></a>3.2.3 –jdk\jre\lib</h3><p> Java 程序运行时环境使用的代码库、属性设置和资源文件，主要包括：</p><p><strong>（1）rt.jar</strong></p><p>系统引导库（构成 Java 平台核心 API 的 RunTime 类）。</p><p><strong>（2）charsets.jar</strong></p><p>字符转换类及其它与国际化和本地化有关的类。</p><p><strong>（3）–jdk\jre\lib\ext</strong></p><p>Java 平台扩展类库的缺省安装目录。例如 JavaHelp jar 就可以放在此目录下。</p><p><strong>（4）–jdk\jre\lib\security</strong></p><p>包含用于安全管理的文件。这些文件包括安全策略 (java.policy) 和安全属性 (java.security) 文件。</p><p><strong>（5）–jdk\jre\lib\applet</strong></p><p>对 applet 支持的一些资源文件。</p><p><strong>（6）–jdk\jre\lib\fonts</strong></p><p>TrueType 字体文件。</p><h2 id="3-3-为什么-Java-目录中会存在两个-jre-目录以及三个-lib-目录，他们的作用和区别又是什么？"><a href="#3-3-为什么-Java-目录中会存在两个-jre-目录以及三个-lib-目录，他们的作用和区别又是什么？" class="headerlink" title="3.3 为什么 Java 目录中会存在两个 jre 目录以及三个 lib 目录，他们的作用和区别又是什么？"></a>3.3 为什么 Java 目录中会存在两个 jre 目录以及三个 lib 目录，他们的作用和区别又是什么？</h2><h3 id="3-3-1-两个-jre-目录"><a href="#3-3-1-两个-jre-目录" class="headerlink" title="3.3.1 两个 jre 目录"></a>3.3.1 两个 jre 目录</h3><p><strong>（1）D:\Program\Java\jre</strong></p><p>可部署的 JRE。</p><p><strong>（2）D:\Program\Java\jdk\jre</strong></p><p>jdk 中自带并使用的 JRE。</p><p><strong>（3）区别及联系</strong></p><p>总体来说，两个 JRE 文件夹的内容基本相同，区别主要体现在工作的职责上，也就是不同的 JRE 负责不同的工作范围。</p><p>如果只是要执行 Java 程序，则只需要 Java 目录下的 JRE 即可。如果要开发 Java 程序，则需要 JDK 中的 JRE。比如我们使用 javac.exe 来编译 Java 程序时，系统会优先使用 jdk\bin 下的可执行文件，使用的运行环境也是 jdk 下的 jre。</p><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210313235617997.png" alt="两个JRE"></p><h3 id="3-3-2-三个-lib-目录"><a href="#3-3-2-三个-lib-目录" class="headerlink" title="3.3.2 三个 lib 目录"></a>3.3.2 三个 lib 目录</h3><p>D:\Program\Java\jre\lib：jre下的。<br>D:\Program\Java\jdk\lib：jdk下的。<br>D:\Program\Java\jdk\jre\lib：jdk\jre下的。</p><p><strong>（1）jre 下的 lib</strong></p><p>只是运行 java 程序的 jar 包，是为 JVM 运行时候用的，包括所有的标准类库和扩展类等。</p><p><strong>（2）jdk 下的 lib</strong></p><p>包括 java 开发环境的 jar 包，是给 JDK 用的，例如 JDK 下有一些工具，可能要用该目录中的文件，比如编译器等。</p><p><strong>（3）jdk 下的 jre 下的 lib</strong></p><p>是开发环境中，运行时需要的 jar 包。最典型的就是导入的外部驱动 jar 包，因为编译时，系统找的是 jdk 下的 jre，而不是最外层的 jre。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
            <tag> 文件目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java JDK 环境搭建</title>
      <link href="2020/12/17/Java-JDK-Environment-Setup/"/>
      <url>2020/12/17/Java-JDK-Environment-Setup/</url>
      
        <content type="html"><![CDATA[<h1 id="【Java-JDK-环境搭建】"><a href="#【Java-JDK-环境搭建】" class="headerlink" title="【Java JDK 环境搭建】"></a>【Java JDK 环境搭建】</h1><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、为什么-Java-JDK-要配置环境变量"><a href="#一、为什么-Java-JDK-要配置环境变量" class="headerlink" title="一、为什么 Java JDK 要配置环境变量"></a>一、为什么 Java JDK 要配置环境变量</h1><p><strong>配置环境变量，可以使 <code>jdk 工具</code> 全局生效！</strong></p><p>当我们没有配置 jdk 的环境变量时，在 jdk/bin 目录外是运行不了 <code>javac.exe</code> (java 编译器) 和 <code>java.exe</code> (java 解释器) 的。</p><p>当然我们也可以去 jdk/bin 目录下运行 java 程序，但问题是在 bin 目录下通过启动 javac.exe 把一个 <code>.java</code> 文件编译成 <code>.class</code> 文件后，这个 <code>.class</code> 文件就直接生成在 jdk/bin 目录里了，这样的文件组织方式显然是不好的。</p><p>所以我们需要把 jdk 配置到 path 里面，这样在任何目录下（全局）都能运行 javac.exe 和 java.exe 来编译解释 java 程序了，同时也就防止了 jdk/bin 目录里存在许多的 .java 文件和 .class 文件。</p><h1 id="二、环境变量全局识别的原理"><a href="#二、环境变量全局识别的原理" class="headerlink" title="二、环境变量全局识别的原理"></a>二、环境变量全局识别的原理</h1><p>当在命令行中执行的程序不存在时，Windows 系统会在系统中已有的一个名为 <code>path</code> 的环境变量中查找目录列表中是否存在目标程序。</p><h1 id="三、环境变量配置步骤"><a href="#三、环境变量配置步骤" class="headerlink" title="三、环境变量配置步骤"></a>三、环境变量配置步骤</h1><h2 id="3-1-情况1"><a href="#3-1-情况1" class="headerlink" title="3.1 情况1"></a>3.1 情况1</h2><p>对于单纯的 Java SE 开发来说：</p><ul><li>找到 jdk 安装目录，复制 <code>\jdk\bin</code> 路径</li><li>控制面板 ——&gt; 系统 ——&gt; 高级系统设置 ——&gt; 高级 ——&gt; 环境变量 ——&gt;系统变量</li><li>找到 <code>path</code> 变量 点击编辑</li><li>添加 <code>\jdk\bin</code> 路径</li><li>逐个确定退出</li></ul><h2 id="3-2-情况2"><a href="#3-2-情况2" class="headerlink" title="3.2 情况2"></a>3.2 情况2</h2><p>对于 Java SE &amp; Java EE 开发来说：</p><ul><li><p>找到 jdk 安装目录，复制 <code>\jdk\bin</code> 路径</p></li><li><p>控制面板 ——&gt; 系统 ——&gt; 高级系统设置 ——&gt; 高级 ——&gt; 环境变量 ——&gt;系统变量</p></li><li><p>点击 新建变量</p></li><li><p>变量名：<code>JAVA_HOME</code></p></li><li><p>变量值：<code>\jdk</code> 路径</p></li><li><p>点击确定</p></li><li><p>找到 <code>path</code> 变量 点击编辑</p></li><li><p>添加 <code>%JAVA_HOME%\bin</code></p></li><li><p>逐个确定退出</p></li></ul><h1 id="四、配置测试"><a href="#四、配置测试" class="headerlink" title="四、配置测试"></a>四、配置测试</h1><ul><li>打开 命令行</li><li>输入 <code>javac</code></li><li>输入 <code>java</code></li><li>输入 <code>java -version</code></li></ul><p>若以上命令成功识别，则配置成功。</p><h1 id="五、解释"><a href="#五、解释" class="headerlink" title="五、解释"></a>五、解释</h1><ol><li><strong>为啥要配置 JAVA_HOME，一定要用 JAVA_HOME 命名吗？</strong></li></ol><p>电脑如果装了多个版本的 jdk，我们只需要在 <code>JAVA_HOME</code> 中把需要的 jdk 目录添加进去，而不用在 path 里面加 bin 目录的路径，这样可以防止多个版本调用时的版本不确定性。</p><p>同时有些 Java 开发工具，如（Eclipse、IDEA、Tomcat）都会去扫描 JAVA_HOME 变量，看看电脑装了几个版本的 jdk，确定使用哪一个。</p><p>若不用 JAVA_HOME 这个名字当参数名，那么当这些软件需要检索 JAVA_HOME 时，就需要先去手动修改相应的配置文件，才能使用这些软件，并且即便修改后也有发生故障的可能性，何必呢？</p><ol start="2"><li><strong>为什么没有配置 CLASSPATH 变量？</strong></li></ol><p>jdk1.5 之后就不用再配置 <code>CLASSPATH</code> 了。当然某时为了保证向下兼容，也可以配置上为好。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDK </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JERRY 中文技术文档的写作规范》</title>
      <link href="2020/11/29/JERRY-Document-Style-Guide/"/>
      <url>2020/11/29/JERRY-Document-Style-Guide/</url>
      
        <content type="html"><![CDATA[<h1 id="JERRY-Document-Style-Guide"><a href="#JERRY-Document-Style-Guide" class="headerlink" title="JERRY-Document-Style-Guide"></a>JERRY-Document-Style-Guide</h1><p><strong>《JERRY 中文技术文档的写作规范》</strong></p><blockquote><p>主要内容基于阮一峰<a href="https://github.com/ruanyf/document-style-guide">《中文技术文档的写作规范》</a>，个别内容进行了个人补充。</p><p>转载请注明出处，请勿用于商业用途！</p></blockquote><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><h2 id="1-1-层级"><a href="#1-1-层级" class="headerlink" title="1.1 层级"></a>1.1 层级</h2><p>标题分为四级。</p><ul><li>一级标题：文章的标题</li><li>二级标题：文章主要部分的大标题</li><li>三级标题：二级标题下面一级的小标题</li><li>四级标题：三级标题下面某一方面的小标题</li></ul><p>下面是示例。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-2-原则"><a href="#1-2-原则" class="headerlink" title="1.2 原则"></a>1.2 原则</h2><p><strong>（1）一级标题下，不能直接出现三级标题</strong></p><p>示例：下面的文章结构，缺少二级标题。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></tbody></table></figure><p><strong>（2）标题要避免孤立编号（即同级标题只有一个）</strong></p><p>示例：下面的文章结构，<code>二级标题 A</code> 只包含一个三级标题，完全可以省略 <code>三级标题 A</code>。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 二级标题 A</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题 A</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题 B</span></span><br></pre></td></tr></tbody></table></figure><p><strong>（3）下级标题不重复上一级标题的名字</strong></p><p>示例：下面的文章结构，二级标题与下属的三级标题同名，建议避免。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 概述</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 概述</span></span><br></pre></td></tr></tbody></table></figure><p><strong>（4）谨慎使用四级标题，尽量避免出现，保持层级的简单，防止出现过于复杂的章节</strong></p><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</p><p>示例：下面的结构二要好于结构一。结构一适用的场景，主要是较长篇幅的内容。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">结构一</span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题 A</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题 B</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### 四级标题 C</span></span><br><span class="line"></span><br><span class="line">结构二</span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**（1）A**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**（2）B**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**（3）C**</span></span><br></pre></td></tr></tbody></table></figure><h1 id="二、文本"><a href="#二、文本" class="headerlink" title="二、文本"></a>二、文本</h1><h2 id="2-1-字间距"><a href="#2-1-字间距" class="headerlink" title="2.1 字间距"></a>2.1 字间距</h2><p><strong>（1）全角中文字符与半角英文字符之间，应有一个半角空格</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：本文介绍如何快速启动Windows系统。</span><br><span class="line"></span><br><span class="line">正确：本文介绍如何快速启动 Windows 系统。</span><br></pre></td></tr></tbody></table></figure><p><strong>（2）全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。</span><br><span class="line"></span><br><span class="line">正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。(个人推荐)</span><br></pre></td></tr></tbody></table></figure><p>半角的百分号，视同阿拉伯数字。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正确：今年我国经济增长率是6.5%。</span><br><span class="line"></span><br><span class="line">正确：今年我国经济增长率是 6.5%。（个人推荐）</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）英文单位若不翻译，单位前的阿拉伯数字与单位符号之间，应留出适当的空隙</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例1：一部容量为 16 GB 的智能手机</span><br><span class="line"></span><br><span class="line">例2：1 h = 60 min = 3,600 s</span><br></pre></td></tr></tbody></table></figure><p><strong>（4）半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：他的电脑是 MacBook Air 。</span><br><span class="line"></span><br><span class="line">正确：他的电脑是 MacBook Air。</span><br></pre></td></tr></tbody></table></figure><h2 id="2-2-句子"><a href="#2-2-句子" class="headerlink" title="2.2 句子"></a>2.2 句子</h2><p><strong>（1）避免使用长句</strong></p><p>不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，任何情况下都不能接受。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。</span><br><span class="line"></span><br><span class="line">正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</span><br></pre></td></tr></tbody></table></figure><p>逗号分割的长句，总长度不应该超过 100 字或者正文的 3 行。</p><p><strong>（2）尽量使用简单句和并列句，避免使用复合句</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">并列句：他昨天生病了，没有参加会议。</span><br><span class="line"></span><br><span class="line">复合句：那个昨天生病的人没有参加会议。</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）同样一个意思，尽量使用肯定句表达，不使用否定句表达</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：请确认没有接通装置的电源。</span><br><span class="line"></span><br><span class="line">正确：请确认装置的电源已关闭。</span><br></pre></td></tr></tbody></table></figure><p><strong>（4）避免使用双重否定句</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：没有删除权限的用户，不能删除此文件。</span><br><span class="line"></span><br><span class="line">正确：用户必须拥有删除权限，才能删除此文件。</span><br></pre></td></tr></tbody></table></figure><h2 id="2-3-写作风格"><a href="#2-3-写作风格" class="headerlink" title="2.3 写作风格"></a>2.3 写作风格</h2><p><strong>（1）尽量不使用被动语态，改为使用主动语态</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：假如此软件尚未被安装，</span><br><span class="line"></span><br><span class="line">正确：假如尚未安装这个软件，</span><br></pre></td></tr></tbody></table></figure><p><strong>（2）不使用非正式的语言风格</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！</span><br><span class="line"></span><br><span class="line">正确：无法参加本次活动，我深感遗憾。</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：这是唯二的快速启动的方法。</span><br><span class="line"></span><br><span class="line">正确：这是仅有的两种快速启动的方法。</span><br></pre></td></tr></tbody></table></figure><p><strong>（4）用对 “的”、“地”、“得”</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">她露出了开心的笑容。</span><br><span class="line">（形容词＋的＋名词）</span><br><span class="line"></span><br><span class="line">她开心地笑了。</span><br><span class="line">（副词＋地＋动词）</span><br><span class="line"></span><br><span class="line">她笑得很开心。</span><br><span class="line">（动词＋得＋副词）</span><br></pre></td></tr></tbody></table></figure><p><strong>（5）使用代词时（比如 “其”、“该”、“此”、“这” 等词），必须明确指代的内容，保证只有一个含义</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。</span><br><span class="line"></span><br><span class="line">正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</span><br></pre></td></tr></tbody></table></figure><p><strong>（6）名词前不要使用过多的形容词</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。</span><br><span class="line"></span><br><span class="line">正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</span><br></pre></td></tr></tbody></table></figure><h2 id="2-4-英文处理"><a href="#2-4-英文处理" class="headerlink" title="2.4 英文处理"></a>2.4 英文处理</h2><p><strong>（1）英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英文：⋯information stored in random access memory (RAMs)⋯</span><br><span class="line"></span><br><span class="line">中文：……存储在随机存取存储器（RAM）里的信息……</span><br></pre></td></tr></tbody></table></figure><p><strong>（2）外文缩写可以使用半角圆点(<code>.</code>)表示缩写</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">U.S.A.</span><br><span class="line">Apple, Inc.</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英文：5 minutes later⋯</span><br><span class="line"></span><br><span class="line">中文：5 分钟过去了……</span><br></pre></td></tr></tbody></table></figure><p><strong>（4）英文书名或电影名改用中文表达时，双引号应改为书名号</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">英文：He published an article entitled "The Future of the Aviation".</span><br><span class="line"></span><br><span class="line">中文：他发表了一篇名为《航空业的未来》的文章。</span><br></pre></td></tr></tbody></table></figure><p><strong>（5）第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用 “IOC” 了。</span><br></pre></td></tr></tbody></table></figure><p><strong>（6）专有名词中每个词第一个字母均应大写，非专有名词则不需要大写</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。</span><br><span class="line"></span><br><span class="line">“online transaction processing”（在线事务处理）不是专有名词，不应大写。</span><br></pre></td></tr></tbody></table></figure><h1 id="三、段落"><a href="#三、段落" class="headerlink" title="三、段落"></a>三、段落</h1><h2 id="3-1-原则"><a href="#3-1-原则" class="headerlink" title="3.1 原则"></a>3.1 原则</h2><ul><li>一个段落只能有一个主题，或一个中心句子</li><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务</li><li>一个段落的长度不能超过七行，最佳段落长度小于等于四行</li><li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气</li><li>段落之间使用一个空行隔开</li><li>段落开头不要留出空白字符</li><li>文本句子正常情况下均该以句号结尾</li></ul><h2 id="3-2-引用"><a href="#3-2-引用" class="headerlink" title="3.2 引用"></a>3.2 引用</h2><p>引用第三方内容时，应注明出处。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">One man’s constant is another man’s variable. — Alan Perlis</span><br></pre></td></tr></tbody></table></figure><p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本文转载自 WikiQuote</span><br></pre></td></tr></tbody></table></figure><p>使用外部图片时，必须在图片下方或文末标明来源。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本文部分图片来自 Wikipedia</span><br></pre></td></tr></tbody></table></figure><h1 id="四、数值"><a href="#四、数值" class="headerlink" title="四、数值"></a>四、数值</h1><h2 id="4-1-半角数字"><a href="#4-1-半角数字" class="headerlink" title="4.1 半角数字"></a>4.1 半角数字</h2><p>阿拉伯数字一律使用半角形式，不得使用全角形式。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：这件商品的价格是１０００元。</span><br><span class="line"></span><br><span class="line">正确：这件商品的价格是 1000 元。</span><br></pre></td></tr></tbody></table></figure><h2 id="4-2-千分号"><a href="#4-2-千分号" class="headerlink" title="4.2 千分号"></a>4.2 千分号</h2><p>数值为千位以上，应添加千分号（半角逗号）。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXX 公司的实收资本为 ￥1,258,000 人民币。</span><br></pre></td></tr></tbody></table></figure><p>对于 4 位以下的数值，千分号是选用的，比如 <code>1000</code> 和 <code>1,000</code> 都可以接受。对于 4 位以上的数值，千分号是必须的。</p><h2 id="4-3-货币"><a href="#4-3-货币" class="headerlink" title="4.3 货币"></a>4.3 货币</h2><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$1,000</span><br><span class="line">1,000 美元</span><br></pre></td></tr></tbody></table></figure><p>英文的货币名称，建议参考国际标准 <a href="https://en.wikipedia.org/wiki/ISO_4217">ISO 4217</a>。</p><h2 id="4-4-数值范围"><a href="#4-4-数值范围" class="headerlink" title="4.4 数值范围"></a>4.4 数值范围</h2><p>表示数值范围时，用 <code>～</code> 或 <code>——</code> 连接。参见《标点符号》一节的 “连接号” 部分。</p><p>带有单位或百分号时，两个数字建议都要加上单位或百分号。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">132kg～234kg</span><br><span class="line"></span><br><span class="line">67%～89%</span><br></pre></td></tr></tbody></table></figure><h2 id="4-5-变化程度的表示法"><a href="#4-5-变化程度的表示法" class="headerlink" title="4.5 变化程度的表示法"></a>4.5 变化程度的表示法</h2><p>数字的增加要使用 “增加了”、“增加到”。“了” 表示增量，“到” 表示定量。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">增加到过去的两倍</span><br><span class="line">（过去为一，现在为二）</span><br><span class="line"></span><br><span class="line">增加了两倍</span><br><span class="line">（过去为一，现在为三）</span><br></pre></td></tr></tbody></table></figure><p>数字的减少要使用 “降低了”、“降低到”。“了” 表示增量，“到” 表示定量。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">降低到百分之八十</span><br><span class="line">（定额是一百，现在是八十）</span><br><span class="line"></span><br><span class="line">降低了百分之八十</span><br><span class="line">（原来是一百，现在是二十）</span><br></pre></td></tr></tbody></table></figure><p>不能用 “降低 N 倍 ” 或 “减少 N 倍” 的表示法，要用 “降低百分之几” 或 “减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p><h1 id="五、标点符号"><a href="#五、标点符号" class="headerlink" title="五、标点符号"></a>五、标点符号</h1><h2 id="5-1-原则"><a href="#5-1-原则" class="headerlink" title="5.1 原则"></a>5.1 原则</h2><p><strong>（1）中文语句的标点符号，均应该采取全角符号，这样可以与全角文字保持视觉的一致</strong></p><p><strong>（2）如果整句为英文，则该句使用英文/半角标点</strong></p><p><strong>（3）句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首</strong></p><p><strong>（4）点号（句号、逗号、顿号、分号、冒号）不得出现在标题的末尾，而标号（引号、括号、破折号、省略号、书名号、着重号、间隔号、叹号、问号）可以</strong></p><h2 id="5-2-句号"><a href="#5-2-句号" class="headerlink" title="5.2 句号"></a>5.2 句号</h2><p><strong>（1）中文语句的结尾处应该用全角句号（<code>。</code>）</strong></p><p><strong>（2）句子末尾用括号加注时，句号应在括号之外</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）</span><br><span class="line"></span><br><span class="line">正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。</span><br></pre></td></tr></tbody></table></figure><h2 id="5-3-逗号"><a href="#5-3-逗号" class="headerlink" title="5.3 逗号"></a>5.3 逗号</h2><p><strong>（1）逗号（<code>，</code>）表示句子内部的一般性停顿</strong></p><p><strong>（2）注意避免 “一逗到底”，即整个段落除了结尾，全部停顿都使用逗号</strong></p><h2 id="5-4-顿号"><a href="#5-4-顿号" class="headerlink" title="5.4 顿号"></a>5.4 顿号</h2><p><strong>（1）中文句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使存在并列词是英语也是如此</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。</span><br><span class="line"></span><br><span class="line">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</span><br></pre></td></tr></tbody></table></figure><p><strong>（2）英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）中文句子内部的并列词，最后一个尽量使用（<code>和</code>）来连接，使句子读起来更加连贯，下面两个句子都可以，第二个更优</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里，以及百度等。</span><br><span class="line"></span><br><span class="line">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</span><br></pre></td></tr></tbody></table></figure><h2 id="5-5-分号"><a href="#5-5-分号" class="headerlink" title="5.5 分号"></a>5.5 分号</h2><p><strong>（1）分号（<code>；</code>）表示复句内部并列分句之间的停顿</strong></p><h2 id="5-6-引号"><a href="#5-6-引号" class="headerlink" title="5.6 引号"></a>5.6 引号</h2><p><strong>（1）引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：许多人都认为客户服务的核心是 “友好” 和 “专业”。</span><br></pre></td></tr></tbody></table></figure><p><strong>（2）引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）引号与前后文字之间应该用一个空格隔开，与标点符号之间则不用</strong></p><h2 id="5-7-括号"><a href="#5-7-括号" class="headerlink" title="5.7 括号"></a>5.7 括号</h2><p><strong>（1）使用全角圆括号（<code>（）</code>），括号前后不加空格。使用半角圆括号（<code>()</code>），括号前后加一个空格</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例句：请确认所有的连接（电缆和接插件）均安装牢固。</span><br><span class="line"></span><br><span class="line">例句：I love you (GitHub).</span><br></pre></td></tr></tbody></table></figure><p>圆括号前后遇到标点符号不用加空格。</p><p><strong>（2）几种括号的中英文名称</strong></p><table><thead><tr><th></th><th align="center">英文</th><th align="right">中文</th></tr></thead><tbody><tr><td><code>{ }</code></td><td align="center">braces 或 curly brackets</td><td align="right">大括号</td></tr><tr><td><code>[ ]</code></td><td align="center">square brackets 或 brackets</td><td align="right">方括号</td></tr><tr><td><code>&lt; &gt;</code></td><td align="center">angled brackets</td><td align="right">尖括号</td></tr><tr><td><code>( )</code></td><td align="center">parentheses</td><td align="right">圆括号</td></tr></tbody></table><p><strong>（3）中文句子中只能出现全角圆括号（<code>（）</code>），无论括号中是中文还是英文。英文句子中只能出现半角圆括号（<code>()</code>），无论括号中是英文还是中文</strong></p><h2 id="5-8-冒号"><a href="#5-8-冒号" class="headerlink" title="5.8 冒号"></a>5.8 冒号</h2><p><strong>（1）全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：请确认以下几项内容：时间、地点、活动名称和来宾数量。</span><br></pre></td></tr></tbody></table></figure><p><strong>（2）中文句子中一律使用全角冒号（<code>：</code>），无论冒号前是中文还是英文。英文句子中一律使用半角冒号（<code>:</code>），无论冒号前是英文还是中文</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Markdown：是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）表示时间时，应使用半角冒号（<code>:</code>）</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：早上 8:00</span><br></pre></td></tr></tbody></table></figure><h2 id="5-9-省略号"><a href="#5-9-省略号" class="headerlink" title="5.9 省略号"></a>5.9 省略号</h2><p><strong>（1）省略号（<code>……</code>）表示语句未完、或者语气的不连续</strong></p><p><strong>（2）省略号占两个汉字空间、包含六个省略点，不要使用 <code>。。。</code> 或 <code>...</code> 等非标准形式</strong></p><p><strong>（3）省略号不应与 “等” 这个词一起使用</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。</span><br><span class="line"></span><br><span class="line">正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……</span><br><span class="line"></span><br><span class="line">正确：我们为会餐准备了香蕉、苹果、梨等各色水果。</span><br></pre></td></tr></tbody></table></figure><h2 id="5-10-感叹号"><a href="#5-10-感叹号" class="headerlink" title="5.10 感叹号"></a>5.10 感叹号</h2><p><strong>（1）应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）</strong></p><p><strong>（2）不得多个感叹号连用，比如 <code>！！</code> 和 <code>!!!</code></strong></p><h2 id="5-11-破折号"><a href="#5-11-破折号" class="headerlink" title="5.11 破折号"></a>5.11 破折号</h2><p><strong>（1）破折号 <code>————</code> 一般用于进一步解释</strong></p><p><strong>（2）破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。</span><br><span class="line"></span><br><span class="line">例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。</span><br></pre></td></tr></tbody></table></figure><h2 id="5-12-连接号"><a href="#5-12-连接号" class="headerlink" title="5.12 连接号"></a>5.12 连接号</h2><p><strong>（1）连接号用于连接两个类似的词</strong></p><p><strong>（2）以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置</strong></p><ul><li>两个名词的复合</li><li>图表编号</li></ul><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例句：氧化-还原反应</span><br><span class="line"></span><br><span class="line">例句：图 1-1</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>），占一个全角字符的位置</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：2009 年～2011 年</span><br></pre></td></tr></tbody></table></figure><p>注意，波浪连接号前后两个值都应该加上单位。</p><p><strong>（4）波浪连接号也可以用汉字 “至” 代替</strong></p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例句：周围温度：-20°C 至 -10°C</span><br></pre></td></tr></tbody></table></figure><h1 id="六、Markdown"><a href="#六、Markdown" class="headerlink" title="六、Markdown"></a>六、Markdown</h1><blockquote><p> Markdown 中所有文本内容均建议按照上述规范来书写。</p></blockquote><h2 id="6-1-标题"><a href="#6-1-标题" class="headerlink" title="6.1 标题"></a>6.1 标题</h2><p>只使用三级标题。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></tbody></table></figure><p>四级标题。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 全角圆括号加粗 --&gt;</span><br><span class="line"><span class="strong">**（1）标题**</span></span><br></pre></td></tr></tbody></table></figure><p>一到四级标题末尾不能出现句号。</p><p>单个四级标题直接加粗即可，不要写序号。</p><p>四级标题后请使用列表。</p><p><strong>开头规范</strong></p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 名称&lt;!-- 书名、文件名、文档名用《》，其他用 【】 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**第二名称**</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 声明</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**目录**</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 一、一级标题</span></span><br><span class="line">或者</span><br><span class="line"><span class="section"># 第一章 一级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 1.1 二级标题</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 1.1.1 三级标题</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**（1）四级标题**</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-2-段落"><a href="#6-2-段落" class="headerlink" title="6.2 段落"></a>6.2 段落</h2><p>四级标题及关键字才能使用 “加粗”，书名、人名等可以 “斜体”，不要使用 “高亮”。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**Markdown**</span>：是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</span><br><span class="line"></span><br><span class="line"><span class="emphasis">*斜体*</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p> <strong>Markdown</strong>：是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p></blockquote><p>标题上下不要使用分割线。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">---</span><br></pre></td></tr></tbody></table></figure><h2 id="6-3-列表"><a href="#6-3-列表" class="headerlink" title="6.3 列表"></a>6.3 列表</h2><p>同一列表不能分隔开，建议列表元素单行字数不要过长。</p><p>两个及以上元素才能使用列表，单个元素不能用列表表示。</p><p>列表每行的结束不加句号。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 无序列表 --&gt;</span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br><span class="line"></span><br><span class="line">&lt;!-- 有序列表 --&gt;</span><br><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></tbody></table></figure><h2 id="6-4-区块"><a href="#6-4-区块" class="headerlink" title="6.4 区块"></a>6.4 区块</h2><p>区块使用在声明、引用、特殊强调和非主体内容部分。</p><p>区块严禁嵌套，区块中可以使用列表。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块中使用列表</span></span><br><span class="line"><span class="quote">&gt; 1. 第一项</span></span><br><span class="line"><span class="quote">&gt; 2. 第二项</span></span><br><span class="line"><span class="quote">&gt; 3. 第三项</span></span><br><span class="line"><span class="quote">&gt; - 第一项</span></span><br><span class="line"><span class="quote">&gt; - 第二项</span></span><br><span class="line"><span class="quote">&gt; - 第三项</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h2 id="6-5-代码"><a href="#6-5-代码" class="headerlink" title="6.5 代码"></a>6.5 代码</h2><p>段落中的片段代码适量使用，关键字不要重复使用片段代码。</p><p>片段代码前后遇到文字留一个空格，遇到标点符号不用留空格。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个 <span class="code">`片段代码`</span> 示 <span class="code">`例`</span>。</span><br></pre></td></tr></tbody></table></figure><blockquote><p>这是一个 <code>片段代码</code> 示 <code>例</code>。</p></blockquote><p>代码块严格标注类型。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 普通文本 --&gt;</span><br><span class="line">​<span class="code">```text</span></span><br><span class="line"><span class="code">普通文字标注 text 类型</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"></span><br><span class="line">&lt;!-- markdown --&gt;</span><br><span class="line">​<span class="code">```markdown</span></span><br><span class="line"><span class="code">### Markdown 文本标注为 markdown 类型。</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 命令行 --&gt;</span><br><span class="line">​<span class="code">```bash</span></span><br><span class="line"><span class="code">$ javac Test.java</span></span><br><span class="line"><span class="code"># 编译 Test.java 文件。</span></span><br><span class="line"><span class="code"># 命令行统一为 bash 类型，且每条命令前加上 '$'，其中 '#' 为 bash 注释。</span></span><br><span class="line"><span class="code">​```</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 代码 --&gt;</span><br><span class="line">​<span class="code">```java</span></span><br><span class="line"><span class="code">System.out.println("Hello World!");</span></span><br><span class="line"><span class="code">// 打印 Hello World!</span></span><br><span class="line"><span class="code">/* 根据不同的编程语言选择不同的类型。 */</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></tbody></table></figure><blockquote> <!-- 普通文本 --></blockquote><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">普通文字标注 text 类型</span><br></pre></td></tr></tbody></table></figure><blockquote> <!-- markdown --></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### Markdown 文本标注为 markdown 类型。</span></span><br></pre></td></tr></tbody></table></figure><blockquote> <!-- 命令行 --></blockquote><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ javac Test.java</span><br><span class="line"><span class="comment"># 编译 Test.java 文件。</span></span><br><span class="line"><span class="comment"># 命令行统一为 bash 类型，且每条命令前加上 '$'，其中 '#' 为 bash 注释。</span></span><br></pre></td></tr></tbody></table></figure><blockquote> <!-- 代码 --></blockquote><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line"><span class="comment">// 打印 Hello World!</span></span><br><span class="line"><span class="comment">/* 根据不同的编程语言选择不同的类型。 */</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-6-链接"><a href="#6-6-链接" class="headerlink" title="6.6 链接"></a>6.6 链接</h2><p>非特殊情况不要直接暴露链接地址。</p><p>链接左右为文字时留一个空格，为标点符号时不用。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">建议：[<span class="string">bilibili</span>](<span class="link">https://www.bilibili.com/</span>)</span><br><span class="line"></span><br><span class="line">不建议：<span class="xml">&lt;https://www.bilibili.com/&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>建议：<a href="https://www.bilibili.com/">bilibili</a></p><p>不建议：<a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p></blockquote><h2 id="6-7-图片"><a href="#6-7-图片" class="headerlink" title="6.7 图片"></a>6.7 图片</h2><p>合理调整图片大小。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">RUNOOB 图标</span>](<span class="link">http://static.runoob.com/images/runoob-logo.png "RUNOOB"</span>)</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/images/runoob-logo.png"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-8-表格"><a href="#6-8-表格" class="headerlink" title="6.8 表格"></a>6.8 表格</h2><p>表格非特殊情况一律默认左对齐。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><h2 id="6-9-高级"><a href="#6-9-高级" class="headerlink" title="6.9 高级"></a>6.9 高级</h2><blockquote><p>以下用法存在一定风险，不建议使用</p></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 键盘按键 --&gt;</span><br><span class="line">使用 <span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></tbody></table></figure><blockquote><p> 使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 转义 --&gt;</span><br><span class="line"><span class="strong">**文本加粗**</span> </span><br><span class="line">\<span class="emphasis">*\*</span> 正常显示星号 \<span class="emphasis">*\*</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>文本加粗</strong><br>** 正常显示星号 **</p></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 居中 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span>中<span class="xml"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><blockquote><center>中<center></center></center></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 左对齐 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span></span>左<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><blockquote><p align="left">左</p></blockquote><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 右对齐 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span></span>右<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><blockquote><p align="right">右</p></blockquote><h1 id="七、文档体系"><a href="#七、文档体系" class="headerlink" title="七、文档体系"></a>七、文档体系</h1><h2 id="7-1-结构"><a href="#7-1-结构" class="headerlink" title="7.1 结构"></a>7.1 结构</h2><p>软件手册是一部完整的书，建议采用下面的结构。</p><ul><li><strong>简介</strong>（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li><li><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</li><li><strong>入门篇</strong>（Basics）： [必备] [目录] 又称 “使用篇”，提供初级的使用教程<ul><li><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li><li><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</li><li><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</li></ul></li><li><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称 “开发篇”，提供中高级的开发教程</li><li><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li><li><strong>FAQ</strong>：[可选] [文件] 常见问题解答</li><li><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul><li><strong>Glossary</strong>：[可选] [文件] 名词解释</li><li><strong>Recipes</strong>：[可选] [文件] 最佳实践</li><li><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</li><li><strong>ChangeLog</strong>：[可选] [文件] 版本说明</li><li><strong>Feedback</strong>：[可选] [文件] 反馈方式</li></ul></li></ul><p>下面是两个真实范例，可参考。</p><ul><li><a href="https://redux.js.org/introduction/getting-started">Redux 手册</a></li><li><a href="http://flight-manual.atom.io/">Atom 手册</a></li></ul><h2 id="7-2-文件名"><a href="#7-2-文件名" class="headerlink" title="7.2 文件名"></a>7.2 文件名</h2><p>文档的文件名不得含有空格。</p><p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：名词解释.md</span><br><span class="line"></span><br><span class="line">正确：glossary.md</span><br></pre></td></tr></tbody></table></figure><p>文件名建议只使用小写字母，不使用大写字母。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误：TroubleShooting.md</span><br><span class="line"></span><br><span class="line">正确：troubleshooting.md </span><br></pre></td></tr></tbody></table></figure><p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如 <code>README</code>、<code>LICENSE</code>。</p><p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p><figure class="highlight text"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不佳：advanced_usage.md</span><br><span class="line"></span><br><span class="line">正确：advanced-usage.md</span><br></pre></td></tr></tbody></table></figure><h1 id="八、重要问题"><a href="#八、重要问题" class="headerlink" title="八、重要问题"></a>八、重要问题</h1><h2 id="8-1-为什么文件名要小写？"><a href="#8-1-为什么文件名要小写？" class="headerlink" title="8.1 为什么文件名要小写？"></a>8.1 为什么文件名要小写？</h2><p><strong>（1）可移植性</strong></p><p>Linux 系统是大小写敏感的，而 Windows 系统和 Mac 系统正好相反，大小写不敏感。一般来说，这不是大问题。</p><p>但是，如果两个文件名只有大小写不同，其他都相同，跨平台就会出问题。</p><ul><li><code>foobar</code></li><li><code>Foobar</code></li><li><code>FOOBAR</code></li><li><code>fOObAr</code></li></ul><p>上面四个文件名，Windows 系统会把它们都当作 <code>foobar</code>。如果它们同时存在，你可能没办法打开后面三个文件。</p><p>另一方面，在 Mac 系统上开发时，有时会疏忽，写错大小写。</p> <figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确文件名是 MyModule.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = <span class="built_in">require</span>(<span class="string">'./myModule'</span>);</span><br></pre></td></tr></tbody></table></figure><p>上面的代码在 Mac 上面可以运行，因为 Mac 认为 <code>MyModule.js</code> 和 <code>myModule.js</code> 是同一个文件。但是，一旦代码到服务器运行就会报错，因为 Linux 系统找不到 <code>myModule.js</code>。</p><p>如果所有的文件名都采用小写，就不会出现上面的问题，可以保证项目有良好的可移植性。</p><p><strong>（2）易读性</strong></p><p>小写文件名通常比大写文件名更易读，比如 <code>accessibility.txt</code> 就比 <code>ACCESSIBILITY.TXT</code> 易读。</p><p>有人习惯使用 <a href="https://baike.baidu.com/item/%E9%AA%86%E9%A9%BC%E5%91%BD%E5%90%8D%E6%B3%95?fromtitle=%E9%A9%BC%E5%B3%B0%E5%91%BD%E5%90%8D%E6%B3%95&amp;fromid=7560610">驼峰命名法</a>，单词的第一个字母大写，其他字母小写。这种方法的问题是，如果遇到全部是大写的缩略词，就会不适用。</p><p>比如，一个姓李的纽约特警，无论写成 <code>NYPoliceSWATLee</code> 还是 <code>NyPoliceSwatlee</code>，都怪怪的，还是写成 <code>ny-police-swat-lee</code> 比较容易接受。</p><p><strong>（3）易用性</strong></p><p>某些系统会生成一些预置的用户目录，采用首字母大写的目录名。比如，Ubuntu 在用户主目录会默认生成  <code>Downloads</code>、 <code>Pictures</code>、<code>Documents </code> 等目录。</p><p>Mac 系统一部分系统目录也是大写的，比如 <code>/Library/Audio/Apple Loops/</code>。</p><p>另外，某些常见的配置文件或说明文件，也采用大写的文件名，比如 <code>Makefile</code>、<code>INSTALL</code>、<code>CHANGELOG</code>、<code>.Xclients</code> 和 <code>.Xauthority</code> 等等。</p><p>所以，用户的文件都采用小写文件名，就很方便与上面这些目录或文件相区分。</p><p>那问到底，为什么操作系统会采用这样的大写文件名？原因也很简单，因为早期 Unix 系统上，<code>ls</code> 命令先列出大写字母，再列出小写字母，大写的路径会排在前面。因此，如果目录名或文件名是大写的，就比较容易被用户首先看到。</p><p><strong>（4）便捷性</strong></p><p>文件名全部小写，还有利于命令行操作。比如，某些命令可以不使用 <code>-i</code> 参数了。</p> <figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 大小写敏感的搜索</span></span><br><span class="line">$ find . -name abc</span><br><span class="line">$ locate <span class="string">"*.htmL"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大小写不敏感的搜索</span></span><br><span class="line">$ find . -iname abc</span><br><span class="line">$ locate -i <span class="string">"*.HtmL"</span></span><br></pre></td></tr></tbody></table></figure><p>另外，大写字母需要按下 Shift 键，多多少少有些麻烦。如果文件名小写，就不用碰这个键了，不仅省事，还可以提高打字速度。</p><p>程序员长时间使用键盘，每分钟少按几次 Shift，一天下来就可以省掉很多手指动作。长年累月，也是对自己身体的一种保护。</p><p>综上所述，文件名全部使用小写字母和连词线（all-lowercase-with-dashes），是一种值得推广的正确做法。</p><h2 id="8-2-技术文档与文章的区别？"><a href="#8-2-技术文档与文章的区别？" class="headerlink" title="8.2 技术文档与文章的区别？"></a>8.2 技术文档与文章的区别？</h2><ul><li>技术文档注重：专业、严谨、严肃、简练</li><li>技术文章注重：图文并茂、通俗易懂、妙趣横生</li></ul><h2 id="8-3-技术文档与文章的核心？"><a href="#8-3-技术文档与文章的核心？" class="headerlink" title="8.3 技术文档与文章的核心？"></a>8.3 技术文档与文章的核心？</h2><p><strong>（1）技术文档</strong></p><ul><li><p>必要的声明</p></li><li><p>清晰严谨的章节安排</p></li><li><p>单独设计合理的目录导航页</p></li><li><p>删减一切非必要图片</p></li><li><p>严谨地运用链接</p></li><li><p>合理留白</p></li></ul><p><strong>（2）技术文章</strong></p><ul><li>必要的声明</li><li>清晰直观的目录</li><li>合理布局图文内容</li><li>图片适量且具有代表性</li><li>注意文章的平台可移植性</li><li>搭建合理的分享传播途径</li><li>注重通俗易懂</li><li>注重趣味</li><li>注重美观</li><li>合理留白</li></ul>]]></content>
      
      
      <categories>
          
          <category> README </category>
          
      </categories>
      
      
        <tags>
            
            <tag> README </tag>
            
            <tag> 写作规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JERRY PicGo &amp; Gitee 网站图床搭建说明》</title>
      <link href="2020/11/29/JERRY-PicGo-Gitee/"/>
      <url>2020/11/29/JERRY-PicGo-Gitee/</url>
      
        <content type="html"><![CDATA[<h1 id="JERRY-PicGo-Gitee"><a href="#JERRY-PicGo-Gitee" class="headerlink" title="JERRY-PicGo-Gitee"></a>JERRY-PicGo-Gitee</h1><p><strong>《JERRY PicGo &amp; Gitee 网站图床搭建说明》</strong></p><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-1-什么是网站图床？"><a href="#1-1-什么是网站图床？" class="headerlink" title="1.1 什么是网站图床？"></a>1.1 什么是网站图床？</h2><p>图床一般是指储存图片的服务器，有国内和国外之分。国外的图床由于存在空间距离等因素，导致访问速度很慢，影响图片显示速度。国内也分为单线空间、多线空间和 CDN 加速三种。</p><p>图床的意义在于专门用来存放图片，同时允许你把图片对外链接的网上空间。</p><h2 id="1-2-为什么需要图床？"><a href="#1-2-为什么需要图床？" class="headerlink" title="1.2 为什么需要图床？"></a>1.2 为什么需要图床？</h2><ul><li>减轻网站服务器存储压力，同时负担流量</li><li>CDN 服务提高图片加载速度，从而加快网站访问速度</li><li>CDN 服务提高图片加载速度，从而节省流量</li><li>利于后续网站迁移扩容</li></ul><h2 id="1-3-什么是-PicGo？"><a href="#1-3-什么是-PicGo？" class="headerlink" title="1.3 什么是 PicGo？"></a>1.3 什么是 PicGo？</h2><p><strong>PicGo</strong>：一个用于快速上传图片并获取图片 <code>URL</code> 链接的工具。</p><ul><li>开源免费</li><li>支持多种图床</li><li>支持插件可扩展</li><li>支持多种图片上传方式</li><li>支持多种自定义设置</li><li>简单、稳定、易用</li></ul><h2 id="1-4-什么是-Gitee？"><a href="#1-4-什么是-Gitee？" class="headerlink" title="1.4 什么是 Gitee？"></a>1.4 什么是 Gitee？</h2><p><strong>Gitee</strong>：<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E4%B8%AD%E5%9B%BD/5462428">开源中国</a>（OSChina）推出的基于 <code>Git</code> 的代码托管服务和研发协作平台 。</p><h2 id="1-5-PicGo-与-Gitee-搭配作为图床的优缺点"><a href="#1-5-PicGo-与-Gitee-搭配作为图床的优缺点" class="headerlink" title="1.5 PicGo 与 Gitee 搭配作为图床的优缺点"></a>1.5 PicGo 与 Gitee 搭配作为图床的优缺点</h2><p><strong>（1）优点</strong></p><ul><li>免费稳定</li><li>简单易用</li></ul><p><strong>（2）缺点</strong></p><ul><li>只支持单张 1 MB 以内大小的图片</li><li>单个免费图床大小上限为 500 MB</li><li>图片安全性较差</li><li>图床存在一定的失效风险</li></ul><h1 id="二、Gitee-的配置"><a href="#二、Gitee-的配置" class="headerlink" title="二、Gitee 的配置"></a>二、Gitee 的配置</h1><h2 id="2-1-注册用户"><a href="#2-1-注册用户" class="headerlink" title="2.1 注册用户"></a>2.1 注册用户</h2><p><a href="https://gitee.com/">Gitee官网</a></p><p>点击右上角注册即可。</p><h2 id="2-2-创建图床仓库"><a href="#2-2-创建图床仓库" class="headerlink" title="2.2 创建图床仓库"></a>2.2 创建图床仓库</h2><ul><li>点击右上角的 <code>+</code> 选择 <code>新建仓库</code></li><li>仓库名称建议设为 <code>image-bed</code></li><li>是否开源选择 <code>公开</code></li><li>勾选使用 Readme 文件初始化这个仓库</li><li>默认选择单分支模型（只创建 master 分支）</li></ul><h2 id="2-3-Gitee-的设置"><a href="#2-3-Gitee-的设置" class="headerlink" title="2.3 Gitee 的设置"></a>2.3 Gitee 的设置</h2><ul><li>在个人主页点击 <code>个人设置</code></li><li>选择安全设置里的 <code>私人令牌</code></li><li>点击 <code>生成新令牌</code></li><li>勾选 <code>user_info</code> 及 <code>projects</code></li><li>进行密码验证</li><li>保存私人令牌</li></ul><h1 id="三、PicGo-的配置"><a href="#三、PicGo-的配置" class="headerlink" title="三、PicGo 的配置"></a>三、PicGo 的配置</h1><h2 id="3-1-PicGo-的下载安装"><a href="#3-1-PicGo-的下载安装" class="headerlink" title="3.1 PicGo 的下载安装"></a>3.1 PicGo 的下载安装</h2><p><strong>（1）下载</strong></p><p><a href="https://molunerfinn.com/PicGo/">PicGo官网</a></p><ul><li>点击免费下载</li><li>选择稳定版本</li><li>选择系统版本</li><li>点击链接下载</li></ul><p><strong>（2）安装</strong></p><ul><li>打开安装程序</li><li>默认执行下一步</li><li>点击启动 PicGo</li></ul><h2 id="3-2-PicGo-Gitee-插件安装"><a href="#3-2-PicGo-Gitee-插件安装" class="headerlink" title="3.2 PicGo Gitee 插件安装"></a>3.2 PicGo Gitee 插件安装</h2><ul><li>在 PicGo 菜单栏中选择 <code>插件设置</code></li><li>搜索 gitee</li><li>下载 <code>gitee-uploader</code> 插件</li><li>重启 PicGo</li></ul><h1 id="四、PicGo-的使用"><a href="#四、PicGo-的使用" class="headerlink" title="四、PicGo 的使用"></a>四、PicGo 的使用</h1><h2 id="4-1-配置-Gitee-插件"><a href="#4-1-配置-Gitee-插件" class="headerlink" title="4.1 配置 Gitee 插件"></a>4.1 配置 Gitee 插件</h2><ul><li>在 PicGo 菜单栏中选择 <code>图床设置</code></li><li>选择 gitee 选项</li><li><code>repo</code> 填写图床仓库名（用户名/仓库名）</li><li><code>branch</code> 默认为 master</li><li><code>token</code> 填写 Gitee 私人令牌</li><li>点击确定（同时建议设为默认图床）</li></ul><h2 id="4-2-自定义-PicGo"><a href="#4-2-自定义-PicGo" class="headerlink" title="4.2 自定义 PicGo"></a>4.2 自定义 PicGo</h2><ul><li>在 PicGo 菜单栏中选择 <code>PicGo 设置</code></li><li>打开日志文件添加 <code>错误-Error</code> 及 <code>提醒-Warn</code></li><li>开启 <code>开机自启</code></li><li>开启 <code>时间截重命名</code></li><li>开启 <code>上传自动复制 url</code></li></ul><h2 id="4-3-上传图片到图床"><a href="#4-3-上传图片到图床" class="headerlink" title="4.3 上传图片到图床"></a>4.3 上传图片到图床</h2><p><strong>（1）拖拽图片上传</strong></p><p>将图片直接拖拽到 PicGo <code>上传区</code> 图片便会自动上传至图床，并自动复制指定格式的链接。</p><p><strong>（2）剪贴板首图上传</strong></p><p>点击 PicGo <code>上传区</code> 中的 <code>剪贴板图片上传</code>，会自动上传剪贴板上存在的第一张图片，并自动复制指定格式的链接。</p><h2 id="4-4-使用技巧"><a href="#4-4-使用技巧" class="headerlink" title="4.4 使用技巧"></a>4.4 使用技巧</h2><p>可以使用截图工具配合 <code>PicGo 快捷上传</code> 快捷键来实现快速上传并得到图片指定格式链接。</p><ul><li>在 PicGo 菜单栏中选择 <code>PicGo 设置</code></li><li>点击修改快捷键，设置 <code>快捷上传</code> 快捷键</li><li>使用截图工具截图并复制截图到剪贴板</li><li>按下快捷上传快捷键（自动上传并复制指定格式的图片链接）</li><li>在所需位置直接粘贴即可</li></ul><h1 id="五、结束语"><a href="#五、结束语" class="headerlink" title="五、结束语"></a>五、结束语</h1><h2 id="5-1-关于网站图床的其他选择"><a href="#5-1-关于网站图床的其他选择" class="headerlink" title="5.1 关于网站图床的其他选择"></a>5.1 关于网站图床的其他选择</h2><p>PicGo &amp; Gitee 图床搭配只适用于图片较少且单张图片较小的小型网站，主要特点在于免费快速。</p><p>对于大型网站和有大量图片需求的网站而言配置专业的服务器是必须的。你可以购买 <code>本地服务器</code> 并自行配置，不过更建议购买 <code>云服务器</code> 使用，这样可以有效控制网站初期运营成本，并且也更加方便、快速、稳定和安全。</p><h2 id="5-2-帮助文档"><a href="#5-2-帮助文档" class="headerlink" title="5.2 帮助文档"></a>5.2 帮助文档</h2><p>PicGo 提供了全面的 <a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo 使用文档</a> 及 <a href="https://github.com/PicGo/Awesome-PicGo">PicGo 插件库</a>，使用过程中遇到问题建议以官方文档为基准。</p>]]></content>
      
      
      <categories>
          
          <category> README </category>
          
      </categories>
      
      
        <tags>
            
            <tag> README </tag>
            
            <tag> 图床搭建 </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JERRY Hexo &amp; GitHub 静态网站搭建说明》</title>
      <link href="2020/11/29/JERRY-Hexo-GitHub/"/>
      <url>2020/11/29/JERRY-Hexo-GitHub/</url>
      
        <content type="html"><![CDATA[<h1 id="JERRY-Hexo-GitHub"><a href="#JERRY-Hexo-GitHub" class="headerlink" title="JERRY-Hexo-GitHub"></a>JERRY-Hexo-GitHub</h1><p><strong>《JERRY Hexo &amp; GitHub 静态网站搭建说明》</strong></p><blockquote><p>原创内容，转载请注明出处！</p></blockquote><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><h2 id="1-1-什么是-Hexo？"><a href="#1-1-什么是-Hexo？" class="headerlink" title="1.1 什么是 Hexo？"></a>1.1 什么是 Hexo？</h2><p><strong>一个基于 <code>Node.js</code> 设计的快速、简洁且高效的博客框架</strong></p><ul><li>超快速度</li><li>支持 Markdown</li><li>一键部署</li><li>插件和可扩展性</li><li>免费开源</li></ul><h2 id="1-2-什么是-GitHub？"><a href="#1-2-什么是-GitHub？" class="headerlink" title="1.2 什么是 GitHub？"></a>1.2 什么是 GitHub？</h2><p><strong>一个面向开源及私有软件项目的托管平台，因为只支持 <code>Git</code> 作为唯一的版本库格式，故名 GitHub</strong></p><ul><li>全球最活跃开源社区</li><li>开源社交平台</li><li>企业项目管理平台</li></ul><h2 id="1-3-什么是静态网站？"><a href="#1-3-什么是静态网站？" class="headerlink" title="1.3 什么是静态网站？"></a>1.3 什么是静态网站？</h2><p><strong>通俗的讲静态网站指：只有 <code>前端</code> 没有 <code>后端</code> 的网站，静态网站的所有页面内容在没有被修改的前提下都是固定不变的</strong></p><p>适用于博客、固定页面展示等网站。</p><h2 id="1-4-Hexo-与-GitHub-搭配建站的优缺点"><a href="#1-4-Hexo-与-GitHub-搭配建站的优缺点" class="headerlink" title="1.4 Hexo 与 GitHub 搭配建站的优缺点"></a>1.4 Hexo 与 GitHub 搭配建站的优缺点</h2><p><strong>（1）优点</strong></p><ul><li>简单稳定</li><li>开源免费</li><li>社区活跃利于交流</li></ul><p><strong>（2）缺点：</strong></p><ul><li>国内访问速度慢</li><li>不支持动态网站搭建</li></ul><h1 id="二、安装-Git"><a href="#二、安装-Git" class="headerlink" title="二、安装 Git"></a>二、安装 Git</h1><h2 id="2-1-什么是-Git？"><a href="#2-1-什么是-Git？" class="headerlink" title="2.1 什么是 Git？"></a>2.1 什么是 Git？</h2><p><strong><code>Git</code> 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目</strong></p><p>使用 GitHub 必须有 Git。</p><h2 id="2-2-Git-的下载安装与配置"><a href="#2-2-Git-的下载安装与配置" class="headerlink" title="2.2 Git 的下载安装与配置"></a>2.2 Git 的下载安装与配置</h2><p><strong>（1）下载安装</strong></p><p><a href="https://git-scm.com/">Git官网</a></p><p>选择对应系统版本下载，安装默认下一步即可。</p><p><strong>（2）配置</strong></p><p>打开终端键入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 git 版本号</span></span><br><span class="line"><span class="comment"># 若成功识别即为 git 安装成功</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"xxx"</span></span><br><span class="line">$ git config --global user.email xxx@xxx.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置个人的用户名称和电子邮件地址</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># user.name=xxx</span></span><br><span class="line"><span class="comment"># user.email=xxx@xxx.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查已有的配置信息</span></span><br><span class="line"><span class="comment"># 若配置信息中出现正确用户名及邮箱即为配置成功</span></span><br></pre></td></tr></tbody></table></figure><h1 id="三、安装-Node-js"><a href="#三、安装-Node-js" class="headerlink" title="三、安装 Node.js"></a>三、安装 Node.js</h1><h2 id="3-1-什么是-Node-js？"><a href="#3-1-什么是-Node-js？" class="headerlink" title="3.1 什么是 Node.js？"></a>3.1 什么是 Node.js？</h2><p>一个基于 <code>Chrome V8</code> 引擎的 <code>JavaScript</code> 运行环境，使用了一个事件驱动 、非阻塞式 I/O 模型，让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与 <code>PHP</code>、<code>Python</code>、<code>Perl</code>、<code>Ruby</code> 等服务端语言平起平坐的 <code>脚本语言</code>。</p><h2 id="3-2-Node-js-的下载安装与配置"><a href="#3-2-Node-js-的下载安装与配置" class="headerlink" title="3.2 Node.js 的下载安装与配置"></a>3.2 Node.js 的下载安装与配置</h2><p><a href="https://nodejs.org/zh-cn/">Node.js官网</a></p><p>选择对应系统的长期支持版下载，安装默认下一步即可。</p><p>安装完成，打开终端键入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Node.js 版本</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 npm 包管理器版本</span></span><br></pre></td></tr></tbody></table></figure><p>若以上两个命令都成功识别，那么 Node.js 便安装成功。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 利用 npm 下载国内淘宝镜像 cnpm</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 cnpm 版本</span></span><br><span class="line"><span class="comment"># 若以上命令成功识别，那么 cnpm 便安装成功</span></span><br></pre></td></tr></tbody></table></figure><p><strong>什么是 npm 和 cnpm ?</strong></p><ul><li><p><code>npm</code> (node package manager)：Node.js 的包管理器，用于 node 插件管理（包括安装、卸载、管理依赖等）。</p></li><li><p><code>cnpm</code>：因为 npm 安装插件是从国外服务器下载，受网络的影响比较大，可能会出现异常，所以乐于分享的淘宝团队解决了这事。来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步”。</p></li></ul><h1 id="四、安装-Hexo"><a href="#四、安装-Hexo" class="headerlink" title="四、安装 Hexo"></a>四、安装 Hexo</h1><h2 id="4-1-Hexo-的下载安装与配置"><a href="#4-1-Hexo-的下载安装与配置" class="headerlink" title="4.1 Hexo 的下载安装与配置"></a>4.1 Hexo 的下载安装与配置</h2><p><strong>下载安装：</strong></p><p><a href="https://hexo.io/zh-cn/">可以参考Hexo官网</a></p><p>打开终端键入以下命令：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待一会，安装完毕</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 hexo 版本</span></span><br><span class="line"><span class="comment"># 若以上命令成功识别，那么 hexo 便安装成功</span></span><br></pre></td></tr></tbody></table></figure><h1 id="五、搭建静态网站"><a href="#五、搭建静态网站" class="headerlink" title="五、搭建静态网站"></a>五、搭建静态网站</h1><h2 id="5-1-新建一个网站"><a href="#5-1-新建一个网站" class="headerlink" title="5.1 新建一个网站"></a>5.1 新建一个网站</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有设置 folder，Hexo 默认在当前的文件夹建立网站</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-2-生成静态文件"><a href="#5-2-生成静态文件" class="headerlink" title="5.2 生成静态文件"></a>5.2 生成静态文件</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该命令可以简写为 $ hexo g</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-3-启动服务器"><a href="#5-3-启动服务器" class="headerlink" title="5.3 启动服务器"></a>5.3 启动服务器</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该命令可以简写为 $ hexo s</span></span><br><span class="line"><span class="comment"># 默认情况下，访问端口为：http://localhost:4000/</span></span><br><span class="line"><span class="comment"># 在浏览器中访问 http://localhost:4000/ 即可打开本地搭建好的网站</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-4-新建一篇文章"><a href="#5-4-新建一篇文章" class="headerlink" title="5.4 新建一篇文章"></a>5.4 新建一篇文章</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &lt;title&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果标题包含空格的话，请使用引号括起来 $ hexo new "first blog"</span></span><br><span class="line"><span class="comment"># 生成的 Markdown 文章放在 source 内的 _posts 下</span></span><br></pre></td></tr></tbody></table></figure><h1 id="六、利用-GitHub-部署网站"><a href="#六、利用-GitHub-部署网站" class="headerlink" title="六、利用 GitHub 部署网站"></a>六、利用 GitHub 部署网站</h1><h2 id="6-1-注册用户"><a href="#6-1-注册用户" class="headerlink" title="6.1 注册用户"></a>6.1 注册用户</h2><p><a href="https://github.com/">GitHub官网</a></p><p>点击右上角注册即可。</p><h2 id="6-2-创建同名仓库"><a href="#6-2-创建同名仓库" class="headerlink" title="6.2 创建同名仓库"></a>6.2 创建同名仓库</h2><ul><li><p>点击右上的 <code>+</code>，选择 <code>New repository</code> 新建一个仓库</p></li><li><p>仓库名称设为 <code>用户名.github.io</code></p></li><li><p>仓库类型为 <code>Public</code> 公共类型</p></li><li><p>复制仓库 <code>HTTPS</code> URL</p></li></ul><h2 id="6-3-更改-Hexo-配置文件"><a href="#6-3-更改-Hexo-配置文件" class="headerlink" title="6.3 更改 Hexo 配置文件"></a>6.3 更改 Hexo 配置文件</h2><p>修改根目录 <code>_config.yml</code> 内的 <code>deploy</code>。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/用户名/用户名.github.io.git</span><span class="comment"># HTTPS URL</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-4-安装-hexo-git-部署工具"><a href="#6-4-安装-hexo-git-部署工具" class="headerlink" title="6.4 安装 hexo - git 部署工具"></a>6.4 安装 hexo - git 部署工具</h2><p>在 Hexo 博客根目录下，打开终端键入：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 hexo-deployer-git 工具</span></span><br></pre></td></tr></tbody></table></figure><h2 id="6-5-远程部署到-GitHub-Pages-服务器"><a href="#6-5-远程部署到-GitHub-Pages-服务器" class="headerlink" title="6.5 远程部署到 GitHub Pages 服务器"></a>6.5 远程部署到 GitHub Pages 服务器</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 该命令可以简写为 $ hexo d</span></span><br></pre></td></tr></tbody></table></figure><p>部署成功后即使用 <code>https://用户名.github.io/</code> 在浏览器中访问网站。</p><h1 id="七、结束语"><a href="#七、结束语" class="headerlink" title="七、结束语"></a>七、结束语</h1><h2 id="7-1-美化-Hexo-网站"><a href="#7-1-美化-Hexo-网站" class="headerlink" title="7.1 美化 Hexo 网站"></a>7.1 美化 Hexo 网站</h2><p>Hexo 支持主题自定义，并且有一个活跃的 <a href="https://hexo.io/themes/">主题社区</a>。</p><p>切换主题方法：下载主题到 <code>themes</code> 文件夹内并修改根目录 <code>_config.yml</code> 内的 <code>theme</code> 设定，即可切换主题。</p><p>修改配置主题请查阅相应主题的文档。</p><p>目前比较热门的几个主题：</p><ul><li><a href="https://github.com/iissnan/hexo-theme-next">NexT GitHub</a> </li><li><a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly GitHub</a></li><li><a href="https://github.com/litten/hexo-theme-yilia">Yilia GitHub</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery">Matery GitHub</a></li></ul><h2 id="7-2-使用-Hexo-插件"><a href="#7-2-使用-Hexo-插件" class="headerlink" title="7.2 使用 Hexo 插件"></a>7.2 使用 Hexo 插件</h2><p>Hexo 是一个支持插件的可扩展框架，具体插件类型及安装方法请前往 <a href="https://hexo.io/plugins/">Hexo 官网查看</a> 或在搜索引擎求助。</p><h2 id="7-3-帮助文档"><a href="#7-3-帮助文档" class="headerlink" title="7.3 帮助文档"></a>7.3 帮助文档</h2><p>Hexo 提供了全面的 Hexo <a href="https://hexo.io/docs/index.html">使用文档</a>（中英文版）及 <a href="https://hexo.io/api/">API 文档</a>，在使用及开发优化 Hexo 的过程中，建议以官方文档为基准。</p>]]></content>
      
      
      <categories>
          
          <category> README </category>
          
      </categories>
      
      
        <tags>
            
            <tag> README </tag>
            
            <tag> 网站搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="2020/11/29/README/"/>
      <url>2020/11/29/README/</url>
      
        <content type="html"><![CDATA[<h1 id="周周的个人博客-Jerry’s-Blog-smiley"><a href="#周周的个人博客-Jerry’s-Blog-smiley" class="headerlink" title="周周的个人博客 Jerry’s Blog :smiley:"></a>周周的个人博客 Jerry’s Blog <span class="github-emoji"><span>😃</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h1><ul><li><p>平日会记录一些学习笔记、思维导图、知识教程和分享一些有意思的事​ <span class="github-emoji"><span>💘</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>……</p></li><li><p><span class="github-emoji"><span>🚀</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://jerry-z-j-r.github.io/">点击访问</a> <span class="github-emoji"><span>🙈</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p></li><li><p>玛卡巴卡 <span class="github-emoji"><span>😶</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 阿巴巴</p></li></ul><figure class="highlight c"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Thank you for visit!\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><span class="github-emoji"><span>🌑</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f311.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌒</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f312.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌓</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f313.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌔</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌕</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f315.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌖</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f316.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌗</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f317.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌘</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f318.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><span class="github-emoji"><span>🌑</span><img src= "/img/loading.gif" data-lazy-src="https://github.githubassets.com/images/icons/emoji/unicode/1f311.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></li></ul><blockquote><p>如果你喜欢本博客，请点击 <a href="https://github.com/JERRY-Z-J-R/JERRY-Z-J-R.github.io">star</a> 收藏，Thanks ♪(･ω･)ﾉ</p></blockquote><hr><h1 id="I-am…"><a href="#I-am…" class="headerlink" title="I am…"></a>I am…</h1><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=670394358&amp;bvid=BV1oa4y1p7AA&amp;cid=260753606&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;">  </iframe></div><blockquote><center>这是我一次比赛中的 Vlog，放在这儿做个自我介绍吧。<center></center></center></blockquote><hr><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>感谢相遇！ 执稿时我正是一个刚步入大学校园的学生，坐标：中国·云南。对世界充满好奇，对未来充满希望。在此之前，我一直在 <code>CSDN</code> 及 <code>Cnblogs</code> 上记录自己的学习过程，那段时光带给了我非常有意义的体验。而如今，我借助 <code>Github</code> 搭建该博客，虽然它目前很简单，但我非常开心，我已经充满期待迎接新的生活啦！</p><p>一路顺利，祝你也祝我！</p><p align="right">2020年11月29日</p><hr><h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210304171028900.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> README </category>
          
      </categories>
      
      
        <tags>
            
            <tag> README </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/29/hello-world/"/>
      <url>2020/11/29/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> README </category>
          
      </categories>
      
      
        <tags>
            
            <tag> README </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
